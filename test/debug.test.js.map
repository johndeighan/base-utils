{
  "version": 3,
  "file": "debug.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\debug.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# debug.test.coffee\r\n\r\nimport {\r\n\tassert, croak,\r\n\t} from '@jdeighan/base-utils/exceptions'\r\nimport {\r\n\tundef, defined, notdefined, isFunction,\r\n\t} from '@jdeighan/base-utils'\r\nimport {\r\n\tLOG, LOGVALUE, LOGSTRING,\r\n\tclearAllLogs, getMyLogs, echoLogsByDefault,\r\n\t} from '@jdeighan/base-utils/log'\r\nimport {CallStack} from '@jdeighan/base-utils/stack'\r\nimport {\r\n\tdebugStack, setDebugging, debugDebug,\r\n\tgetType, dumpDebugLoggers,\r\n\tdbgEnter, dbgReturn, dbgYield, dbgResume, dbg,\r\n\tclearDebugLog, getDebugLog, stdLogString,\r\n\t} from '@jdeighan/base-utils/debug'\r\nimport {utest} from '@jdeighan/base-utils/utest'\r\n\r\nechoLogsByDefault false\r\nsetDebugging false, 'noecho'\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Define some functions to use in testing\r\n\r\nexport main = () ->\r\n\r\n\tdbgEnter 'main'\r\n\tfor i in [13, 15]\r\n\t\tfunc1 i\r\n\t\tLOG i+1\r\n\tdbgReturn 'main'\r\n\treturn\r\n\r\nexport func1 = (i) ->\r\n\tdbgEnter 'func1', i\r\n\tfunc2(i)\r\n\tdbgReturn 'func1'\r\n\treturn\r\n\r\nexport func2 = (i) ->\r\n\tdbgEnter 'func2', i\r\n\tLOG 2*i\r\n\tdbgReturn 'func2'\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport callGen = () ->\r\n\tdbgEnter 'callGen'\r\n\tfor i from gen()\r\n\t\tdbg \"GOT #{i}\"\r\n\t\tLOG i\r\n\tdbgReturn 'callGen'\r\n\treturn\r\n\r\nexport callGen1 = () ->\r\n\tdbgEnter 'func'\r\n\tdbgReturn 'func'\r\n\tLOG 'abc'\r\n\r\nexport callGen2 = () ->\r\n\tdbgEnter 'obj.func'\r\n\tdbgReturn 'obj.func'\r\n\tLOG 'abc'\r\n\r\nexport callGen3 = () ->\r\n\tdbgEnter 'obj.func'\r\n\tdbgReturn 'obj.func'\r\n\tLOG 'abc'\r\n\r\nexport callGen4 = () ->\r\n\tdbgEnter 'Getter.get'\r\n\tdbgEnter 'Fetcher.fetch'\r\n\tdbgReturn 'Fetcher.fetch', {\r\n\t\tstr: 'abcdef abcdef abcdef abcdef abcdef'\r\n\t\tnode: 'abcdef abcdef abcdef abcdef abcdef'\r\n\t\tlineNum: 15\r\n\t\t}\r\n\tdbgReturn 'Getter.get', {\r\n\t\tstr: 'abcdef abcdef abcdef abcdef abcdef'\r\n\t\tnode: 'abcdef abcdef abcdef abcdef abcdef'\r\n\t\tlineNum: 15\r\n\t\t}\r\n\tLOG 'abc'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport gen = () ->\r\n\tdbgEnter 'gen'\r\n\r\n\tdbgYield 'gen', 1\r\n\tyield 1\r\n\tdbgResume 'gen'\r\n\r\n\tdbgYield 'gen', 2\r\n\tyield 2\r\n\tdbgResume 'gen'\r\n\r\n\tdbgReturn 'gen'\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nclearDebugLog()\r\nstdLogString 2, \"\"\"\r\n\t---\r\n\t- abc\r\n\t- def\r\n\t\"\"\"\r\nutest.equal getDebugLog(), \"\"\"\r\n\t│   │   ---\r\n\t│   │   - abc\r\n\t│   │   - def\r\n\t\"\"\"\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- possible values for debugWhat:\r\n#        false - no debug output\r\n#        true - debug all calls\r\n#        <string> - spaces separated names of functions/methods to debug\r\n\r\nTEST = (debugWhat, func, expectedDbg, expectedLog) ->\r\n\r\n\tassert defined(debugWhat), \"1st arg must be defined\"\r\n\tsetDebugging debugWhat, 'noecho'\r\n\r\n\tassert isFunction(func), \"not a function\"\r\n\r\n\tdebugStack.logCalls true\r\n\tclearAllLogs()\r\n\r\n\tfunc()\r\n\r\n\tdbgStr = getDebugLog()\r\n\tlogStr = getMyLogs()\r\n\r\n\tutest.equal dbgStr, expectedDbg\r\n\tutest.equal logStr, expectedLog\r\n\tutest.truthy debugStack.isEmpty()\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() ->\r\n\tTEST false, main, '', \"\"\"\r\n\t\t26\r\n\t\t14\r\n\t\t30\r\n\t\t16\r\n\t\t\"\"\"\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() ->\r\n\tTEST 'main', main, \"\"\"\r\n\t\tenter main\r\n\t\t└─> return from main\r\n\t\t\"\"\", \"\"\"\r\n\t\t26\r\n\t\t14\r\n\t\t30\r\n\t\t16\r\n\t\t\"\"\"\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() ->\r\n\r\n\tTEST 'main func2', main, \"\"\"\r\n\t\tenter main\r\n\t\t│   enter func2 13\r\n\t\t│   └─> return from func2\r\n\t\t│   enter func2 15\r\n\t\t│   └─> return from func2\r\n\t\t└─> return from main\r\n\t\t\"\"\", \"\"\"\r\n\t\t26\r\n\t\t14\r\n\t\t30\r\n\t\t16\r\n\t\t\"\"\"\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() ->\r\n\r\n\tTEST 'func2', main, \"\"\"\r\n\t\tenter func2 13\r\n\t\t└─> return from func2\r\n\t\tenter func2 15\r\n\t\t└─> return from func2\r\n\t\t\"\"\", \"\"\"\r\n\t\t26\r\n\t\t14\r\n\t\t30\r\n\t\t16\r\n\t\t\"\"\"\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- PROBLEM\r\n\r\n# (() ->\r\n#\r\n# \tTEST 'callGen get', callGen, \"\"\"\r\n# \t\tenter callGen\r\n# \t\t│   enter gen\r\n# \t\t│   ├<─ yield 1\r\n# \t\t│   GOT 1\r\n# \t\t│   ├─> resume\r\n# \t\t│   ├<─ yield 2\r\n# \t\t│   GOT 2\r\n# \t\t│   ├─> resume\r\n# \t\t│   └─> return from gen\r\n# \t\t└─> return from callGen\r\n# \t\t\"\"\", \"\"\"\r\n# \t\t1\r\n# \t\t2\r\n# \t\t\"\"\"\r\n# \t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() ->\r\n\r\n\tTEST true, callGen1, \"\"\"\r\n\t\tenter func\r\n\t\t└─> return from func\r\n\t\t\"\"\", \"\"\"\r\n\t\tabc\r\n\t\t\"\"\"\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() ->\r\n\r\n\tTEST 'obj.func', callGen2, \"\"\"\r\n\t\tenter obj.func\r\n\t\t└─> return from obj.func\r\n\t\t\"\"\", \"\"\"\r\n\t\tabc\r\n\t\t\"\"\"\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() ->\r\n\r\n\tTEST 'func', callGen3, \"\"\"\r\n\t\tenter obj.func\r\n\t\t└─> return from obj.func\r\n\t\t\"\"\", \"\"\"\r\n\t\tabc\r\n\t\t\"\"\"\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() ->\r\n\r\n\tTEST 'get fetch', callGen4, \"\"\"\r\n\t\tenter Getter.get\r\n\t\t│   enter Fetcher.fetch\r\n\t\t│   └─> return from Fetcher.fetch\r\n\t\t│       val =\r\n\t\t│       ---\r\n\t\t│       lineNum: 15\r\n\t\t│       node: abcdef˳abcdef˳abcdef˳abcdef˳abcdef\r\n\t\t│       str: abcdef˳abcdef˳abcdef˳abcdef˳abcdef\r\n\t\t└─> return from Getter.get\r\n\t\t    val =\r\n\t\t    ---\r\n\t\t    lineNum: 15\r\n\t\t    node: abcdef˳abcdef˳abcdef˳abcdef˳abcdef\r\n\t\t    str: abcdef˳abcdef˳abcdef˳abcdef˳abcdef\r\n\t\t\"\"\", \"\"\"\r\n\t\tabc\r\n\t\t\"\"\"\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() ->\r\n\tMAIN = () ->\r\n\t\tdbgEnter 'MAIN'\r\n\t\tFUNC1()\r\n\t\tFUNC2()\r\n\t\tdbgReturn 'MAIN'\r\n\t\treturn\r\n\r\n\tFUNC1 = () ->\r\n\t\tdbgEnter 'FUNC1'\r\n\t\tLOG 'Hello'\r\n\t\tdbgReturn 'FUNC1'\r\n\t\treturn\r\n\r\n\tFUNC2 = () ->\r\n\t\tdbgEnter 'FUNC2'\r\n\t\tLOG 'Hi'\r\n\t\tdbgReturn 'FUNC2'\r\n\t\treturn\r\n\r\n\tTEST 'MAIN+', MAIN, \"\"\"\r\n\t\tenter MAIN\r\n\t\t│   enter FUNC1\r\n\t\t│   └─> return from FUNC1\r\n\t\t│   enter FUNC2\r\n\t\t│   └─> return from FUNC2\r\n\t\t└─> return from MAIN\r\n\t\t\"\"\", \"\"\"\r\n\t\tHello\r\n\t\tHi\r\n\t\t\"\"\"\r\n\r\n\t)()\r\n"
  ]
}