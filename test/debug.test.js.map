{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "test/debug.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# debug.test.coffee\n\nimport {\n\tassert, croak,\n\t} from '@jdeighan/base-utils/exceptions'\nimport {\n\tundef, defined, notdefined, isFunction,\n\t} from '@jdeighan/base-utils'\nimport {\n\tLOG, LOGVALUE, LOGSTRING,\n\tclearAllLogs, getMyLogs, echoLogs,\n\t} from '@jdeighan/base-utils/log'\nimport {CallStack} from '@jdeighan/base-utils/stack'\nimport * as lib from '@jdeighan/base-utils/debug'\nObject.assign(global, lib)\nimport {\n\tUnitTester, equal, notequal,\n\tlike, truthy, falsy, fails, succeeds,\n\t} from '@jdeighan/base-utils/utest'\n\nechoLogs false\nsetDebugging false, 'noecho'\n\n# ---------------------------------------------------------------------------\n# --- Define some functions to use in testing\n\nmain = () ->\n\n\tdbgEnter 'main'\n\tfor i in [13, 15]\n\t\tfunc1 i\n\t\tLOG i+1\n\tdbgReturn 'main'\n\treturn\n\nfunc1 = (i) ->\n\tdbgEnter 'func1', i\n\tfunc2(i)\n\tdbgReturn 'func1'\n\treturn\n\nfunc2 = (i) ->\n\tdbgEnter 'func2', i\n\tLOG 2*i\n\tdbgReturn 'func2'\n\treturn\n\ncallGen = () ->\n\tdbgEnter 'callGen'\n\tfor i from gen()\n\t\tdbg \"GOT #{i}\"\n\t\tLOG i\n\tdbgReturn 'callGen'\n\treturn\n\ncallGen1 = () ->\n\tdbgEnter 'func'\n\tdbgReturn 'func'\n\tLOG 'abc'\n\ncallGen2 = () ->\n\tdbgEnter 'obj.func'\n\tdbgReturn 'obj.func'\n\tLOG 'abc'\n\ncallGen3 = () ->\n\tdbgEnter 'obj.func'\n\tdbgReturn 'obj.func'\n\tLOG 'abc'\n\ncallGen4 = () ->\n\tdbgEnter 'Getter.get'\n\tdbgEnter 'Fetcher.fetch'\n\tdbgReturn 'Fetcher.fetch', {\n\t\tstr: 'abcdef abcdef abcdef abcdef abcdef'\n\t\tnode: 'abcdef abcdef abcdef abcdef abcdef'\n\t\tlineNum: 15\n\t\t}\n\tdbgReturn 'Getter.get', {\n\t\tstr: 'abcdef abcdef abcdef abcdef abcdef'\n\t\tnode: 'abcdef abcdef abcdef abcdef abcdef'\n\t\tlineNum: 15\n\t\t}\n\tLOG 'abc'\n\ngen = () ->\n\tdbgEnter 'gen'\n\n\tdbgYield 'gen', 1\n\tyield 1\n\tdbgResume 'gen'\n\n\tdbgYield 'gen', 2\n\tyield 2\n\tdbgResume 'gen'\n\n\tdbgReturn 'gen'\n\treturn\n\n# ---------------------------------------------------------------------------\n\nclearDebugLog()\nstdLogString 2, \"\"\"\n\t---\n\t- abc\n\t- def\n\t\"\"\"\nequal getDebugLog(), \"\"\"\n\t│   │   ---\n\t│   │   - abc\n\t│   │   - def\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n# --- possible values for debugWhat:\n#        false - no debug output\n#        true - debug all calls\n#        <string> - space separated names\n#                   of functions/methods to debug\n\nTEST = (debugWhat, func, expectedDbg, expectedLog) ->\n\n\tassert defined(debugWhat), \"1st arg must be defined\"\n\tsetDebugging debugWhat, 'noecho'\n\n\tassert isFunction(func), \"not a function\"\n\n\tdebugStack.logCalls true\n\tclearAllLogs()\n\n\tfunc()\n\n\tdbgStr = getDebugLog()\n\tlogStr = getMyLogs()\n\n\tequal dbgStr, expectedDbg\n\tequal logStr, expectedLog\n\ttruthy debugStack.isEmpty()\n\treturn\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tTEST false, main, '', \"\"\"\n\t\t26\n\t\t14\n\t\t30\n\t\t16\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tTEST 'main', main, \"\"\"\n\t\tenter main\n\t\t└─> return from main\n\t\t\"\"\", \"\"\"\n\t\t26\n\t\t14\n\t\t30\n\t\t16\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\n\tTEST 'main func2', main, \"\"\"\n\t\tenter main\n\t\t│   enter func2 13\n\t\t│   └─> return from func2\n\t\t│   enter func2 15\n\t\t│   └─> return from func2\n\t\t└─> return from main\n\t\t\"\"\", \"\"\"\n\t\t26\n\t\t14\n\t\t30\n\t\t16\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\n\tTEST 'func2', main, \"\"\"\n\t\tenter func2 13\n\t\t└─> return from func2\n\t\tenter func2 15\n\t\t└─> return from func2\n\t\t\"\"\", \"\"\"\n\t\t26\n\t\t14\n\t\t30\n\t\t16\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- PROBLEM\n\n# (() ->\n#\n# \tTEST 'callGen get', callGen, \"\"\"\n# \t\tenter callGen\n# \t\t│   enter gen\n# \t\t│   ├<─ yield 1\n# \t\t│   GOT 1\n# \t\t│   ├─> resume\n# \t\t│   ├<─ yield 2\n# \t\t│   GOT 2\n# \t\t│   ├─> resume\n# \t\t│   └─> return from gen\n# \t\t└─> return from callGen\n# \t\t\"\"\", \"\"\"\n# \t\t1\n# \t\t2\n# \t\t\"\"\"\n# \t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\n\tTEST true, callGen1, \"\"\"\n\t\tenter func\n\t\t└─> return from func\n\t\t\"\"\", \"\"\"\n\t\tabc\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\n\tTEST 'obj.func', callGen2, \"\"\"\n\t\tenter obj.func\n\t\t└─> return from obj.func\n\t\t\"\"\", \"\"\"\n\t\tabc\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\n\tTEST 'func', callGen3, \"\"\"\n\t\tenter obj.func\n\t\t└─> return from obj.func\n\t\t\"\"\", \"\"\"\n\t\tabc\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\n\tTEST 'get fetch', callGen4, \"\"\"\n\t\tenter Getter.get\n\t\t│   enter Fetcher.fetch\n\t\t│   └─> return from Fetcher.fetch\n\t\t│       val =\n\t\t│       lineNum: 15\n\t\t│       node: abcdef˳abcdef˳abcdef˳abcdef˳abcdef\n\t\t│       str: abcdef˳abcdef˳abcdef˳abcdef˳abcdef\n\t\t└─> return from Getter.get\n\t\t    val =\n\t\t    lineNum: 15\n\t\t    node: abcdef˳abcdef˳abcdef˳abcdef˳abcdef\n\t\t    str: abcdef˳abcdef˳abcdef˳abcdef˳abcdef\n\t\t\"\"\", \"\"\"\n\t\tabc\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tMAIN = () ->\n\t\tdbgEnter 'MAIN'\n\t\tFUNC1()\n\t\tFUNC2()\n\t\tdbgReturn 'MAIN'\n\t\treturn\n\n\tFUNC1 = () ->\n\t\tdbgEnter 'FUNC1'\n\t\tLOG 'Hello'\n\t\tdbgReturn 'FUNC1'\n\t\treturn\n\n\tFUNC2 = () ->\n\t\tdbgEnter 'FUNC2'\n\t\tLOG 'Hi'\n\t\tdbgReturn 'FUNC2'\n\t\treturn\n\n\tTEST 'MAIN+', MAIN, \"\"\"\n\t\tenter MAIN\n\t\t│   enter FUNC1\n\t\t│   └─> return from FUNC1\n\t\t│   enter FUNC2\n\t\t│   └─> return from FUNC2\n\t\t└─> return from MAIN\n\t\t\"\"\", \"\"\"\n\t\tHello\n\t\tHi\n\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tstr = 'abcde '.repeat(4)\n\n\tfunc = (arg) ->\n\t\tdbgEnter 'func', arg\n\t\tresult = {a:str, b:str}\n\t\tdbgReturn 'func', result\n\t\treturn result\n\n\tsetDebugging 'func', 'noecho'\n\n\tdebugStack.logCalls true\n\tclearAllLogs()\n\n\tfunc([str, str, str])\n\n\tdbgStr = getDebugLog()\n\n\texpectedDbg = \"\"\"\n\t\tenter func\n\t\t│   arg[0] =\n\t\t│       - abcde˳abcde˳abcde˳abcde˳\n\t\t│       - abcde˳abcde˳abcde˳abcde˳\n\t\t│       - abcde˳abcde˳abcde˳abcde˳\n\t\t└─> return from func\n\t\t    val =\n\t\t    a: abcde˳abcde˳abcde˳abcde˳\n\t\t    b: abcde˳abcde˳abcde˳abcde˳\n\t\t\"\"\"\n\n\tequal dbgStr, expectedDbg\n\ttruthy debugStack.isEmpty()\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test option 'shortvals'\n\n(() =>\n\tstr = 'abcde '.repeat(4)\n\n\tfunc = (arg) ->\n\t\tdbgEnter 'func', arg\n\t\tresult = {a:str, b:str}\n\t\tdbgReturn 'func', result\n\t\treturn result\n\n\tsetDebugging 'func', 'noecho shortvals'\n\n\tdebugStack.logCalls true\n\tclearAllLogs()\n\n\tfunc([str, str, str])\n\n\tdbgStr = getDebugLog()\n\n\texpectedDbg = \"\"\"\n\t\tenter func\n\t\t│   arg[0] = ARRAY\n\t\t└─> return from func\n\t\t    val = HASH\n\t\t\"\"\"\n\n\tequal dbgStr, expectedDbg\n\ttruthy debugStack.isEmpty()\n\t)()"
  ]
}