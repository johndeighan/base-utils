{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "test/nice.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# nice.test.coffee\n\nimport {undef} from '@jdeighan/base-utils'\nimport {\n\tUnitTester,\n\tequal, like, notequal, truthy, falsy, throws, succeeds,\n\t} from '@jdeighan/base-utils/utest'\nimport {formatString, toNICE} from '@jdeighan/base-utils/nice'\n\n# ---------------------------------------------------------------------------\n\n# --- whitespace is always made explicit\n\nequal formatString(\"a word\"), \"'a˳word'\"\nequal formatString(\"\\t\\tword\"), \"'→→word'\"\nequal formatString(\"first\\nsecond\"), \"'first▼second'\"\nequal formatString(\"first\\r\\nsecond\\r\\n\"), \"'first◄▼second◄▼'\"\n\n# --- strings are surrounded by quote marks that\n#     don't clash with internal characters\n\nequal formatString(\"abc\"), \"'abc'\"\nequal formatString(\"mary's lamb\"), '\"mary\\'s˳lamb\"'\nequal formatString(\"mary's \\\"stuff\\\"\"), '«mary\\'s˳\"stuff\"»'\n\n# ---------------------------------------------------------------------------\n# --- repeat formatString() tests using toNICE()\n\n# --- transform value using toNICE() automatically\nu = new UnitTester()\nu.transformValue = (str) => return toNICE(str)\n\nu.equal \"a word\", \"'a˳word'\"\nu.equal \"\\t\\tword\", \"'→→word'\"\nu.equal \"first\\nsecond\", \"'first▼second'\"\nu.equal \"abc\", \"'abc'\"\nu.equal \"mary's lamb\", '\"mary\\'s˳lamb\"'\nu.equal \"mary's \\\"stuff\\\"\", '«mary\\'s˳\"stuff\"»'\n\nu.equal undef, \"undef\"\nu.equal null, \"null\"\nu.equal NaN, 'NaN'\nu.equal 42, \"42\"\nu.equal true, 'true'\nu.equal false, 'false'\nu.equal (() => 42), '[Function]'\n\nfunc2 = (x) =>\n\treturn\nu.equal func2, \"[Function func2]\"\n\nu.equal ['a','b'], \"\"\"\n\t- 'a'\n\t- 'b'\n\t\"\"\"\nu.equal [1,2], \"\"\"\n\t- 1\n\t- 2\n\t\"\"\"\nu.equal {a: 1, b: 2}, \"\"\"\n\ta: 1\n\tb: 2\n\t\"\"\"\nu.equal {a: 'a', b: 'b'}, \"\"\"\n\ta: 'a'\n\tb: 'b'\n\t\"\"\"\n\nu.equal [ {a:1}, 'abc'], \"\"\"\n\t-\n\t\ta: 1\n\t- 'abc'\n\t\"\"\"\n\nu.equal {a: [1,2], b: 'abc'}, \"\"\"\n\ta:\n\t\t- 1\n\t\t- 2\n\tb: 'abc'\n\t\"\"\"\n\nu.equal {a:1, b:'abc', f: func2}, \"\"\"\n\ta: 1\n\tb: 'abc'\n\tf: [Function func2]\n\t\"\"\"\n\nu.equal {\n\tkey: 'wood'\n\tvalue: [\n\t\t\"a word\"\n\t\t{a:1, b:2}\n\t\tundef,\n\t\t[1,2,\"mary's lamb\",\"mary's \\\"stuff\\\"\"]\n\t\t]\n\titems: [\"\\ta\", 2, \"\\t\\tb\\n\"]\n\t}, \"\"\"\n\tkey: 'wood'\n\tvalue:\n\t\t- 'a˳word'\n\t\t-\n\t\t\ta: 1\n\t\t\tb: 2\n\t\t- undef\n\t\t-\n\t\t\t- 1\n\t\t\t- 2\n\t\t\t- \"mary\\'s˳lamb\"\n\t\t\t- «mary\\'s˳\"stuff\"»\n\titems:\n\t\t- '→a'\n\t\t- 2\n\t\t- '→→b▼'\n\t\"\"\""
  ]
}