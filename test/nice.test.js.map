{
  "version": 3,
  "file": "nice.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\nice.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# nice.test.coffee\r\n\r\nimport {undef} from '@jdeighan/base-utils'\r\nimport {utest, u} from '@jdeighan/base-utils/utest'\r\nimport {formatString, toNICE} from '@jdeighan/base-utils/nice'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n# --- whitespace is always made explicit\r\n\r\nutest.equal formatString(\"a word\"), \"'a˳word'\"\r\nutest.equal formatString(\"\\t\\tword\"), \"'→→word'\"\r\nutest.equal formatString(\"first\\nsecond\"), \"'first®second'\"\r\n\r\n# --- strings are surrounded by quote marks that\r\n#     don't clash with internal characters\r\n\r\nutest.equal formatString(\"abc\"), \"'abc'\"\r\nutest.equal formatString(\"mary's lamb\"), '\"mary\\'s˳lamb\"'\r\nutest.equal formatString(\"mary's \\\"stuff\\\"\"), '«mary\\'s˳\"stuff\"»'\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- repeat formatString() tests using toNICE()\r\n\r\n# --- transform value using toNICE() automatically\r\nu.transformValue = (str) => return toNICE(str)\r\n\r\nu.equal \"a word\", \"'a˳word'\"\r\nu.equal \"\\t\\tword\", \"'→→word'\"\r\nu.equal \"first\\nsecond\", \"'first®second'\"\r\nu.equal \"abc\", \"'abc'\"\r\nu.equal \"mary's lamb\", '\"mary\\'s˳lamb\"'\r\nu.equal \"mary's \\\"stuff\\\"\", '«mary\\'s˳\"stuff\"»'\r\n\r\nu.equal undef, \"undef\"\r\nu.equal null, \"null\"\r\nu.equal NaN, 'NaN'\r\nu.equal 42, \"42\"\r\nu.equal true, 'true'\r\nu.equal false, 'false'\r\nu.equal (() => 42), '[Function]'\r\n\r\nfunc2 = (x) =>\r\n\treturn\r\nu.equal func2, \"[Function func2]\"\r\n\r\nu.equal ['a','b'], \"\"\"\r\n\t- 'a'\r\n\t- 'b'\r\n\t\"\"\"\r\nu.equal [1,2], \"\"\"\r\n\t- 1\r\n\t- 2\r\n\t\"\"\"\r\nu.equal {a: 1, b: 2}, \"\"\"\r\n\ta: 1\r\n\tb: 2\r\n\t\"\"\"\r\nu.equal {a: 'a', b: 'b'}, \"\"\"\r\n\ta: 'a'\r\n\tb: 'b'\r\n\t\"\"\"\r\n\r\nu.equal [ {a:1}, 'abc'], \"\"\"\r\n\t-\r\n\t\ta: 1\r\n\t- 'abc'\r\n\t\"\"\"\r\n\r\nu.equal {a: [1,2], b: 'abc'}, \"\"\"\r\n\ta:\r\n\t\t- 1\r\n\t\t- 2\r\n\tb: 'abc'\r\n\t\"\"\"\r\n\r\nu.equal {\r\n\tkey: 'wood'\r\n\tvalue: [\r\n\t\t\"a word\"\r\n\t\t{a:1, b:2}\r\n\t\tundef,\r\n\t\t[1,2,\"mary's lamb\",\"mary's \\\"stuff\\\"\"]\r\n\t\t]\r\n\titems: [\"\\ta\", 2, \"\\t\\tb\\n\"]\r\n\t}, \"\"\"\r\n\tkey: 'wood'\r\n\tvalue:\r\n\t\t- 'a˳word'\r\n\t\t-\r\n\t\t\ta: 1\r\n\t\t\tb: 2\r\n\t\t- undef\r\n\t\t-\r\n\t\t\t- 1\r\n\t\t\t- 2\r\n\t\t\t- \"mary\\'s˳lamb\"\r\n\t\t\t- «mary\\'s˳\"stuff\"»\r\n\titems:\r\n\t\t- '→a'\r\n\t\t- 2\r\n\t\t- '→→b®'\r\n\t\"\"\"\r\n"
  ]
}