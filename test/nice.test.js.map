{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "<anonymous>"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# nice.test.coffee\n\nimport {undef} from '@jdeighan/base-utils'\nimport {\n\tUnitTester,\n\tequal, like, notequal, truthy, falsy, throws, succeeds,\n\t} from '@jdeighan/base-utils/utest'\nimport * as lib from '@jdeighan/base-utils/nice'\nObject.assign(global, lib)\n\n# ---------------------------------------------------------------------------\n\n# --- whitespace is always made explicit\n\nequal formatString(\"a word\"), \"'a˳word'\"\nequal formatString(\"\\t\\tword\"), \"'→→word'\"\nequal formatString(\"first\\nsecond\"), \"'first▼second'\"\nequal formatString(\"first\\r\\nsecond\\r\\n\"), \"'first◄▼second◄▼'\"\n\n# --- strings are surrounded by quote marks that\n#     don't clash with internal characters\n\nequal formatString(\"abc\"), \"'abc'\"\nequal formatString(\"mary's lamb\"), '\"mary\\'s˳lamb\"'\nequal formatString(\"mary's \\\"stuff\\\"\"), '«mary\\'s˳\"stuff\"»'\n\n# ---------------------------------------------------------------------------\n# --- repeat formatString() tests using toNICE()\n\n(() =>\n\t# --- transform value using toNICE() automatically\n\tu = new UnitTester()\n\tu.transformValue = (str) => return toNICE(str)\n\n\tu.equal \"a word\", \"'a˳word'\"\n\tu.equal \"\\t\\tword\", \"'→→word'\"\n\tu.equal \"first\\nsecond\", \"'first▼second'\"\n\tu.equal \"abc\", \"'abc'\"\n\tu.equal \"mary's lamb\", '\"mary\\'s˳lamb\"'\n\tu.equal \"mary's \\\"stuff\\\"\", '«mary\\'s˳\"stuff\"»'\n\n\tu.equal undef, \"undef\"\n\tu.equal null, \"null\"\n\tu.equal NaN, 'NaN'\n\tu.equal 42, \"42\"\n\tu.equal true, 'true'\n\tu.equal false, 'false'\n\tu.equal (() => 42), '[Function]'\n\n\tfunc2 = (x) =>\n\t\treturn\n\tu.equal func2, \"[Function func2]\"\n\n\tu.equal ['a','b'], \"\"\"\n\t\t- 'a'\n\t\t- 'b'\n\t\t\"\"\"\n\tu.equal [1,2], \"\"\"\n\t\t- 1\n\t\t- 2\n\t\t\"\"\"\n\tu.equal {a: 1, b: 2}, \"\"\"\n\t\ta: 1\n\t\tb: 2\n\t\t\"\"\"\n\tu.equal {a: 'a', b: 'b'}, \"\"\"\n\t\ta: 'a'\n\t\tb: 'b'\n\t\t\"\"\"\n\n\tu.equal [ {a:1}, 'abc'], \"\"\"\n\t\t-\n\t\t\ta: 1\n\t\t- 'abc'\n\t\t\"\"\"\n\n\tu.equal {a: [1,2], b: 'abc'}, \"\"\"\n\t\ta:\n\t\t\t- 1\n\t\t\t- 2\n\t\tb: 'abc'\n\t\t\"\"\"\n\n\tu.equal {a:1, b:'abc', f: func2}, \"\"\"\n\t\ta: 1\n\t\tb: 'abc'\n\t\tf: [Function func2]\n\t\t\"\"\"\n\n\tu.equal {\n\t\tkey: 'wood'\n\t\tvalue: [\n\t\t\t\"a word\"\n\t\t\t{a:1, b:2}\n\t\t\tundef,\n\t\t\t[1,2,\"mary's lamb\",\"mary's \\\"stuff\\\"\"]\n\t\t\t]\n\t\titems: [\"\\ta\", 2, \"\\t\\tb\\n\"]\n\t\t}, \"\"\"\n\t\tkey: 'wood'\n\t\tvalue:\n\t\t\t- 'a˳word'\n\t\t\t-\n\t\t\t\ta: 1\n\t\t\t\tb: 2\n\t\t\t- undef\n\t\t\t-\n\t\t\t\t- 1\n\t\t\t\t- 2\n\t\t\t\t- \"mary\\'s˳lamb\"\n\t\t\t\t- «mary\\'s˳\"stuff\"»\n\t\titems:\n\t\t\t- '→a'\n\t\t\t- 2\n\t\t\t- '→→b▼'\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test fromNICE()\n\n(() =>\n\t# --- transform value using fromNICE() automatically\n\tu = new UnitTester()\n\tu.transformValue = (str) => return fromNICE(str)\n\n\tu.equal \"\"\"\n\t\tfileName: primitive-value\n\t\ttype: coffee\n\t\tauthor: John Deighan\n\t\tinclude: pll-parser\n\t\t\"\"\", {\n\t\tfileName: 'primitive-value'\n\t\ttype: 'coffee'\n\t\tauthor: 'John Deighan'\n\t\tinclude: 'pll-parser'\n\t\t}\n\t)()"
  ]
}