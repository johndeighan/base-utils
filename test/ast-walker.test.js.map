{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "test/ast-walker.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# ast-walker.test.coffee\n\nimport {\n\tdefined, nonEmpty, toBlock, OL, words, keys, hasKey,\n\t} from '@jdeighan/base-utils'\nimport {\n\tLOG, LOGVALUE, clearMyLogs, getMyLogs,\n\t} from '@jdeighan/base-utils/log'\nimport {\n\tsetDebugging, getDebugLog,\n\t} from '@jdeighan/base-utils/debug'\nimport * as ulib from '@jdeighan/base-utils/utest'\nObject.assign(global, ulib)\nimport {mkpath, slurp} from '@jdeighan/base-utils/fs'\nimport {indented} from '@jdeighan/base-utils/indent'\n\nimport {ASTWalker} from '@jdeighan/base-utils/ast-walker'\n\nlKeys = words('lImported lExported lUsed lMissing lNotNeeded')\n\nu.transformValue = (coffeeCode) ->\n\twalker = new ASTWalker(coffeeCode)\n\treturn walker.walk()\n\nu.transformExpected = (h) ->\n\t# --- All unspecified keys should be empty arrays\n\tfor key in lKeys\n\t\tif ! hasKey(h, key)\n\t\t\th[key] = []\n\treturn h\n\n# ---------------------------------------------------------------------------\n# Test keeping track of imported symbols\n\nequal \"\"\"\n\tLOG someSymbol\n\t\"\"\",\n\t{\n\t\tlUsed: words('LOG someSymbol')\n\t\tlMissing: words('LOG someSymbol')\n\t\t}\n\nequal \"\"\"\n\timport {toArray, toBlock} from '@jdeighan/coffee-utils'\n\timport {LOG} from '@jdeighan/coffee-utils/log'\n\tLOG someSymbol\n\t\"\"\",\n\t{\n\t\tlImported: words('LOG toArray toBlock')\n\t\tlUsed: words('LOG someSymbol')\n\t\tlNotNeeded: words('toArray toBlock')\n\t\tlMissing: ['someSymbol']\n\t\t}\n\nequal \"\"\"\n\timport {toArray, toBlock} from '@jdeighan/coffee-utils'\n\timport {arrayToBlock} from '@jdeighan/coffee-utils/block'\n\texport {toArray, arrayToBlock}\n\t\"\"\",\n\t{\n\t\tlImported: words('arrayToBlock toArray toBlock')\n\t\tlExported: words('arrayToBlock toArray')\n\t\tlNotNeeded: ['toBlock']\n\t\t}\n\nequal \"\"\"\n\timport {toArray, toBlock} from '@jdeighan/coffee-utils'\n\timport {arrayToBlock} from '@jdeighan/coffee-utils/block'\n\texport class ASTWalker\n\t\tconstructor: (from) ->\n\t\t\tdebug \"enter ASTWalker()\"\n\t\"\"\",\n\t{\n\t\tlImported: words('arrayToBlock toArray toBlock')\n\t\tlExported: words('ASTWalker')\n\t\tlUsed: ['debug']\n\t\tlMissing: words('debug')\n\t\tlNotNeeded: words('arrayToBlock toArray toBlock')\n\t\t}\n\nequal \"\"\"\n\texport toBlock = (lItems) ->\n\t\treturn lItems.join(\"\\n\")\n\t\"\"\",\n\t{\n\t\tlExported: ['toBlock']\n\t\tlUsed: ['lItems']\n\t\t}\n\nequal \"\"\"\n\texport meaning = 42\n\t\"\"\",\n\t{\n\t\tlExported: ['meaning']\n\t\t}\n\nequal \"\"\"\n\timport {undef} from '@jdeighan/coffee-utils'\n\tx = undef\n\t\"\"\",\n\t{\n\t\tlImported: ['undef']\n\t\tlUsed: ['undef']\n\t\t}\n\nequal \"\"\"\n\timport {undef} from '@jdeighan/coffee-utils'\n\tx = undef\n\ty = x\n\t\"\"\",\n\t{\n\t\tlImported: ['undef']\n\t\tlUsed: ['undef','x']\n\t\t}\n\nequal \"\"\"\n\tx = undef\n\t\"\"\",\n\t{\n\t\tlUsed: ['undef']\n\t\tlMissing: ['undef']\n\t\t}\n\nequal \"\"\"\n\tfunc = () ->\n\t\treturn undef\n\tx = func()\n\t\"\"\",\n\t{\n\t\tlUsed: ['func','undef']\n\t\tlMissing: ['undef']\n\t\t}\n\nequal \"\"\"\n\tx = toArray(\"abc\")\n\t\"\"\",\n\t{\n\t\tlUsed: ['toArray']\n\t\tlMissing: ['toArray']\n\t\t}\n\nequal \"\"\"\n\timport {undef, toArray} from '@jdeighan/coffee-utils'\n\tx = toArray(\"abc\")\n\t\"\"\",\n\t{\n\t\tlUsed: ['toArray']\n\t\tlImported: words('toArray undef')\n\t\tlNotNeeded: ['undef']\n\t\t}\n\nequal \"\"\"\n\timport {undef, toArray} from '@jdeighan/coffee-utils'\n\tx = str + toArray(\"abc\")\n\t\"\"\",\n\t{\n\t\tlImported: words('toArray undef')\n\t\tlMissing: ['str']\n\t\tlNotNeeded: ['undef']\n\t\tlUsed: words('str toArray')\n\t\t}\n\nequal \"\"\"\n\tfunc = (x,y) ->\n\t\tz = x+y\n\t\treturn z\n\tw = func(1,2)\n\t\"\"\",\n\t{\n\t\tlUsed: words('func x y z')\n\t\t}\n\nequal \"\"\"\n\tfunc = (x,y) ->\n\t\tz = sum(x+y)\n\t\treturn z\n\t\"\"\", {\n\t\tlUsed: words('sum x y z')\n\t\tlMissing: ['sum']\n\t\t}\n\nequal \"\"\"\n\tfunc = (x,y) ->\n\t\tz = sum(x+y)\n\t\treturn z\n\t\"\"\",\n\t{\n\t\tlMissing: ['sum']\n\t\tlUsed: words('sum x y z')\n\t\t}\n\nequal \"\"\"\n\texport isHashComment = (line) =>\n\t\treturn defined(line)\n\t\"\"\",\n\t{\n\t\tlExported: ['isHashComment']\n\t\tlMissing: ['defined']\n\t\tlUsed: words('defined line')\n\t\t}\n\nequal \"\"\"\n\texport isHashComment = (line) ->\n\t\treturn defined(line)\n\t\"\"\",\n\t{\n\t\tlExported: ['isHashComment']\n\t\tlMissing: ['defined']\n\t\tlUsed: words('defined line')\n\t\t}\n\nequal \"\"\"\n\texport isSubclassOf = (subClass, superClass) ->\n\n\t\treturn (subClass == superClass) \\\n\t\t\t|| (subClass.prototype instanceof superClass)\n\t\"\"\",\n\t{\n\t\tlExported: ['isSubclassOf']\n\t\tlUsed: words('subClass superClass')\n\t\t}\n\nequal \"\"\"\n\texport patchStr = (bigstr, pos, str) ->\n\n\t\tendpos = pos + str.length\n\t\tif (endpos < bigstr.length)\n\t\t\treturn bigstr.substring(0, pos) + str + bigstr.substring(endpos)\n\t\telse\n\t\t\treturn bigstr.substring(0, pos) + str\n\t\"\"\",\n\t{\n\t\tlExported: ['patchStr']\n\t\tlUsed: words('bigstr endpos pos str')\n\t\t}\n\nequal \"\"\"\n\tdelete h[key]\n\t\"\"\",\n\t{\n\t\tlMissing: words('h key')\n\t\tlUsed: words('h key')\n\t\t}\n\nequal \"\"\"\n\texport removeKeys = (h, lKeys) =>\n\n\t\tfor key in lKeys\n\t\t\tdelete h[key]\n\t\tfor own key,value of h\n\t\t\tif defined(value)\n\t\t\t\tif isArray(value)\n\t\t\t\t\tfor item in value\n\t\t\t\t\t\tif isHash(item)\n\t\t\t\t\t\t\tremoveKeys(item, lKeys)\n\t\t\t\telse if (typeof value == 'object')\n\t\t\t\t\tremoveKeys value, lKeys\n\t\treturn\n\t\"\"\",\n\t{\n\t\tlExported: ['removeKeys']\n\t\tlMissing: words('defined isArray isHash')\n\t\tlUsed: words('defined h isArray isHash item key lKeys removeKeys value')\n\t\t}"
  ]
}