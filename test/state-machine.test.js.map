{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "<anonymous>"
  ],
  "names": [],
  "mappings": "AAA2B;AAE3B,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,IAD7B;EACmC,SADnC;CAAA,MAAA;;AAGA,OAAA;EAAQ,wBAAR;CAAA,MAAA;;AACA,OAAA;EACC,UADD;EAEC,KAFD;EAEQ,IAFR;EAEc,QAFd;EAEwB,MAFxB;EAEgC,KAFhC;EAEuC,KAFvC;EAE8C,QAF9C;CAAA,MAAA;;AAIA,OAAO,CAAA,OAAP,MAAA;;AACA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,GAAtB;;AAEA,wBAAA,CAAA,EAb2B;;;AAiB3B,CAAC,QAAA,CAAA,CAAA;AACD,MAAA;EAAC,IAAA,GAAO,IAAI,YAAJ,CAAiB,MAAjB,EAAyB;IAAC,IAAA,EAAM,IAAP;IAAa,GAAA,EAAK;EAAlB,CAAzB;EAEP,MAAA,CAAO,IAAI,CAAC,OAAL,CAAa,MAAb,CAAP;EACA,KAAA,CAAO,IAAI,CAAC,OAAL,CAAa,KAAb,CAAP;EACA,KAAA,CAAO,IAAI,CAAC,KAAZ,EAAmB,MAAnB;EACA,QAAA,CAAS,CAAA,CAAA,GAAA;WAAM,IAAI,CAAC,WAAL,CAAiB,MAAjB,EAAwB,KAAxB;EAAN,CAAT;EACA,KAAA,CAAM,CAAA,CAAA,GAAA;WAAM,IAAI,CAAC,WAAL,CAAiB,KAAjB,EAAuB,KAAvB;EAAN,CAAN;EACA,QAAA,CAAS,CAAA,CAAA,GAAA;WAAM,IAAI,CAAC,aAAL,CAAmB,MAAnB,EAA0B,KAA1B;EAAN,CAAT;EACA,KAAA,CAAM,CAAA,CAAA,GAAA;WAAM,IAAI,CAAC,aAAL,CAAmB,MAAnB,EAA0B,KAA1B,EAAgC,QAAhC;EAAN,CAAN;EACA,KAAA,CAAM,IAAI,CAAC,MAAL,CAAY,MAAZ,CAAN,EAA2B,IAA3B;SACA,KAAA,CAAM,IAAI,CAAC,MAAL,CAAY,KAAZ,CAAN,EAA0B,UAA1B;AAXA,CAAD,CAAA,CAAA,EAjB2B;;;;;;AAoC3B,CAAC,QAAA,CAAA,CAAA;AACD,MAAA,kBAAA,EAAA,KAAA,EAAA,KAAA,EAAA;EAAO,qBAAN,MAAA,mBAAA,QAAiC,aAAjC;IAEC,WAAa,CAAA,CAAA;WACZ,CAAM,MAAN;IADY;;IAGb,QAAU,CAAA,CAAA;aACT,KAAA,CAAM,2CAAN;IADS;;IAGV,KAAO,CAAA,CAAA;MACN,IAAC,CAAA,WAAD,CAAa,MAAb;kBACM,CAAA,QAAN,CAAe,QAAf;IAFM;;IAIP,MAAQ,CAAA,CAAA;MACP,IAAC,CAAA,WAAD,CAAa,QAAb;kBACM,CAAA,QAAN,CAAe,OAAf;IAFO;;EAZT;EAgBA,KAAA,GAAQ,IAAI,kBAAJ,CAAA;EAER,KAAA,GAAQ,IAAI,kBAAJ,CAAA;EACR,KAAK,CAAC,KAAN,CAAA;EAEA,KAAA,GAAQ,IAAI,kBAAJ,CAAA;EACR,KAAK,CAAC,KAAN,CAAA;EACA,KAAK,CAAC,MAAN,CAAA;EAEA,MAAA,CAAO,KAAK,CAAC,OAAN,CAAc,MAAd,CAAP;EACA,MAAA,CAAO,KAAK,CAAC,OAAN,CAAc,QAAd,CAAP;EACA,MAAA,CAAO,KAAK,CAAC,OAAN,CAAc,OAAd,CAAP;EAEA,KAAA,CAAM,CAAA,CAAA,GAAA;WAAM,KAAK,CAAC,MAAN,CAAA;EAAN,CAAN;EACA,QAAA,CAAS,CAAA,CAAA,GAAA;WAAM,KAAK,CAAC,KAAN,CAAA;EAAN,CAAT;SACA,KAAA,CAAM,CAAA,CAAA,GAAA;WAAM,KAAK,CAAC,QAAN,CAAe,YAAf;EAAN,CAAN;AAhCA,CAAD,CAAA,CAAA",
  "sourcesContent": [
    "# state-machine.test.coffee\n\nimport {\n\tundef, defined, notdefined, pass, escapeStr,\n\t} from '@jdeighan/base-utils'\nimport {suppressExceptionLogging} from '@jdeighan/base-utils/exceptions'\nimport {\n\tUnitTester,\n\tequal, like, notequal, truthy, falsy, fails, succeeds,\n\t} from '@jdeighan/base-utils/utest'\nimport * as lib from '@jdeighan/base-utils/state-machine'\nObject.assign(global, lib)\n\nsuppressExceptionLogging()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tmach = new StateMachine('init', {flag: true, str: 'a string'})\n\n\ttruthy mach.inState('init')\n\tfalsy  mach.inState('not')\n\tequal  mach.state, 'init'\n\tsucceeds () => mach.expectState('init','not')\n\tfails () => mach.expectState('xxx','not')\n\tsucceeds () => mach.expectDefined('flag','str')\n\tfails () => mach.expectDefined('flag','str','notdef')\n\tequal mach.getVar('flag'), true\n\tequal mach.getVar('str'), 'a string'\n\t)()\n\n# ---------------------------------------------------------------------------\n# A very simple machine with states and transitions:\n#\n#    init --FIRST--> middle --SECOND--> final\n\n(() ->\n\tclass SimpleStateMachine extends StateMachine\n\n\t\tconstructor: () ->\n\t\t\tsuper 'init'\n\n\t\tsetState: () ->\n\t\t\tcroak \"Don't call this class's setState() method\"\n\n\t\tFIRST: () ->\n\t\t\t@expectState 'init'\n\t\t\tsuper.setState 'middle'\n\n\t\tSECOND: () ->\n\t\t\t@expectState 'middle'\n\t\t\tsuper.setState 'final'\n\n\tmach1 = new SimpleStateMachine()\n\n\tmach2 = new SimpleStateMachine()\n\tmach2.FIRST()\n\n\tmach3 = new SimpleStateMachine()\n\tmach3.FIRST()\n\tmach3.SECOND()\n\n\ttruthy mach1.inState('init')\n\ttruthy mach2.inState('middle')\n\ttruthy mach3.inState('final')\n\n\tfails () => mach1.SECOND()\n\tsucceeds () => mach1.FIRST()\n\tfails () => mach1.setState('some state')\n\t)()"
  ]
}