{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "test/state-machine.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# state-machine.test.coffee\n\nimport {\n\tundef, defined, notdefined, pass, escapeStr, OL, isArray,\n\t} from '@jdeighan/base-utils'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {LOG, LOGVALUE} from '@jdeighan/base-utils/log'\nimport * as lib from '@jdeighan/base-utils/utest'\nObject.assign(global, lib)\nimport * as lib2 from '@jdeighan/base-utils/state-machine'\nObject.assign(global, lib2)\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tmach = new StateMachine()\n\n\ttruthy mach.inState('start')\n\tequal  mach.state, 'start'\n\tfalsy  mach.inState('not')\n\tsucceeds () => mach.expectState('start','not')\n\tfails () => mach.expectState('xxx','not')\n\tfalsy mach.allDefined('flag','str')\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tmach = new StateMachine('init', {flag: true, str: 'a string'})\n\n\ttruthy mach.inState('init')\n\tfalsy  mach.inState('not')\n\tequal  mach.state, 'init'\n\tsucceeds () => mach.expectState('init','not')\n\tfails () => mach.expectState('xxx','not')\n\ttruthy mach.allDefined('flag','str')\n\tfalsy mach.allDefined('flag','str','notdef')\n\tequal mach.getVar('flag'), true\n\tequal mach.getVar('str'), 'a string'\n\t)()\n\n# ---------------------------------------------------------------------------\n# A very simple machine with states and transitions:\n#\n#    init --FIRST--> middle --SECOND--> final\n\n(() ->\n\tclass SimpleStateMachine extends StateMachine\n\n\t\tconstructor: () ->\n\t\t\tsuper 'init'\n\n\t\tsetState: () ->\n\t\t\tcroak \"Don't call this class's setState() method\"\n\n\t\tFIRST: () ->\n\t\t\t@expectState 'init'\n\t\t\t@state = 'middle'\n\n\t\tSECOND: () ->\n\t\t\t@expectState 'middle'\n\t\t\t@state = 'final'\n\n\tmach1 = new SimpleStateMachine()\n\n\tmach2 = new SimpleStateMachine()\n\tmach2.FIRST()\n\n\tmach3 = new SimpleStateMachine()\n\tmach3.FIRST()\n\tmach3.SECOND()\n\n\ttruthy mach1.inState('init')\n\ttruthy mach2.inState('middle')\n\ttruthy mach3.inState('final')\n\n\tfails () => mach1.SECOND()\n\tsucceeds () => mach1.FIRST()\n\tfails () => mach1.setState('some state')\n\t)()\n\n# ---------------------------------------------------------------------------\n# A more comples machine that simulates parsing CoffeeScript\n\n(() ->\n\tclass CoffeeStateMachine extends StateMachine\n\n\t\tconstructor: () ->\n\t\t\tsuper()\n\t\t\t@setVar 'lLines', []\n\n\t\tSTART_IMPORT: () ->\n\t\t\t@expectState 'start'\n\t\t\t@setState 'importing', {lIdents: []}\n\t\t\treturn this\n\n\t\tIDENT: (name) ->\n\t\t\t@expectState 'importing'\n\t\t\t@appendVar 'lIdents', name\n\t\t\treturn this\n\n\t\tEND_IMPORT: (source) ->\n\t\t\t@expectState 'importing'\n\t\t\tlIdents = @getVar 'lIdents'\n\t\t\tassert isArray(lIdents), \"Not an array: #{OL(lIdents)}\"\n\t\t\tidentStr = lIdents.join(',')\n\t\t\t@appendVar 'lLines', \"import {#{identStr}} from '#{source}';\"\n\t\t\t@setState 'start', {lIdents: undef}\n\t\t\treturn this\n\n\t\tASSIGN: (name, num) ->\n\t\t\t@expectState 'start'\n\t\t\t@appendVar 'lLines', \"#{name} = #{num};\"\n\n\t\tgetCode: () ->\n\t\t\treturn @getVar('lLines').join(\"\\n\")\n\n\tmach = new CoffeeStateMachine()\n\tmach.START_IMPORT()\n\tmach.IDENT('x')\n\tmach.IDENT('y')\n\tmach.END_IMPORT('@jdeighan/base-utils')\n\tmach.ASSIGN('x', 42)\n\tmach.ASSIGN('y', 13)\n\n\ttruthy mach.inState('start')\n\tequal mach.getCode(), \"\"\"\n\t\timport {x,y} from '@jdeighan/base-utils';\n\t\tx = 42;\n\t\ty = 13;\n\t\t\"\"\"\n\t)()"
  ]
}