{
  "version": 3,
  "file": "state-machine.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\state-machine.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# state-machine.test.coffee\n\nimport {\n\tundef, defined, notdefined, pass, escapeStr,\n\t} from '@jdeighan/base-utils'\nimport {suppressExceptionLogging} from '@jdeighan/base-utils/exceptions'\nimport {utest} from '@jdeighan/base-utils/utest'\nimport {StateMachine} from '@jdeighan/base-utils/state-machine'\n\nsuppressExceptionLogging()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tmach = new StateMachine('init', {flag: true, str: 'a string'})\n\n\tutest.truthy 17, mach.inState('init')\n\tutest.falsy  18, mach.inState('not')\n\tutest.equal  19, mach.state, 'init'\n\tutest.succeeds 20, () => mach.expectState('init','not')\n\tutest.fails 21, () => mach.expectState('xxx','not')\n\tutest.succeeds 22, () => mach.expectDefined('flag','str')\n\tutest.fails 23, () => mach.expectDefined('flag','str','notdef')\n\tutest.equal 24, mach.getVar('flag'), true\n\tutest.equal 25, mach.getVar('str'), 'a string'\n\t)()\n\n# ---------------------------------------------------------------------------\n# A very simple machine with states and transitions:\n#\n#    init --FIRST--> middle --SECOND--> final\n\n(() ->\n\tclass SimpleStateMachine extends StateMachine\n\n\t\tconstructor: () ->\n\t\t\tsuper 'init'\n\n\t\tsetState: () ->\n\t\t\tcroak \"Don't call this class's setState() method\"\n\n\t\tFIRST: () ->\n\t\t\t@expectState 'init'\n\t\t\tsuper.setState 'middle'\n\n\t\tSECOND: () ->\n\t\t\t@expectState 'middle'\n\t\t\tsuper.setState 'final'\n\n\tmach1 = new SimpleStateMachine()\n\n\tmach2 = new SimpleStateMachine()\n\tmach2.FIRST()\n\n\tmach3 = new SimpleStateMachine()\n\tmach3.FIRST()\n\tmach3.SECOND()\n\n\tutest.truthy 56, mach1.inState('init')\n\tutest.truthy 57, mach2.inState('middle')\n\tutest.truthy 58, mach3.inState('final')\n\n\tutest.fails 60, () => mach1.SECOND()\n\tutest.succeeds 61, () => mach1.FIRST()\n\tutest.fails 65, () => mach1.setState('some state')\n\t)()\n"
  ]
}