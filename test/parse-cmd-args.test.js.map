{
  "version": 3,
  "file": "parse-cmd-args.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\parse-cmd-args.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# parse-cmd-args.test.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, LOG,\r\n\t} from '@jdeighan/base-utils'\r\nimport {setDebugging} from '@jdeighan/base-utils/debug'\r\nimport {\r\n\tparseCmdArgs,\r\n\t} from '@jdeighan/base-utils/parse-cmd-args'\r\nimport {UnitTester} from '@jdeighan/base-utils/utest'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() =>\r\n\tu = new UnitTester()\r\n\tu.transformValue = (argStr) =>\r\n\t\treturn parseCmdArgs({argStr})\r\n\r\n\tu.equal '-ab why', {\r\n\t\ta: true\r\n\t\tb: true\r\n\t\t_: ['why']\r\n\t\t}\r\n\r\n\tu.equal '-ab=\"a string\" why not', {\r\n\t\tab: \"a string\"\r\n\t\t_: ['why','not']\r\n\t\t}\r\n\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- test invalid 'hExpect' option\r\n\r\n(() =>\r\n\tu = new UnitTester()\r\n\r\n\tu.throws () => parseCmdArgs({\r\n\t\thExpect: {\r\n\t\t\tx: 'badtype'\r\n\t\t\t}\r\n\t\t})\r\n\r\n\tu.throws () => parseCmdArgs({\r\n\t\thExpect: {\r\n\t\t\t_: 'non-array'\r\n\t\t\t}\r\n\t\t})\r\n\r\n\tu.throws () => parseCmdArgs({\r\n\t\thExpect: {\r\n\t\t\t_: [3]    # --- should have length 2\r\n\t\t\t}\r\n\t\t})\r\n\r\n\tu.succeeds () => parseCmdArgs({\r\n\t\thExpect: {\r\n\t\t\t_: [undef, undef]    # --- OK\r\n\t\t\t}\r\n\t\t})\r\n\r\n\tu.throws () => parseCmdArgs({\r\n\t\thExpect: {\r\n\t\t\t_: ['a', undef]    # --- non-integer\r\n\t\t\t}\r\n\t\t})\r\n\r\n\tu.succeeds () => parseCmdArgs({\r\n\t\thExpect: {\r\n\t\t\t_: [0, 3]    # --- OK\r\n\t\t\t}\r\n\t\t})\r\n\r\n\tu.throws () => parseCmdArgs({\r\n\t\thExpect: {\r\n\t\t\t_: [3, 2]    # --- min > max\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- test option 'hExpect'\r\n\r\n(() =>\r\n\thExpect = {\r\n\t\tf: 'boolean'\r\n\t\tvv: 'boolean'\r\n\t\tv: 'boolean'\r\n\t\tname: 'string'\r\n\t\ti: 'integer'\r\n\t\tn: 'number'\r\n\t\t_: [1, 3]\r\n\t\t}\r\n\r\n\tu = new UnitTester()\r\n\tu.transformValue = (argStr) =>\r\n\t\treturn parseCmdArgs({\r\n\t\t\targStr\r\n\t\t\thExpect\r\n\t\t\t})\r\n\r\n\tu.equal '-fv why', {\r\n\t\tf: true\r\n\t\tv: true\r\n\t\t_: ['why']\r\n\t\t}\r\n\r\n\tu.equal '-name=\"a string\" nonoption', {\r\n\t\tname: \"a string\"\r\n\t\t_: ['nonoption']\r\n\t\t}\r\n\r\n\tu.equal '-f nonoption', {\r\n\t\tf: true\r\n\t\t_: ['nonoption']\r\n\t\t}\r\n\r\n\tu.equal '-f=false nonoption', {\r\n\t\tf: false\r\n\t\t_: ['nonoption']\r\n\t\t}\r\n\r\n\tu.equal '-f=\"false\" nonoption', {\r\n\t\tf: false\r\n\t\t_: ['nonoption']\r\n\t\t}\r\n\r\n\t# --- -vv is taken as 2 flags, flag 'v' is not expected\r\n\tu.throws () => parseCmdArgs({\r\n\t\targStr: '-vv nonoption'\r\n\t\thExpect\r\n\t\t})\r\n\r\n\tu.equal '-vv=false nonoption', {\r\n\t\tvv: false\r\n\t\t_: ['nonoption']\r\n\t\t}\r\n\r\n\tu.equal '-vv=\"false\" nonoption', {\r\n\t\tvv: false\r\n\t\t_: ['nonoption']\r\n\t\t}\r\n\r\n\t# --- -name must be given a value\r\n\tu.throws () => parseCmdArgs({\r\n\t\targStr: '-name nonoption'\r\n\t\thExpect\r\n\t\t})\r\n\r\n\t# --- but value can be empty\r\n\tu.equal '-name=\"\" nonoption', {\r\n\t\tname: ''\r\n\t\t_: ['nonoption']\r\n\t\t}\r\n\r\n\tu.equal '-name=frog nonoption', {\r\n\t\tname: 'frog'\r\n\t\t_: ['nonoption']\r\n\t\t}\r\n\r\n\t# --- there must be at least one non-option\r\n\tu.throws () => parseCmdArgs({\r\n\t\targStr: '-f'\r\n\t\thExpect\r\n\t\t})\r\n\r\n\t# --- there can't be more than 3 non-options\r\n\tu.throws () => parseCmdArgs({\r\n\t\targStr: 'a b c d'\r\n\t\thExpect\r\n\t\t})\r\n\r\n\t# --- set all options\r\n\tu.equal '-f -vv=false -name=John -i=3 -n=3.5 opt1 opt2 opt3', {\r\n\t\tf: true\r\n\t\tvv: false\r\n\t\tname: 'John'\r\n\t\ti: 3\r\n\t\tn: 3.5\r\n\t\t_: ['opt1','opt2','opt3']\r\n\t\t}\r\n\r\n\t# --- test numeric options\r\n\tu.throws () => parseCmdArgs({\r\n\t\targStr: 'slip -i=abc'\r\n\t\thExpect\r\n\t\t})\r\n\r\n\t# --- test numeric options\r\n\tu.throws () => parseCmdArgs({\r\n\t\targStr: 'slip -i=3.5'\r\n\t\thExpect\r\n\t\t})\r\n\r\n\t# --- test numeric options\r\n\tu.throws () => parseCmdArgs({\r\n\t\targStr: 'slip -n=abc'\r\n\t\thExpect\r\n\t\t})\r\n\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- test quoted non-options:\r\n\r\n(() =>\r\n\r\n\thResult = parseCmdArgs({\r\n\t\targStr: ' -m \"coffee -c $file\" '\r\n\t\thExpect: {\r\n\t\t\t_: [1,1]      # the command to run\r\n\t\t\tm: 'boolean'\r\n\t\t\tdir: 'string'\r\n\t\t\tpattern: 'string'\r\n\t\t\t}\r\n\t\t})\r\n\r\n\tu = new UnitTester()\r\n\tu.equal hResult, {\r\n\t\t_: [\"coffee -c $file\"]\r\n\t\tm: true\r\n\t\t}\r\n\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- test JSON array:\r\n\r\n(() =>\r\n\r\n\thResult = parseCmdArgs({\r\n\t\targStr: ' -m -option=\\'[\"a\",\"b\"]\\' '\r\n\t\thExpect: {\r\n\t\t\t_: [0,0]      # no non-options\r\n\t\t\tm: 'boolean'\r\n\t\t\toption: 'json'\r\n\t\t\t}\r\n\t\t})\r\n\r\n\tu = new UnitTester()\r\n\tu.equal hResult, {\r\n\t\tm: true\r\n\t\toption: ['a','b']\r\n\t\t}\r\n\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- test JSON hash:\r\n\r\n(() =>\r\n\r\n\thResult = parseCmdArgs({\r\n\t\targStr: ' -option=\\'{\"a\":1, \"b\":2}\\' '\r\n\t\thExpect: {\r\n\t\t\t_: [0,0]      # no non-options\r\n\t\t\tm: 'boolean'\r\n\t\t\toption: 'json'\r\n\t\t\t}\r\n\t\t})\r\n\r\n\tu = new UnitTester()\r\n\tu.equal hResult, {\r\n\t\toption: {a:1, b:2}\r\n\t\t}\r\n\r\n\t)()\r\n"
  ]
}