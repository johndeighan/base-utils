{
  "version": 3,
  "file": "stack.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\stack.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# stack.test.coffee\n\nimport {\n\tassert, croak,\n\t} from '@jdeighan/base-utils/exceptions'\nimport {\n\tundef, defined, notdefined, words,\n\t} from '@jdeighan/base-utils'\nimport {\n\tclearAllLogs, echoLogsByDefault,\n\t} from '@jdeighan/base-utils/log'\nimport {CallStack, getStackLog} from '@jdeighan/base-utils/stack'\nimport {utest} from '@jdeighan/base-utils/utest'\n\nechoLogsByDefault false\n\n# ---------------------------------------------------------------------------\n\nTEST = (stack, curFunc, strActive, strNonActive, logging, level=undef, logLevel=undef) =>\n\tif defined(curFunc)\n\t\tutest.equal stack.curFuncName, curFunc\n\telse\n\t\tutest.equal stack.curFuncName, '_MAIN_'\n\tif defined(strActive)\n\t\tfor name in words(strActive)\n\t\t\tutest.truthy stack.isActive(name)\n\tif defined(strNonActive)\n\t\tfor name in words(strNonActive)\n\t\t\tutest.falsy stack.isActive(name)\n\tif logging\n\t\tutest.truthy stack.isLogging()\n\telse\n\t\tutest.falsy stack.isLogging()\n\tif defined(level)\n\t\tutest.equal stack.level, level\n\tif defined(logLevel)\n\t\tutest.equal stack.logLevel, logLevel\n\treturn\n\n# ---------------------------------------------------------------------------\n\nclearAllLogs()\nstack = new CallStack()\nstack.logCalls true\n\nstack.enter 'func'\n# ---           cur    active  !active  isLogging\nTEST stack, 'func', \"func\", \"func2\", false\n\nstack.returnFrom 'func'\nutest.truthy stack.isEmpty()\n\nutest.equal getStackLog(), \"\"\"\n\tENTER 'func'\n\tRETURN FROM 'func'\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\nutest.throws () ->\n\tsuppressExceptionLogging true\n\tclearAllLogs()\n\tstack = new CallStack()\n\tstack.logCalls true\n\tstack.enter 'func'\n\tstack.returnFrom 'func2'   # should throw an error\n\n# ---------------------------------------------------------------------------\n\nclearAllLogs()\nstack = new CallStack()\nstack.logCalls true\n\nstack.enter 'func', [], true\n# ---           cur    active  !active  isLogging\nTEST stack, 'func', \"func\", \"func2\", true\n\nstack.returnFrom 'func'\n# ---          cur     active  !active        isLogging\n#              -----   ------  --------       ---------\nTEST stack, undef,  undef,  'func func2',  false\nutest.truthy stack.isEmpty()\n\nutest.equal getStackLog(), \"\"\"\n\tENTER 'func'\n\tRETURN FROM 'func'\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\nclearAllLogs()\nstack = new CallStack()\nstack.logCalls true\n\nstack.enter 'func', [], true\n\n# ---          cur     active  !active    isLogging\n#              -----   ------  --------   ---------\nTEST stack, 'func', 'func',  'func2',  true\n\nstack.enter 'func2'\n\n# ---          cur      active        !active   isLogging\n#              -----    ------        --------  ---------\nTEST stack, 'func2', 'func func2', undef,    false\n\nstack.returnFrom 'func2'\n\n# ---          cur     active  !active    isLogging\n#              -----   ------  --------   ---------\nTEST stack, 'func', 'func',  'func2',  true\n\nstack.returnFrom 'func'\n\n# ---          cur     active  !active      isLogging\n#              -----   ------  --------     ---------\nTEST stack, undef, undef,  'func func2', false\n\nutest.equal getStackLog(), \"\"\"\n\tENTER 'func'\n\t\tENTER 'func2'\n\t\tRETURN FROM 'func2'\n\tRETURN FROM 'func'\n\t\"\"\"\nutest.truthy stack.isEmpty()\n\n# ---------------------------------------------------------------------------\n# --- Test yield / resume\n\nclearAllLogs()\nstack = new CallStack()\nstack.logCalls true\n\n# ---          cur     active  !active       isLogging\n#              -----   ------  --------      ---------\nTEST stack, undef, undef,   'func gen', false, 0, 0\n\nstack.enter 'func', [], true\n\n# ---          cur     active  !active   isLogging\n#              -----   ------  --------  ---------\nTEST stack, 'func', 'func',  'gen', true, 1, 1\n\nstack.enter 'gen', [], false\n\n# ---          cur     active        !active   isLogging\n#              -----   ------        --------  ---------\nTEST stack, 'gen', 'func gen',  undef, false, 2, 1\n\nstack.yield 'gen', 13\n\n# ---          cur     active    !active   isLogging\n#              -----   ------    --------  ---------\nTEST stack, 'func', 'func',  'gen',   true, 1, 1\n\nstack.resume 'gen'\n\n# ---          cur     active    !active   isLogging\n#              -----   ------    --------  ---------\nTEST stack, 'gen', 'func gen',  undef,   false, 2, 1\n\nstack.returnFrom 'gen'\n\n# ---          cur     active    !active   isLogging\n#              -----   ------    --------  ---------\nTEST stack, 'func', 'func',  'gen',   true, 1, 1\n\nstack.returnFrom 'func'\n\n# ---          cur     active  !active       isLogging\n#              -----   ------  --------      ---------\nTEST stack, undef, undef,   'func gen', false, 0, 0\n\nutest.truthy stack.isEmpty()\n\n# ---------------------------------------------------------------------------\n# --- Test multiple generators\n\nclearAllLogs()\nstack = new CallStack()\nstack.logCalls true\n\n# ---          cur     active  !active       isLogging\n#              -----   ------  --------      ---------\nTEST stack, undef, undef,   'func gen', false, 0, 0\n\nstack.enter 'func', [], true\n\n# ---          cur     active  !active   isLogging\n#              -----   ------  --------  ---------\nTEST stack, 'func', 'func',  'gen', true, 1, 1\n\nstack.enter 'gen', [], false\n\n# ---          cur     active        !active   isLogging\n#              -----   ------        --------  ---------\nTEST stack, 'gen', 'func gen',  undef, false, 2, 1\n\nstack.yield 'gen', 13\n\n# ---          cur     active    !active   isLogging\n#              -----   ------    --------  ---------\nTEST stack, 'func', 'func',  'gen',   true, 1, 1\n\nstack.resume 'gen'\n\n# ---          cur     active    !active   isLogging\n#              -----   ------    --------  ---------\nTEST stack, 'gen', 'func gen',  undef,   false, 2, 1\n\nstack.returnFrom 'gen'\n\n# ---          cur     active    !active   isLogging\n#              -----   ------    --------  ---------\nTEST stack, 'func', 'func',  'gen',   true, 1, 1\n\nstack.returnFrom 'func'\n\n# ---          cur     active  !active       isLogging\n#              -----   ------  --------      ---------\nTEST stack, undef, undef,   'func gen', false, 0, 0\n\nutest.truthy stack.isEmpty()\n\n# ---------------------------------------------------------------------------\n# test stack log\n\nclearAllLogs()\nstack = new CallStack()\nstack.logCalls true\n\nstack.reset()\nstack.enter 'func1', [13]\nstack.enter 'func2', ['abc', {mean: 42}]\nstack.yield 'func2', 99\nstack.resume 'func2'\nstack.returnFrom 'func2', 'def'\nstack.returnFrom 'func1'\n\nutest.equal getStackLog(), \"\"\"\n\tRESET STACK\n\tENTER 'func1' 13\n\t\tENTER 'func2' 'abc',{\"mean\":42}\n\t\tYIELD FROM 'func2' 99\n\t\tRESUME 'func2'\n\t\tRETURN FROM 'func2' 'def'\n\tRETURN FROM 'func1'\n\t\"\"\"\n"
  ]
}