{
  "version": 3,
  "file": "stack.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\stack.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# stack.test.coffee\n\nimport {\n\tassert, croak,\n\t} from '@jdeighan/base-utils/exceptions'\nimport {\n\tundef, defined, notdefined, words,\n\t} from '@jdeighan/base-utils'\nimport {\n\tclearAllLogs, echoLogsByDefault,\n\t} from '@jdeighan/base-utils/log'\nimport {CallStack, getStackLog} from '@jdeighan/base-utils/stack'\nimport {\n\tUnitTester,\n\tequal, like, notequal, truthy, falsy, throws, succeeds,\n\t} from '@jdeighan/base-utils/utest'\n\nechoLogsByDefault false\n\n# ---------------------------------------------------------------------------\n\nTEST = (stack, curFunc, strActive, strNonActive, logging, level=undef, logLevel=undef) =>\n\tif defined(curFunc)\n\t\tequal stack.curFuncName, curFunc\n\telse\n\t\tequal stack.curFuncName, '_MAIN_'\n\tif defined(strActive)\n\t\tfor name in words(strActive)\n\t\t\ttruthy stack.isActive(name)\n\tif defined(strNonActive)\n\t\tfor name in words(strNonActive)\n\t\t\tfalsy stack.isActive(name)\n\tif logging\n\t\ttruthy stack.isLogging()\n\telse\n\t\tfalsy stack.isLogging()\n\tif defined(level)\n\t\tequal stack.level, level\n\tif defined(logLevel)\n\t\tequal stack.logLevel, logLevel\n\treturn\n\n# ---------------------------------------------------------------------------\n\nclearAllLogs()\nstack = new CallStack()\nstack.logCalls true\n\nstack.enter 'func'\n# ---           cur    active  !active  isLogging\nTEST stack, 'func', \"func\", \"func2\", false\n\nstack.returnFrom 'func'\ntruthy stack.isEmpty()\n\nequal getStackLog(), \"\"\"\n\tENTER 'func'\n\tRETURN FROM 'func'\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\nthrows () ->\n\tsuppressExceptionLogging true\n\tclearAllLogs()\n\tstack = new CallStack()\n\tstack.logCalls true\n\tstack.enter 'func'\n\tstack.returnFrom 'func2'   # should throw an error\n\n# ---------------------------------------------------------------------------\n\nclearAllLogs()\nstack = new CallStack()\nstack.logCalls true\n\nstack.enter 'func', [], true\n# ---           cur    active  !active  isLogging\nTEST stack, 'func', \"func\", \"func2\", true\n\nstack.returnFrom 'func'\n# ---          cur     active  !active        isLogging\n#              -----   ------  --------       ---------\nTEST stack, undef,  undef,  'func func2',  false\ntruthy stack.isEmpty()\n\nequal getStackLog(), \"\"\"\n\tENTER 'func'\n\tRETURN FROM 'func'\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\nclearAllLogs()\nstack = new CallStack()\nstack.logCalls true\n\nstack.enter 'func', [], true\n\n# ---          cur     active  !active    isLogging\n#              -----   ------  --------   ---------\nTEST stack, 'func', 'func',  'func2',  true\n\nstack.enter 'func2'\n\n# ---          cur      active        !active   isLogging\n#              -----    ------        --------  ---------\nTEST stack, 'func2', 'func func2', undef,    false\n\nstack.returnFrom 'func2'\n\n# ---          cur     active  !active    isLogging\n#              -----   ------  --------   ---------\nTEST stack, 'func', 'func',  'func2',  true\n\nstack.returnFrom 'func'\n\n# ---          cur     active  !active      isLogging\n#              -----   ------  --------     ---------\nTEST stack, undef, undef,  'func func2', false\n\nequal getStackLog(), \"\"\"\n\tENTER 'func'\n\t\tENTER 'func2'\n\t\tRETURN FROM 'func2'\n\tRETURN FROM 'func'\n\t\"\"\"\ntruthy stack.isEmpty()\n\n# ---------------------------------------------------------------------------\n# --- Test yield / resume\n\nclearAllLogs()\nstack = new CallStack()\nstack.logCalls true\n\n# ---          cur     active  !active       isLogging\n#              -----   ------  --------      ---------\nTEST stack, undef, undef,   'func gen', false, 0, 0\n\nstack.enter 'func', [], true\n\n# ---          cur     active  !active   isLogging\n#              -----   ------  --------  ---------\nTEST stack, 'func', 'func',  'gen', true, 1, 1\n\nstack.enter 'gen', [], false\n\n# ---          cur     active        !active   isLogging\n#              -----   ------        --------  ---------\nTEST stack, 'gen', 'func gen',  undef, false, 2, 1\n\nstack.yield 'gen', 13\n\n# ---          cur     active    !active   isLogging\n#              -----   ------    --------  ---------\nTEST stack, 'func', 'func',  'gen',   true, 1, 1\n\nstack.resume 'gen'\n\n# ---          cur     active    !active   isLogging\n#              -----   ------    --------  ---------\nTEST stack, 'gen', 'func gen',  undef,   false, 2, 1\n\nstack.returnFrom 'gen'\n\n# ---          cur     active    !active   isLogging\n#              -----   ------    --------  ---------\nTEST stack, 'func', 'func',  'gen',   true, 1, 1\n\nstack.returnFrom 'func'\n\n# ---          cur     active  !active       isLogging\n#              -----   ------  --------      ---------\nTEST stack, undef, undef,   'func gen', false, 0, 0\n\ntruthy stack.isEmpty()\n\n# ---------------------------------------------------------------------------\n# --- Test multiple generators\n\nclearAllLogs()\nstack = new CallStack()\nstack.logCalls true\n\n# ---          cur     active  !active       isLogging\n#              -----   ------  --------      ---------\nTEST stack, undef, undef,   'func gen', false, 0, 0\n\nstack.enter 'func', [], true\n\n# ---          cur     active  !active   isLogging\n#              -----   ------  --------  ---------\nTEST stack, 'func', 'func',  'gen', true, 1, 1\n\nstack.enter 'gen', [], false\n\n# ---          cur     active        !active   isLogging\n#              -----   ------        --------  ---------\nTEST stack, 'gen', 'func gen',  undef, false, 2, 1\n\nstack.yield 'gen', 13\n\n# ---          cur     active    !active   isLogging\n#              -----   ------    --------  ---------\nTEST stack, 'func', 'func',  'gen',   true, 1, 1\n\nstack.resume 'gen'\n\n# ---          cur     active    !active   isLogging\n#              -----   ------    --------  ---------\nTEST stack, 'gen', 'func gen',  undef,   false, 2, 1\n\nstack.returnFrom 'gen'\n\n# ---          cur     active    !active   isLogging\n#              -----   ------    --------  ---------\nTEST stack, 'func', 'func',  'gen',   true, 1, 1\n\nstack.returnFrom 'func'\n\n# ---          cur     active  !active       isLogging\n#              -----   ------  --------      ---------\nTEST stack, undef, undef,   'func gen', false, 0, 0\n\ntruthy stack.isEmpty()\n\n# ---------------------------------------------------------------------------\n# test stack log\n\nclearAllLogs()\nstack = new CallStack()\nstack.logCalls true\n\nstack.reset()\nstack.enter 'func1', [13]\nstack.enter 'func2', ['abc', {mean: 42}]\nstack.yield 'func2', 99\nstack.resume 'func2'\nstack.returnFrom 'func2', 'def'\nstack.returnFrom 'func1'\n\nequal getStackLog(), \"\"\"\n\tRESET STACK\n\tENTER 'func1' 13\n\t\tENTER 'func2' 'abc',{\"mean\":42}\n\t\tYIELD FROM 'func2' 99\n\t\tRESUME 'func2'\n\t\tRETURN FROM 'func2' 'def'\n\tRETURN FROM 'func1'\n\t\"\"\"\n"
  ]
}