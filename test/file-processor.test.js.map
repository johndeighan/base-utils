{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "test/file-processor.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# file-processor.test.coffee\n\nimport {\n\tundef, defined, notdefined, rtrim, toArray,\n\t} from '@jdeighan/base-utils'\nimport {LOG} from '@jdeighan/base-utils/log'\nimport {setDebugging} from '@jdeighan/base-utils/debug'\nimport {\n\tslurp, subPath, isDir, dirContents, dirListing,\n\t} from '@jdeighan/base-utils/fs'\nimport * as lib from '@jdeighan/base-utils/file-processor'\nObject.assign(global, lib)\nimport {\n\tline2hWord, hWord2line,\n\t} from './utils.js'   # relative to this dir?\nimport {\n\tUnitTester,\n\tequal, like, notequal, truthy, falsy, fails, succeeds,\n\t} from '@jdeighan/base-utils/utest'\n\n# ---------------------------------------------------------------------------\n# --- Build array of paths to files matching a glob pattern\n#     Explanation:\n#        we override the `handleFile()` method by simply\n#        assigning to the key. For each file, we return an\n#        empty hash. If we returned undef, it would be ignored.\n#        Although the hash we return is empty, `FileProcessor`\n#        will add the key `filePath` containing the full path\n#        to the file. But, our unit test simply checks how\n#        many hashes there are in `lUserData`.\n\n(() =>\n\t# --- There are 2 *.zh files in `./test/fp-test`\n\n\tfp = new FileProcessor './test/fp-test/*.zh'\n\tfp.handleFile = (hFile) ->\n\t\treturn {}\n\tfp.readAll()\n\n\tlUserData = fp.getUserData()\n\tequal lUserData.length, 2\n\t)()\n\n# --- We can also pass option 'cwd' in hGlobOptions\n\n(() =>\n\t# --- There are 2 *.zh files in `./test/fp-test`\n\n\tfp = new FileProcessor '*.zh', {\n\t\thGlobOptions: {cwd: './test/fp-test'}\n\t\t}\n\tfp.handleFile = (hFile) ->\n\t\treturn {}\n\tfp.readAll()\n\n\tlUserData = fp.getUserData()\n\tequal lUserData.length, 2\n\t)()\n\n(() =>\n\t# --- There are 3 *.txt files in `./test/fp-test`\n\n\tfp = new FileProcessor './test/fp-test/*.txt'\n\tfp.handleFile = (hFile) ->\n\t\treturn {}\n\tfp.readAll()\n\n\tlUserData = fp.getUserData()\n\tequal lUserData.length, 3\n\t)()\n\n(() =>\n\t# --- There are 26 total files in `./test/words`\n\n\tfp = new FileProcessor './test/words/*'\n\tfp.handleFile = (hFile) ->\n\t\t{type} = hFile\n\t\tif (type == 'file')\n\t\t\treturn {}\n\t\telse\n\t\t\treturn undef\n\tfp.readAll()\n\n\tlUserData = fp.getUserData()\n\tequal lUserData.length, 26\n\t)()\n\n(() =>\n\t# --- There are 25 *.zh files in `./test/words`\n\n\tfp = new FileProcessor './test/words/*.zh'\n\tfp.handleFile = (hFile) ->\n\t\treturn {}\n\tfp.readAll()\n\n\tlUserData = fp.getUserData()\n\tequal lUserData.length, 25\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Keep track of the contents of each *.zh file\n#     Explanation:\n#        we override the `handleFile()` method by simply\n#        assigning to the key. For each file, we return a\n#        hash that includes the file contents. The unit test\n#        then tests if lUserData includes that content.\n#        rtrim() will trim trailing whitespace, including \\n\n\n(() =>\n\tfp = new FileProcessor './test/fp-test/*.zh'\n\tfp.handleFile = (hFile) ->\n\t\treturn {\n\t\t\tzh: rtrim(slurp(hFile.filePath))\n\t\t\t}\n\tfp.readAll()\n\n\tlUserData = fp.getSortedUserData()\n\tequal lUserData.length, 2\n\tlike lUserData[0], {zh: '你好'}\n\tlike lUserData[1], {zh: '再见'}\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Count total number of words in all `*.zh` files\n#        in `words` dir\n#     Explanation:\n#        we override the `handleFile()` to increment the\n#        value of @numWords, but return undef\n\n(() =>\n\tfp = new FileProcessor './test/words/*.zh'\n\tfp.handleFile = (hFile) ->\n\t\tcontent = rtrim(slurp(hFile.filePath))\n\t\tcount = toArray(content).length\n\t\tif defined(@numWords)\n\t\t\t@numWords += count\n\t\telse\n\t\t\t@numWords = count\n\t\treturn undef\n\tfp.readAll()\n\n\tequal fp.numWords, 2048\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Count total number of words in all `*.zh` files in `words` dir\n#     by overriding transformFile() to pass integers to handleFile()\n\n(() =>\n\tfp = new FileProcessor './test/words/*.zh'\n\tfp.transformFile = (hFile) ->\n\t\tcontent = rtrim(slurp(hFile.filePath))\n\t\treturn toArray(content).length\n\n\tfp.handleFile = (count) ->\n\t\tif defined(@numWords)\n\t\t\t@numWords += count\n\t\telse\n\t\t\t@numWords = count\n\t\treturn undef\n\tfp.readAll()\n\n\tequal fp.numWords, 2048\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Count total number of words in all `*.zh` files\n#        in `words` dir - using a LineProcessor\n#     Explanation:\n#        we override the `handleLine()`, which is called\n#        for each line in any file, to increment the\n#        value of @numWords, but return undef\n\n(() =>\n\tfp = new LineProcessor './test/words/*.zh'\n\tfp.handleLine = (line) ->\n\t\tif defined(@numWords)\n\t\t\t@numWords += 1\n\t\telse\n\t\t\t@numWords = 1\n\t\treturn undef     # write nothing out\n\tfp.readAll()\n\n\tequal fp.numWords, 2048\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Write out new files in `./test/words/temp` that contain\n#        just the Chinese words in `*.zh` files\n\n(() =>\n\tfp = new LineProcessor './test/words/*.zh'\n\tfp.handleLine = (line) ->\n\t\tif defined(@numWords)\n\t\t\t@numWords += 1\n\t\telse\n\t\t\t@numWords = 1\n\t\treturn {hWord: line2hWord(line)}\n\tfp.writeLine = (h) ->\n\t\t{hWord} = h         # extract previously written hWord\n\t\tword = hWord.zh[0].zh\n\t\treturn word\n\tfp.readAll()\n\tfp.writeAll()\n\n\tequal fp.numWords, 2048\n\tequal dirListing('./test/words/temp').length, 25\n\tequal dirListing('./test/words/temp', {regexp: /\\.zh$/}).length, 25\n\tequal dirListing('./test/words/temp', 'filesOnly').length, 25\n\tequal dirListing('./test/words/temp', 'dirsOnly').length, 0\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Write out new files in `./test/words/temp` that contain\n#        the same lines in the original file, but with\n#        the number incremented by 5\n\n(() =>\n\tfp = new LineProcessor './test/words/*.zh'\n\tfp.handleLine = (line) ->\n\t\treturn {hWord: line2hWord(line)}\n\tfp.writeFileTo = (hUserData) ->\n\t\treturn subPath hUserData.filePath, 'temp2'\n\tfp.writeLine = (hLine) ->\n\t\t{hWord} = hLine   # extract previously written hWord\n\t\thWord.num += 5\n\t\treturn hWord2line(hWord)\n\tfp.readAll()\n\tfp.writeAll()\n\n\ttruthy isDir('./test/words/temp2')\n\ttruthy slurp('./test/words/adjectives.zh').startsWith('11 ')\n\ttruthy slurp('./test/words/temp2/adjectives.zh').startsWith('16 ')\n\tequal dirListing('./test/words/temp2').length, 25\n\tequal dirListing('./test/words/temp2', {regexp: /\\.zh$/}).length, 25\n\tequal dirListing('./test/words/temp2', 'filesOnly').length, 25\n\tequal dirListing('./test/words/temp2', 'dirsOnly').length, 0\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Write out new files in `./test/words/temp` that contain\n#        the same lines in the original file, but with\n#        the number incremented by 5\n#     Override transformLine() to do this, override handleLine() to\n#        return its first arg\n\n(() =>\n\tfp = new LineProcessor './test/words/*.zh'\n\tfp.transformLine = (line) =>\n\t\treturn {hWord: line2hWord(line)}\n\tfp.handleLine = (h) ->\n\t\treturn h\n\tfp.writeFileTo = (hUserData) ->\n\t\treturn subPath hUserData.filePath, 'temp2'\n\tfp.writeLine = (hLine) ->\n\t\t{hWord} = hLine   # extract previously written hWord\n\t\thWord.num += 5\n\t\treturn hWord2line(hWord)\n\tfp.readAll()\n\tfp.writeAll()\n\n\ttruthy isDir('./test/words/temp2')\n\ttruthy slurp('./test/words/adjectives.zh').startsWith('11 ')\n\ttruthy slurp('./test/words/temp2/adjectives.zh').startsWith('16 ')\n\tequal dirListing('./test/words/temp2').length, 25\n\tequal dirListing('./test/words/temp2', {regexp: /\\.zh$/}).length, 25\n\tequal dirListing('./test/words/temp2', 'filesOnly').length, 25\n\tequal dirListing('./test/words/temp2', 'dirsOnly').length, 0\n\t)()\n\n(() =>\n\tlp = new LineProcessor('./test/file-processor/test.zh')\n\tlp.transformLine = (line) => return line\n\tlp.handleLine = (hWord, lineNum, hFileInfo) ->\n\t\tif notdefined(hWord)\n\t\t\treturn undef\n\t\treturn undef\n\n\tlp.readAll()\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tnumLines = 0\n\n\tlp = new LineProcessor('./test/file-processor/test.zh')\n\tlp.transformLine = (line) => return {line}\n\tlp.handleLine = (h, lineNum, hFileInfo) ->\n\t\tnumLines += 1\n\t\treturn undef\n\n\tlp.readAll()\n\tequal numLines, 0\n\n\t)()"
  ]
}