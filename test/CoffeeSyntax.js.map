{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "<anonymous>"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# The CoffeeScript parser is generated by [Jison](https://github.com/zaach/jison)\n# from this grammar file. Jison is a bottom-up parser generator, similar in\n# style to [Bison](http://www.gnu.org/software/bison), implemented in JavaScript.\n# It can recognize [LALR(1), LR(0), SLR(1), and LR(1)](https://en.wikipedia.org/wiki/LR_grammar)\n# type grammars. To create the Jison parser, we list the pattern to match\n# on the left-hand side, and the action to take (usually the creation of syntax\n# tree nodes) on the right. As the parser runs, it\n# shifts tokens from our token stream, from left to right, and\n# [attempts to match](https://en.wikipedia.org/wiki/Bottom-up_parsing)\n# the token sequence against the rules below. When a match can be made, it\n# reduces into the [nonterminal](https://en.wikipedia.org/wiki/Terminal_and_nonterminal_symbols)\n# (the enclosing name at the top), and we proceed from there.\n#\n# If you run the `cake build:parser` command, Jison constructs a parse table\n# from our rules and saves it into `lib/parser.js`.\n\n# The only dependency is on the **Jison.Parser**.\n{Parser} = require 'jison'\n\n# Jison DSL\n# ---------\n\n# Since we're going to be wrapped in a function by Jison in any case, if our\n# action immediately returns a value, we can optimize by removing the function\n# wrapper and just returning the value directly.\nunwrap = /^function\\s*\\(\\)\\s*\\{\\s*return\\s*([\\s\\S]*);\\s*\\}/\n\n# Our handy DSL for Jison grammar generation, thanks to\n# [Tim Caswell](https://github.com/creationix). For every rule in the grammar,\n# we pass the pattern-defining string, the action to run, and extra options,\n# optionally. If no action is specified, we simply pass the value of the\n# previous nonterminal.\no = (patternString, action, options) ->\n  patternString = patternString.replace /\\s{2,}/g, ' '\n  patternCount = patternString.split(' ').length\n  if action\n    # This code block does string replacements in the generated `parser.js`\n    # file, replacing the calls to the `LOC` function and other strings as\n    # listed below.\n    action = if match = unwrap.exec action then match[1] else \"(#{action}())\"\n\n    # All runtime functions we need are defined on `yy`\n    action = action.replace /\\bnew /g, '$&yy.'\n    action = action.replace /\\b(?:Block\\.wrap|extend)\\b/g, 'yy.$&'\n\n    # Returns strings of functions to add to `parser.js` which add extra data\n    # that nodes may have, such as comments or location data. Location data\n    # is added to the first parameter passed in, and the parameter is returned.\n    # If the parameter is not a node, it will just be passed through unaffected.\n    getAddDataToNodeFunctionString = (first, last, forceUpdateLocation = yes) ->\n      \"yy.addDataToNode(yy, @#{first}, #{if first[0] is '$' then '$$' else '$'}#{first}, #{if last then \"@#{last}, #{if last[0] is '$' then '$$' else '$'}#{last}\" else 'null, null'}, #{if forceUpdateLocation then 'true' else 'false'})\"\n\n    # This code replaces the calls to `LOC` with the `yy.addDataToNode` string\n    # defined above. The `LOC` function, when used below in the grammar rules,\n    # is used to make sure that newly created node class objects get correct\n    # location data assigned to them. By default, the grammar will assign the\n    # location data spanned by *all* of the tokens on the left (e.g. a string\n    # such as `'Body TERMINATOR Line'`) to the “top-level” node returned by\n    # the grammar rule (the function on the right). But for “inner” node class\n    # objects created by grammar rules, they won’t get correct location data\n    # assigned to them without adding `LOC`.\n\n    # For example, consider the grammar rule `'NEW_TARGET . Property'`, which\n    # is handled by a function that returns\n    # `new MetaProperty LOC(1)(new IdentifierLiteral $1), LOC(3)(new Access $3)`.\n    # The `1` in `LOC(1)` refers to the first token (`NEW_TARGET`) and the `3`\n    # in `LOC(3)` refers to the third token (`Property`). In order for the\n    # `new IdentifierLiteral` to get assigned the location data corresponding\n    # to `new` in the source code, we use\n    # `LOC(1)(new IdentifierLiteral ...)` to mean “assign the location data of\n    # the *first* token of this grammar rule (`NEW_TARGET`) to this\n    # `new IdentifierLiteral`”. The `LOC(3)` means “assign the location data of\n    # the *third* token of this grammar rule (`Property`) to this\n    # `new Access`”.\n    returnsLoc = /^LOC/.test action\n    action = action.replace /LOC\\(([0-9]*)\\)/g, getAddDataToNodeFunctionString('$1')\n    # A call to `LOC` with two arguments, e.g. `LOC(2,4)`, sets the location\n    # data for the generated node on both of the referenced tokens  (the second\n    # and fourth in this example).\n    action = action.replace /LOC\\(([0-9]*),\\s*([0-9]*)\\)/g, getAddDataToNodeFunctionString('$1', '$2')\n    performActionFunctionString = \"$$ = #{getAddDataToNodeFunctionString(1, patternCount, not returnsLoc)}(#{action});\"\n  else\n    performActionFunctionString = '$$ = $1;'\n\n  [patternString, performActionFunctionString, options]\n\n# Grammatical Rules\n# -----------------\n\n# In all of the rules that follow, you'll see the name of the nonterminal as\n# the key to a list of alternative matches. With each match's action, the\n# dollar-sign variables are provided by Jison as references to the value of\n# their numeric position, so in this rule:\n#\n#     'Expression UNLESS Expression'\n#\n# `$1` would be the value of the first `Expression`, `$2` would be the token\n# for the `UNLESS` terminal, and `$3` would be the value of the second\n# `Expression`.\ngrammar =\n\n  # The **Root** is the top-level node in the syntax tree. Since we parse bottom-up,\n  # all parsing must end here.\n  Root: [\n    o '',                                       -> new Root new Block\n    o 'Body',                                   -> new Root $1\n  ]\n\n  # Any list of statements and expressions, separated by line breaks or semicolons.\n  Body: [\n    o 'Line',                                   -> Block.wrap [$1]\n    o 'Body TERMINATOR Line',                   -> $1.push $3\n    o 'Body TERMINATOR'\n  ]\n\n  # Block and statements, which make up a line in a body. FuncDirective is a\n  # statement, but not included in Statement because that results in an ambiguous\n  # grammar.\n  Line: [\n    o 'Expression'\n    o 'ExpressionLine'\n    o 'Statement'\n    o 'FuncDirective'\n  ]\n\n  FuncDirective: [\n    o 'YieldReturn'\n    o 'AwaitReturn'\n  ]\n\n  # Pure statements which cannot be expressions.\n  Statement: [\n    o 'Return'\n    o 'STATEMENT',                              -> new StatementLiteral $1\n    o 'Import'\n    o 'Export'\n  ]\n\n  # All the different types of expressions in our language. The basic unit of\n  # CoffeeScript is the **Expression** -- everything that can be an expression\n  # is one. Blocks serve as the building blocks of many other rules, making\n  # them somewhat circular.\n  Expression: [\n    o 'Value'\n    o 'Code'\n    o 'Operation'\n    o 'Assign'\n    o 'If'\n    o 'Try'\n    o 'While'\n    o 'For'\n    o 'Switch'\n    o 'Class'\n    o 'Throw'\n    o 'Yield'\n  ]\n\n  # Expressions which are written in single line and would otherwise require being\n  # wrapped in braces: E.g `a = b if do -> f a is 1`, `if f (a) -> a*2 then ...`,\n  # `for x in do (obj) -> f obj when x > 8 then f x`\n  ExpressionLine: [\n    o 'CodeLine'\n    o 'IfLine'\n    o 'OperationLine'\n  ]\n\n  Yield: [\n    o 'YIELD',                                  -> new Op $1, new Value new Literal ''\n    o 'YIELD Expression',                       -> new Op $1, $2\n    o 'YIELD INDENT Object OUTDENT',            -> new Op $1, $3\n    o 'YIELD FROM Expression',                  -> new Op $1.concat($2), $3\n  ]\n\n  # An indented block of expressions. Note that the [Rewriter](rewriter.html)\n  # will convert some postfix forms into blocks for us, by adjusting the\n  # token stream.\n  Block: [\n    o 'INDENT OUTDENT',                         -> new Block\n    o 'INDENT Body OUTDENT',                    -> $2\n  ]\n\n  Identifier: [\n    o 'IDENTIFIER',                             -> new IdentifierLiteral $1\n    o 'JSX_TAG',                                -> new JSXTag $1.toString(),\n                                                     tagNameLocationData:                  $1.tagNameToken[2]\n                                                     closingTagOpeningBracketLocationData: $1.closingTagOpeningBracketToken?[2]\n                                                     closingTagSlashLocationData:          $1.closingTagSlashToken?[2]\n                                                     closingTagNameLocationData:           $1.closingTagNameToken?[2]\n                                                     closingTagClosingBracketLocationData: $1.closingTagClosingBracketToken?[2]\n  ]\n\n  Property: [\n    o 'PROPERTY',                               -> new PropertyName $1.toString()\n  ]\n\n  # Alphanumerics are separated from the other **Literal** matchers because\n  # they can also serve as keys in object literals.\n  AlphaNumeric: [\n    o 'NUMBER',                                 -> new NumberLiteral $1.toString(), parsedValue: $1.parsedValue\n    o 'String'\n  ]\n\n  String: [\n    o 'STRING', ->\n      new StringLiteral(\n        $1.slice 1, -1 # strip artificial quotes and unwrap to primitive string\n        quote:        $1.quote\n        initialChunk: $1.initialChunk\n        finalChunk:   $1.finalChunk\n        indent:       $1.indent\n        double:       $1.double\n        heregex:      $1.heregex\n      )\n    o 'STRING_START Interpolations STRING_END', -> new StringWithInterpolations Block.wrap($2), quote: $1.quote, startQuote: LOC(1)(new Literal $1.toString())\n  ]\n\n  Interpolations: [\n    o 'InterpolationChunk',                     -> [$1]\n    o 'Interpolations InterpolationChunk',      -> $1.concat $2\n  ]\n\n  InterpolationChunk: [\n    o 'INTERPOLATION_START Body INTERPOLATION_END',                -> new Interpolation $2\n    o 'INTERPOLATION_START INDENT Body OUTDENT INTERPOLATION_END', -> new Interpolation $3\n    o 'INTERPOLATION_START INTERPOLATION_END',                     -> new Interpolation\n    o 'String',                                                    -> $1\n  ]\n\n  # The .toString() calls here and elsewhere are to convert `String` objects\n  # back to primitive strings now that we've retrieved stowaway extra properties\n  Regex: [\n    o 'REGEX',                                  -> new RegexLiteral $1.toString(), delimiter: $1.delimiter, heregexCommentTokens: $1.heregexCommentTokens\n    o 'REGEX_START Invocation REGEX_END',       -> new RegexWithInterpolations $2, heregexCommentTokens: $3.heregexCommentTokens\n  ]\n\n  # All of our immediate values. Generally these can be passed straight\n  # through and printed to JavaScript.\n  Literal: [\n    o 'AlphaNumeric'\n    o 'JS',                                     -> new PassthroughLiteral $1.toString(), here: $1.here, generated: $1.generated\n    o 'Regex'\n    o 'UNDEFINED',                              -> new UndefinedLiteral $1\n    o 'NULL',                                   -> new NullLiteral $1\n    o 'BOOL',                                   -> new BooleanLiteral $1.toString(), originalValue: $1.original\n    o 'INFINITY',                               -> new InfinityLiteral $1.toString(), originalValue: $1.original\n    o 'NAN',                                    -> new NaNLiteral $1\n  ]\n\n  # Assignment of a variable, property, or index to a value.\n  Assign: [\n    o 'Assignable = Expression',                -> new Assign $1, $3\n    o 'Assignable = TERMINATOR Expression',     -> new Assign $1, $4\n    o 'Assignable = INDENT Expression OUTDENT', -> new Assign $1, $4\n  ]\n\n  # Assignment when it happens within an object literal. The difference from\n  # the ordinary **Assign** is that these allow numbers and strings as keys.\n  AssignObj: [\n    o 'ObjAssignable',                          -> new Value $1\n    o 'ObjRestValue'\n    o 'ObjAssignable : Expression',             -> new Assign LOC(1)(new Value $1), $3, 'object',\n                                                              operatorToken: LOC(2)(new Literal $2)\n    o 'ObjAssignable :\n       INDENT Expression OUTDENT',              -> new Assign LOC(1)(new Value $1), $4, 'object',\n                                                              operatorToken: LOC(2)(new Literal $2)\n    o 'SimpleObjAssignable = Expression',       -> new Assign LOC(1)(new Value $1), $3, null,\n                                                              operatorToken: LOC(2)(new Literal $2)\n    o 'SimpleObjAssignable =\n       INDENT Expression OUTDENT',              -> new Assign LOC(1)(new Value $1), $4, null,\n                                                              operatorToken: LOC(2)(new Literal $2)\n  ]\n\n  SimpleObjAssignable: [\n    o 'Identifier'\n    o 'Property'\n    o 'ThisProperty'\n  ]\n\n  ObjAssignable: [\n    o 'SimpleObjAssignable'\n    o '[ Expression ]',          -> new Value new ComputedPropertyName $2\n    o '@ [ Expression ]',        -> new Value LOC(1)(new ThisLiteral $1), [LOC(3)(new ComputedPropertyName($3))], 'this'\n    o 'AlphaNumeric'\n  ]\n\n  # Object literal spread properties.\n  ObjRestValue: [\n    o 'SimpleObjAssignable ...', -> new Splat new Value $1\n    o '... SimpleObjAssignable', -> new Splat new Value($2), postfix: no\n    o 'ObjSpreadExpr ...',       -> new Splat $1\n    o '... ObjSpreadExpr',       -> new Splat $2, postfix: no\n  ]\n\n  ObjSpreadExpr: [\n    o 'ObjSpreadIdentifier'\n    o 'Object'\n    o 'Parenthetical'\n    o 'Super'\n    o 'This'\n    o 'SUPER OptFuncExist Arguments',               -> new SuperCall LOC(1)(new Super), $3, $2.soak, $1\n    o 'DYNAMIC_IMPORT Arguments',                   -> new DynamicImportCall LOC(1)(new DynamicImport), $2\n    o 'SimpleObjAssignable OptFuncExist Arguments', -> new Call (new Value $1), $3, $2.soak\n    o 'ObjSpreadExpr OptFuncExist Arguments',       -> new Call $1, $3, $2.soak\n  ]\n\n  ObjSpreadIdentifier: [\n    o 'SimpleObjAssignable Accessor', -> (new Value $1).add $2\n    o 'ObjSpreadExpr Accessor',       -> (new Value $1).add $2\n  ]\n\n  # A return statement from a function body.\n  Return: [\n    o 'RETURN Expression',                      -> new Return $2\n    o 'RETURN INDENT Object OUTDENT',           -> new Return new Value $3\n    o 'RETURN',                                 -> new Return\n  ]\n\n  YieldReturn: [\n    o 'YIELD RETURN Expression',                -> new YieldReturn $3,   returnKeyword: LOC(2)(new Literal $2)\n    o 'YIELD RETURN',                           -> new YieldReturn null, returnKeyword: LOC(2)(new Literal $2)\n  ]\n\n  AwaitReturn: [\n    o 'AWAIT RETURN Expression',                -> new AwaitReturn $3,   returnKeyword: LOC(2)(new Literal $2)\n    o 'AWAIT RETURN',                           -> new AwaitReturn null, returnKeyword: LOC(2)(new Literal $2)\n  ]\n\n  # The **Code** node is the function literal. It’s defined by an indented block\n  # of **Block** preceded by a function arrow, with an optional parameter list.\n  Code: [\n    o 'PARAM_START ParamList PARAM_END FuncGlyph Block', -> new Code $2, $5, $4, LOC(1)(new Literal $1)\n    o 'FuncGlyph Block',                                 -> new Code [], $2, $1\n  ]\n\n  # The Codeline is the **Code** node with **Line** instead of indented **Block**.\n  CodeLine: [\n    o 'PARAM_START ParamList PARAM_END FuncGlyph Line', -> new Code $2, LOC(5)(Block.wrap [$5]), $4,\n                                                              LOC(1)(new Literal $1)\n    o 'FuncGlyph Line',                                 -> new Code [], LOC(2)(Block.wrap [$2]), $1\n  ]\n\n  # CoffeeScript has two different symbols for functions. `->` is for ordinary\n  # functions, and `=>` is for functions bound to the current value of *this*.\n  FuncGlyph: [\n    o '->',                                     -> new FuncGlyph $1\n    o '=>',                                     -> new FuncGlyph $1\n  ]\n\n  # An optional, trailing comma.\n  OptComma: [\n    o ''\n    o ','\n  ]\n\n  # The list of parameters that a function accepts can be of any length.\n  ParamList: [\n    o '',                                       -> []\n    o 'Param',                                  -> [$1]\n    o 'ParamList , Param',                      -> $1.concat $3\n    o 'ParamList OptComma TERMINATOR Param',    -> $1.concat $4\n    o 'ParamList OptComma INDENT ParamList OptComma OUTDENT', -> $1.concat $4\n  ]\n\n  # A single parameter in a function definition can be ordinary, or a splat\n  # that hoovers up the remaining arguments.\n  Param: [\n    o 'ParamVar',                               -> new Param $1\n    o 'ParamVar ...',                           -> new Param $1, null, on\n    o '... ParamVar',                           -> new Param $2, null, postfix: no\n    o 'ParamVar = Expression',                  -> new Param $1, $3\n    o '...',                                    -> new Expansion\n  ]\n\n  # Function Parameters\n  ParamVar: [\n    o 'Identifier'\n    o 'ThisProperty'\n    o 'Array'\n    o 'Object'\n  ]\n\n  # A splat that occurs outside of a parameter list.\n  Splat: [\n    o 'Expression ...',                         -> new Splat $1\n    o '... Expression',                         -> new Splat $2, {postfix: no}\n  ]\n\n  # Variables and properties that can be assigned to.\n  SimpleAssignable: [\n    o 'Identifier',                             -> new Value $1\n    o 'Value Accessor',                         -> $1.add $2\n    o 'Code Accessor',                          -> new Value($1).add $2\n    o 'ThisProperty'\n  ]\n\n  # Everything that can be assigned to.\n  Assignable: [\n    o 'SimpleAssignable'\n    o 'Array',                                  -> new Value $1\n    o 'Object',                                 -> new Value $1\n  ]\n\n  # The types of things that can be treated as values -- assigned to, invoked\n  # as functions, indexed into, named as a class, etc.\n  Value: [\n    o 'Assignable'\n    o 'Literal',                                -> new Value $1\n    o 'Parenthetical',                          -> new Value $1\n    o 'Range',                                  -> new Value $1\n    o 'Invocation',                             -> new Value $1\n    o 'DoIife',                                 -> new Value $1\n    o 'This'\n    o 'Super',                                  -> new Value $1\n    o 'MetaProperty',                           -> new Value $1\n  ]\n\n  # A `super`-based expression that can be used as a value.\n  Super: [\n    o 'SUPER . Property',                                      -> new Super LOC(3)(new Access $3), LOC(1)(new Literal $1)\n    o 'SUPER INDEX_START Expression INDEX_END',                -> new Super LOC(3)(new Index $3),  LOC(1)(new Literal $1)\n    o 'SUPER INDEX_START INDENT Expression OUTDENT INDEX_END', -> new Super LOC(4)(new Index $4),  LOC(1)(new Literal $1)\n  ]\n\n  # A “meta-property” access e.g. `new.target` or `import.meta`, where\n  # something that looks like a property is referenced on a keyword.\n  MetaProperty: [\n    o 'NEW_TARGET . Property',                  -> new MetaProperty LOC(1)(new IdentifierLiteral $1), LOC(3)(new Access $3)\n    o 'IMPORT_META . Property',                 -> new MetaProperty LOC(1)(new IdentifierLiteral $1), LOC(3)(new Access $3)\n  ]\n\n  # The general group of accessors into an object, by property, by prototype\n  # or by array index or slice.\n  Accessor: [\n    o '.  Property',                            -> new Access $2\n    o '?. Property',                            -> new Access $2, soak: yes\n    o ':: Property',                            -> [LOC(1)(new Access new PropertyName('prototype'), shorthand: yes), LOC(2)(new Access $2)]\n    o '?:: Property',                           -> [LOC(1)(new Access new PropertyName('prototype'), shorthand: yes, soak: yes), LOC(2)(new Access $2)]\n    o '::',                                     -> new Access new PropertyName('prototype'), shorthand: yes\n    o '?::',                                    -> new Access new PropertyName('prototype'), shorthand: yes, soak: yes\n    o 'Index'\n  ]\n\n  # Indexing into an object or array using bracket notation.\n  Index: [\n    o 'INDEX_START IndexValue INDEX_END',                -> $2\n    o 'INDEX_START INDENT IndexValue OUTDENT INDEX_END', -> $3\n    o 'INDEX_SOAK  Index',                               -> extend $2, soak: yes\n  ]\n\n  IndexValue: [\n    o 'Expression',                             -> new Index $1\n    o 'Slice',                                  -> new Slice $1\n  ]\n\n  # In CoffeeScript, an object literal is simply a list of assignments.\n  Object: [\n    o '{ AssignList OptComma }',                -> new Obj $2, $1.generated\n  ]\n\n  # Assignment of properties within an object literal can be separated by\n  # comma, as in JavaScript, or simply by newline.\n  AssignList: [\n    o '',                                                       -> []\n    o 'AssignObj',                                              -> [$1]\n    o 'AssignList , AssignObj',                                 -> $1.concat $3\n    o 'AssignList OptComma TERMINATOR AssignObj',               -> $1.concat $4\n    o 'AssignList OptComma INDENT AssignList OptComma OUTDENT', -> $1.concat $4\n  ]\n\n  # Class definitions have optional bodies of prototype property assignments,\n  # and optional references to the superclass.\n  Class: [\n    o 'CLASS',                                           -> new Class\n    o 'CLASS Block',                                     -> new Class null, null, $2\n    o 'CLASS EXTENDS Expression',                        -> new Class null, $3\n    o 'CLASS EXTENDS Expression Block',                  -> new Class null, $3, $4\n    o 'CLASS SimpleAssignable',                          -> new Class $2\n    o 'CLASS SimpleAssignable Block',                    -> new Class $2, null, $3\n    o 'CLASS SimpleAssignable EXTENDS Expression',       -> new Class $2, $4\n    o 'CLASS SimpleAssignable EXTENDS Expression Block', -> new Class $2, $4, $5\n  ]\n\n  Import: [\n    o 'IMPORT String',                                                                              -> new ImportDeclaration null, $2\n    o 'IMPORT String ASSERT Object',                                                                -> new ImportDeclaration null, $2, $4\n    o 'IMPORT ImportDefaultSpecifier FROM String',                                                  -> new ImportDeclaration new ImportClause($2, null), $4\n    o 'IMPORT ImportDefaultSpecifier FROM String ASSERT Object',                                    -> new ImportDeclaration new ImportClause($2, null), $4, $6\n    o 'IMPORT ImportNamespaceSpecifier FROM String',                                                -> new ImportDeclaration new ImportClause(null, $2), $4\n    o 'IMPORT ImportNamespaceSpecifier FROM String ASSERT Object',                                  -> new ImportDeclaration new ImportClause(null, $2), $4, $6\n    o 'IMPORT { } FROM String',                                                                     -> new ImportDeclaration new ImportClause(null, new ImportSpecifierList []), $5\n    o 'IMPORT { } FROM String ASSERT Object',                                                       -> new ImportDeclaration new ImportClause(null, new ImportSpecifierList []), $5, $7\n    o 'IMPORT { ImportSpecifierList OptComma } FROM String',                                        -> new ImportDeclaration new ImportClause(null, new ImportSpecifierList $3), $7\n    o 'IMPORT { ImportSpecifierList OptComma } FROM String ASSERT Object',                          -> new ImportDeclaration new ImportClause(null, new ImportSpecifierList $3), $7, $9\n    o 'IMPORT ImportDefaultSpecifier , ImportNamespaceSpecifier FROM String',                       -> new ImportDeclaration new ImportClause($2, $4), $6\n    o 'IMPORT ImportDefaultSpecifier , ImportNamespaceSpecifier FROM String ASSERT Object',         -> new ImportDeclaration new ImportClause($2, $4), $6, $8\n    o 'IMPORT ImportDefaultSpecifier , { ImportSpecifierList OptComma } FROM String',               -> new ImportDeclaration new ImportClause($2, new ImportSpecifierList $5), $9\n    o 'IMPORT ImportDefaultSpecifier , { ImportSpecifierList OptComma } FROM String ASSERT Object', -> new ImportDeclaration new ImportClause($2, new ImportSpecifierList $5), $9, $11\n  ]\n\n  ImportSpecifierList: [\n    o 'ImportSpecifier',                                                          -> [$1]\n    o 'ImportSpecifierList , ImportSpecifier',                                    -> $1.concat $3\n    o 'ImportSpecifierList OptComma TERMINATOR ImportSpecifier',                  -> $1.concat $4\n    o 'INDENT ImportSpecifierList OptComma OUTDENT',                              -> $2\n    o 'ImportSpecifierList OptComma INDENT ImportSpecifierList OptComma OUTDENT', -> $1.concat $4\n  ]\n\n  ImportSpecifier: [\n    o 'Identifier',                             -> new ImportSpecifier $1\n    o 'Identifier AS Identifier',               -> new ImportSpecifier $1, $3\n    o 'DEFAULT',                                -> new ImportSpecifier LOC(1)(new DefaultLiteral $1)\n    o 'DEFAULT AS Identifier',                  -> new ImportSpecifier LOC(1)(new DefaultLiteral($1)), $3\n  ]\n\n  ImportDefaultSpecifier: [\n    o 'Identifier',                             -> new ImportDefaultSpecifier $1\n  ]\n\n  ImportNamespaceSpecifier: [\n    o 'IMPORT_ALL AS Identifier',               -> new ImportNamespaceSpecifier new Literal($1), $3\n  ]\n\n  Export: [\n    o 'EXPORT { }',                                                        -> new ExportNamedDeclaration new ExportSpecifierList []\n    o 'EXPORT { ExportSpecifierList OptComma }',                           -> new ExportNamedDeclaration new ExportSpecifierList $3\n    o 'EXPORT Class',                                                      -> new ExportNamedDeclaration $2\n    o 'EXPORT Identifier = Expression',                                    -> new ExportNamedDeclaration LOC(2,4)(new Assign $2, $4, null,\n                                                                                                      moduleDeclaration: 'export')\n    o 'EXPORT Identifier = TERMINATOR Expression',                         -> new ExportNamedDeclaration LOC(2,5)(new Assign $2, $5, null,\n                                                                                                      moduleDeclaration: 'export')\n    o 'EXPORT Identifier = INDENT Expression OUTDENT',                     -> new ExportNamedDeclaration LOC(2,6)(new Assign $2, $5, null,\n                                                                                                      moduleDeclaration: 'export')\n    o 'EXPORT DEFAULT Expression',                                         -> new ExportDefaultDeclaration $3\n    o 'EXPORT DEFAULT INDENT Object OUTDENT',                              -> new ExportDefaultDeclaration new Value $4\n    o 'EXPORT EXPORT_ALL FROM String',                                     -> new ExportAllDeclaration new Literal($2), $4\n    o 'EXPORT EXPORT_ALL FROM String ASSERT Object',                       -> new ExportAllDeclaration new Literal($2), $4, $6\n    o 'EXPORT { } FROM String',                                            -> new ExportNamedDeclaration new ExportSpecifierList([]), $5\n    o 'EXPORT { } FROM String ASSERT Object',                              -> new ExportNamedDeclaration new ExportSpecifierList([]), $5, $7\n    o 'EXPORT { ExportSpecifierList OptComma } FROM String',               -> new ExportNamedDeclaration new ExportSpecifierList($3), $7\n    o 'EXPORT { ExportSpecifierList OptComma } FROM String ASSERT Object', -> new ExportNamedDeclaration new ExportSpecifierList($3), $7, $9\n  ]\n\n  ExportSpecifierList: [\n    o 'ExportSpecifier',                                                          -> [$1]\n    o 'ExportSpecifierList , ExportSpecifier',                                    -> $1.concat $3\n    o 'ExportSpecifierList OptComma TERMINATOR ExportSpecifier',                  -> $1.concat $4\n    o 'INDENT ExportSpecifierList OptComma OUTDENT',                              -> $2\n    o 'ExportSpecifierList OptComma INDENT ExportSpecifierList OptComma OUTDENT', -> $1.concat $4\n  ]\n\n  ExportSpecifier: [\n    o 'Identifier',                             -> new ExportSpecifier $1\n    o 'Identifier AS Identifier',               -> new ExportSpecifier $1, $3\n    o 'Identifier AS DEFAULT',                  -> new ExportSpecifier $1, LOC(3)(new DefaultLiteral $3)\n    o 'DEFAULT',                                -> new ExportSpecifier LOC(1)(new DefaultLiteral $1)\n    o 'DEFAULT AS Identifier',                  -> new ExportSpecifier LOC(1)(new DefaultLiteral($1)), $3\n  ]\n\n  # Ordinary function invocation, or a chained series of calls.\n  Invocation: [\n    o 'Value OptFuncExist String',              -> new TaggedTemplateCall $1, $3, $2.soak\n    o 'Value OptFuncExist Arguments',           -> new Call $1, $3, $2.soak\n    o 'SUPER OptFuncExist Arguments',           -> new SuperCall LOC(1)(new Super), $3, $2.soak, $1\n    o 'DYNAMIC_IMPORT Arguments',               -> new DynamicImportCall LOC(1)(new DynamicImport), $2\n  ]\n\n  # An optional existence check on a function.\n  OptFuncExist: [\n    o '',                                       -> soak: no\n    o 'FUNC_EXIST',                             -> soak: yes\n  ]\n\n  # The list of arguments to a function call.\n  Arguments: [\n    o 'CALL_START CALL_END',                    -> []\n    o 'CALL_START ArgList OptComma CALL_END',   -> $2.implicit = $1.generated; $2\n  ]\n\n  # A reference to the *this* current object.\n  This: [\n    o 'THIS',                                   -> new Value new ThisLiteral $1\n    o '@',                                      -> new Value new ThisLiteral $1\n  ]\n\n  # A reference to a property on *this*.\n  ThisProperty: [\n    o '@ Property',                             -> new Value LOC(1)(new ThisLiteral $1), [LOC(2)(new Access($2))], 'this'\n  ]\n\n  # The array literal.\n  Array: [\n    o '[ ]',                                    -> new Arr []\n    o '[ Elisions ]',                           -> new Arr $2\n    o '[ ArgElisionList OptElisions ]',         -> new Arr [].concat $2, $3\n  ]\n\n  # Inclusive and exclusive range dots.\n  RangeDots: [\n    o '..',                                     -> exclusive: no\n    o '...',                                    -> exclusive: yes\n  ]\n\n  # The CoffeeScript range literal.\n  Range: [\n    o '[ Expression RangeDots Expression ]',      -> new Range $2, $4, if $3.exclusive then 'exclusive' else 'inclusive'\n    o '[ ExpressionLine RangeDots Expression ]',  -> new Range $2, $4, if $3.exclusive then 'exclusive' else 'inclusive'\n  ]\n\n  # Array slice literals.\n  Slice: [\n    o 'Expression RangeDots Expression',        -> new Range $1, $3, if $2.exclusive then 'exclusive' else 'inclusive'\n    o 'Expression RangeDots',                   -> new Range $1, null, if $2.exclusive then 'exclusive' else 'inclusive'\n    o 'ExpressionLine RangeDots Expression',    -> new Range $1, $3, if $2.exclusive then 'exclusive' else 'inclusive'\n    o 'ExpressionLine RangeDots',               -> new Range $1, null, if $2.exclusive then 'exclusive' else 'inclusive'\n    o 'RangeDots Expression',                   -> new Range null, $2, if $1.exclusive then 'exclusive' else 'inclusive'\n    o 'RangeDots',                              -> new Range null, null, if $1.exclusive then 'exclusive' else 'inclusive'\n  ]\n\n  # The **ArgList** is the list of objects passed into a function call\n  # (i.e. comma-separated expressions). Newlines work as well.\n  ArgList: [\n    o 'Arg',                                              -> [$1]\n    o 'ArgList , Arg',                                    -> $1.concat $3\n    o 'ArgList OptComma TERMINATOR Arg',                  -> $1.concat $4\n    o 'INDENT ArgList OptComma OUTDENT',                  -> $2\n    o 'ArgList OptComma INDENT ArgList OptComma OUTDENT', -> $1.concat $4\n  ]\n\n  # Valid arguments are Blocks or Splats.\n  Arg: [\n    o 'Expression'\n    o 'ExpressionLine'\n    o 'Splat'\n    o '...',                                     -> new Expansion\n  ]\n\n  # The **ArgElisionList** is the list of objects, contents of an array literal\n  # (i.e. comma-separated expressions and elisions). Newlines work as well.\n  ArgElisionList: [\n    o 'ArgElision'\n    o 'ArgElisionList , ArgElision',                                          -> $1.concat $3\n    o 'ArgElisionList OptComma TERMINATOR ArgElision',                        -> $1.concat $4\n    o 'INDENT ArgElisionList OptElisions OUTDENT',                            -> $2.concat $3\n    o 'ArgElisionList OptElisions INDENT ArgElisionList OptElisions OUTDENT', -> $1.concat $2, $4, $5\n  ]\n\n  ArgElision: [\n    o 'Arg',                  -> [$1]\n    o 'Elisions Arg',         -> $1.concat $2\n  ]\n\n  OptElisions: [\n    o 'OptComma',             -> []\n    o ', Elisions',           -> [].concat $2\n  ]\n\n  Elisions: [\n    o 'Elision',              -> [$1]\n    o 'Elisions Elision',     -> $1.concat $2\n  ]\n\n  Elision: [\n    o ',',                    -> new Elision\n    o 'Elision TERMINATOR',   -> $1\n  ]\n\n  # Just simple, comma-separated, required arguments (no fancy syntax). We need\n  # this to be separate from the **ArgList** for use in **Switch** blocks, where\n  # having the newlines wouldn't make sense.\n  SimpleArgs: [\n    o 'Expression'\n    o 'ExpressionLine'\n    o 'SimpleArgs , Expression',                -> [].concat $1, $3\n    o 'SimpleArgs , ExpressionLine',            -> [].concat $1, $3\n  ]\n\n  # The variants of *try/catch/finally* exception handling blocks.\n  Try: [\n    o 'TRY Block',                              -> new Try $2\n    o 'TRY Block Catch',                        -> new Try $2, $3\n    o 'TRY Block FINALLY Block',                -> new Try $2, null, $4, LOC(3)(new Literal $3)\n    o 'TRY Block Catch FINALLY Block',          -> new Try $2, $3, $5, LOC(4)(new Literal $4)\n  ]\n\n  # A catch clause names its error and runs a block of code.\n  Catch: [\n    o 'CATCH Identifier Block',                 -> new Catch $3, $2\n    o 'CATCH Object Block',                     -> new Catch $3, LOC(2)(new Value($2))\n    o 'CATCH Block',                            -> new Catch $2\n  ]\n\n  # Throw an exception object.\n  Throw: [\n    o 'THROW Expression',                       -> new Throw $2\n    o 'THROW INDENT Object OUTDENT',            -> new Throw new Value $3\n  ]\n\n  # Parenthetical expressions. Note that the **Parenthetical** is a **Value**,\n  # not an **Expression**, so if you need to use an expression in a place\n  # where only values are accepted, wrapping it in parentheses will always do\n  # the trick.\n  Parenthetical: [\n    o '( Body )',                               -> new Parens $2\n    o '( INDENT Body OUTDENT )',                -> new Parens $3\n  ]\n\n  # The condition portion of a while loop.\n  WhileLineSource: [\n    o 'WHILE ExpressionLine',                       -> new While $2\n    o 'WHILE ExpressionLine WHEN ExpressionLine',   -> new While $2, guard: $4\n    o 'UNTIL ExpressionLine',                       -> new While $2, invert: true\n    o 'UNTIL ExpressionLine WHEN ExpressionLine',   -> new While $2, invert: true, guard: $4\n  ]\n\n  WhileSource: [\n    o 'WHILE Expression',                       -> new While $2\n    o 'WHILE Expression WHEN Expression',       -> new While $2, guard: $4\n    o 'WHILE ExpressionLine WHEN Expression',   -> new While $2, guard: $4\n    o 'UNTIL Expression',                       -> new While $2, invert: true\n    o 'UNTIL Expression WHEN Expression',       -> new While $2, invert: true, guard: $4\n    o 'UNTIL ExpressionLine WHEN Expression',   -> new While $2, invert: true, guard: $4\n  ]\n\n  # The while loop can either be normal, with a block of expressions to execute,\n  # or postfix, with a single expression. There is no do..while.\n  While: [\n    o 'WhileSource Block',                      -> $1.addBody $2\n    o 'WhileLineSource Block',                  -> $1.addBody $2\n    o 'Statement  WhileSource',                 -> (Object.assign $2, postfix: yes).addBody LOC(1) Block.wrap([$1])\n    o 'Expression WhileSource',                 -> (Object.assign $2, postfix: yes).addBody LOC(1) Block.wrap([$1])\n    o 'Loop',                                   -> $1\n  ]\n\n  Loop: [\n    o 'LOOP Block',                             -> new While(LOC(1)(new BooleanLiteral 'true'), isLoop: yes).addBody $2\n    o 'LOOP Expression',                        -> new While(LOC(1)(new BooleanLiteral 'true'), isLoop: yes).addBody LOC(2) Block.wrap [$2]\n  ]\n\n  # Array, object, and range comprehensions, at the most generic level.\n  # Comprehensions can either be normal, with a block of expressions to execute,\n  # or postfix, with a single expression.\n  For: [\n    o 'Statement    ForBody',  -> $2.postfix = yes; $2.addBody $1\n    o 'Expression   ForBody',  -> $2.postfix = yes; $2.addBody $1\n    o 'ForBody      Block',    -> $1.addBody $2\n    o 'ForLineBody  Block',    -> $1.addBody $2\n  ]\n\n  ForBody: [\n    o 'FOR Range',                -> new For [], source: (LOC(2) new Value($2))\n    o 'FOR Range BY Expression',  -> new For [], source: (LOC(2) new Value($2)), step: $4\n    o 'ForStart ForSource',       -> $1.addSource $2\n  ]\n\n  ForLineBody: [\n    o 'FOR Range BY ExpressionLine',  -> new For [], source: (LOC(2) new Value($2)), step: $4\n    o 'ForStart ForLineSource',       -> $1.addSource $2\n  ]\n\n  ForStart: [\n    o 'FOR ForVariables',        -> new For [], name: $2[0], index: $2[1]\n    o 'FOR AWAIT ForVariables',  ->\n        [name, index] = $3\n        new For [], {name, index, await: yes, awaitTag: (LOC(2) new Literal($2))}\n    o 'FOR OWN ForVariables',    ->\n        [name, index] = $3\n        new For [], {name, index, own: yes, ownTag: (LOC(2) new Literal($2))}\n  ]\n\n  # An array of all accepted values for a variable inside the loop.\n  # This enables support for pattern matching.\n  ForValue: [\n    o 'Identifier'\n    o 'ThisProperty'\n    o 'Array',                                  -> new Value $1\n    o 'Object',                                 -> new Value $1\n  ]\n\n  # An array or range comprehension has variables for the current element\n  # and (optional) reference to the current index. Or, *key, value*, in the case\n  # of object comprehensions.\n  ForVariables: [\n    o 'ForValue',                               -> [$1]\n    o 'ForValue , ForValue',                    -> [$1, $3]\n  ]\n\n  # The source of a comprehension is an array or object with an optional guard\n  # clause. If it’s an array comprehension, you can also choose to step through\n  # in fixed-size increments.\n  ForSource: [\n    o 'FORIN Expression',                                           -> source: $2\n    o 'FOROF Expression',                                           -> source: $2, object: yes\n    o 'FORIN Expression WHEN Expression',                           -> source: $2, guard: $4\n    o 'FORIN ExpressionLine WHEN Expression',                       -> source: $2, guard: $4\n    o 'FOROF Expression WHEN Expression',                           -> source: $2, guard: $4, object: yes\n    o 'FOROF ExpressionLine WHEN Expression',                       -> source: $2, guard: $4, object: yes\n    o 'FORIN Expression BY Expression',                             -> source: $2, step:  $4\n    o 'FORIN ExpressionLine BY Expression',                         -> source: $2, step:  $4\n    o 'FORIN Expression WHEN Expression BY Expression',             -> source: $2, guard: $4, step: $6\n    o 'FORIN ExpressionLine WHEN Expression BY Expression',         -> source: $2, guard: $4, step: $6\n    o 'FORIN Expression WHEN ExpressionLine BY Expression',         -> source: $2, guard: $4, step: $6\n    o 'FORIN ExpressionLine WHEN ExpressionLine BY Expression',     -> source: $2, guard: $4, step: $6\n    o 'FORIN Expression BY Expression WHEN Expression',             -> source: $2, step:  $4, guard: $6\n    o 'FORIN ExpressionLine BY Expression WHEN Expression',         -> source: $2, step:  $4, guard: $6\n    o 'FORIN Expression BY ExpressionLine WHEN Expression',         -> source: $2, step:  $4, guard: $6\n    o 'FORIN ExpressionLine BY ExpressionLine WHEN Expression',     -> source: $2, step:  $4, guard: $6\n    o 'FORFROM Expression',                                         -> source: $2, from: yes\n    o 'FORFROM Expression WHEN Expression',                         -> source: $2, guard: $4, from: yes\n    o 'FORFROM ExpressionLine WHEN Expression',                     -> source: $2, guard: $4, from: yes\n  ]\n\n  ForLineSource: [\n    o 'FORIN ExpressionLine',                                       -> source: $2\n    o 'FOROF ExpressionLine',                                       -> source: $2, object: yes\n    o 'FORIN Expression WHEN ExpressionLine',                       -> source: $2, guard: $4\n    o 'FORIN ExpressionLine WHEN ExpressionLine',                   -> source: $2, guard: $4\n    o 'FOROF Expression WHEN ExpressionLine',                       -> source: $2, guard: $4, object: yes\n    o 'FOROF ExpressionLine WHEN ExpressionLine',                   -> source: $2, guard: $4, object: yes\n    o 'FORIN Expression BY ExpressionLine',                         -> source: $2, step:  $4\n    o 'FORIN ExpressionLine BY ExpressionLine',                     -> source: $2, step:  $4\n    o 'FORIN Expression WHEN Expression BY ExpressionLine',         -> source: $2, guard: $4, step: $6\n    o 'FORIN ExpressionLine WHEN Expression BY ExpressionLine',     -> source: $2, guard: $4, step: $6\n    o 'FORIN Expression WHEN ExpressionLine BY ExpressionLine',     -> source: $2, guard: $4, step: $6\n    o 'FORIN ExpressionLine WHEN ExpressionLine BY ExpressionLine', -> source: $2, guard: $4, step: $6\n    o 'FORIN Expression BY Expression WHEN ExpressionLine',         -> source: $2, step:  $4, guard: $6\n    o 'FORIN ExpressionLine BY Expression WHEN ExpressionLine',     -> source: $2, step:  $4, guard: $6\n    o 'FORIN Expression BY ExpressionLine WHEN ExpressionLine',     -> source: $2, step:  $4, guard: $6\n    o 'FORIN ExpressionLine BY ExpressionLine WHEN ExpressionLine', -> source: $2, step:  $4, guard: $6\n    o 'FORFROM ExpressionLine',                                     -> source: $2, from: yes\n    o 'FORFROM Expression WHEN ExpressionLine',                     -> source: $2, guard: $4, from: yes\n    o 'FORFROM ExpressionLine WHEN ExpressionLine',                 -> source: $2, guard: $4, from: yes\n  ]\n\n  Switch: [\n    o 'SWITCH Expression INDENT Whens OUTDENT',                -> new Switch $2, $4\n    o 'SWITCH ExpressionLine INDENT Whens OUTDENT',            -> new Switch $2, $4\n    o 'SWITCH Expression INDENT Whens ELSE Block OUTDENT',     -> new Switch $2, $4, LOC(5,6) $6\n    o 'SWITCH ExpressionLine INDENT Whens ELSE Block OUTDENT', -> new Switch $2, $4, LOC(5,6) $6\n    o 'SWITCH INDENT Whens OUTDENT',                           -> new Switch null, $3\n    o 'SWITCH INDENT Whens ELSE Block OUTDENT',                -> new Switch null, $3, LOC(4,5) $5\n  ]\n\n  Whens: [\n    o 'When',                                   -> [$1]\n    o 'Whens When',                             -> $1.concat $2\n  ]\n\n  # An individual **When** clause, with action.\n  When: [\n    o 'LEADING_WHEN SimpleArgs Block',            -> new SwitchWhen $2, $3\n    o 'LEADING_WHEN SimpleArgs Block TERMINATOR', -> LOC(1, 3) new SwitchWhen $2, $3\n  ]\n\n  # The most basic form of *if* is a condition and an action. The following\n  # if-related rules are broken up along these lines in order to avoid\n  # ambiguity.\n  IfBlock: [\n    o 'IF Expression Block',                    -> new If $2, $3, type: $1\n    o 'IfBlock ELSE IF Expression Block',       -> $1.addElse LOC(3,5) new If $4, $5, type: $3\n  ]\n\n  # The full complement of *if* expressions, including postfix one-liner\n  # *if* and *unless*.\n  If: [\n    o 'IfBlock'\n    o 'IfBlock ELSE Block',                     -> $1.addElse $3\n    o 'Statement  POST_IF Expression',          -> new If $3, LOC(1)(Block.wrap [$1]), type: $2, postfix: true\n    o 'Expression POST_IF Expression',          -> new If $3, LOC(1)(Block.wrap [$1]), type: $2, postfix: true\n  ]\n\n  IfBlockLine: [\n    o 'IF ExpressionLine Block',                  -> new If $2, $3, type: $1\n    o 'IfBlockLine ELSE IF ExpressionLine Block', -> $1.addElse LOC(3,5) new If $4, $5, type: $3\n  ]\n\n  IfLine: [\n    o 'IfBlockLine'\n    o 'IfBlockLine ELSE Block',               -> $1.addElse $3\n    o 'Statement  POST_IF ExpressionLine',    -> new If $3, LOC(1)(Block.wrap [$1]), type: $2, postfix: true\n    o 'Expression POST_IF ExpressionLine',    -> new If $3, LOC(1)(Block.wrap [$1]), type: $2, postfix: true\n  ]\n\n  # Arithmetic and logical operators, working on one or more operands.\n  # Here they are grouped by order of precedence. The actual precedence rules\n  # are defined at the bottom of the page. It would be shorter if we could\n  # combine most of these rules into a single generic *Operand OpSymbol Operand*\n  # -type rule, but in order to make the precedence binding possible, separate\n  # rules are necessary.\n  OperationLine: [\n    o 'UNARY ExpressionLine',                   -> new Op $1, $2\n    o 'DO ExpressionLine',                      -> new Op $1, $2\n    o 'DO_IIFE CodeLine',                       -> new Op $1, $2\n  ]\n\n  Operation: [\n    o 'UNARY Expression',                       -> new Op $1.toString(), $2, undefined, undefined, originalOperator: $1.original\n    o 'DO Expression',                          -> new Op $1, $2\n    o 'UNARY_MATH Expression',                  -> new Op $1, $2\n    o '-     Expression',                      (-> new Op '-', $2), prec: 'UNARY_MATH'\n    o '+     Expression',                      (-> new Op '+', $2), prec: 'UNARY_MATH'\n\n    o 'AWAIT Expression',                       -> new Op $1, $2\n    o 'AWAIT INDENT Object OUTDENT',            -> new Op $1, $3\n\n    o '-- SimpleAssignable',                    -> new Op '--', $2\n    o '++ SimpleAssignable',                    -> new Op '++', $2\n    o 'SimpleAssignable --',                    -> new Op '--', $1, null, true\n    o 'SimpleAssignable ++',                    -> new Op '++', $1, null, true\n\n    # [The existential operator](https://coffeescript.org/#existential-operator).\n    o 'Expression ?',                           -> new Existence $1\n\n    o 'Expression +  Expression',               -> new Op '+' , $1, $3\n    o 'Expression -  Expression',               -> new Op '-' , $1, $3\n\n    o 'Expression MATH     Expression',         -> new Op $2, $1, $3\n    o 'Expression **       Expression',         -> new Op $2, $1, $3\n    o 'Expression SHIFT    Expression',         -> new Op $2, $1, $3\n    o 'Expression COMPARE  Expression',         -> new Op $2.toString(), $1, $3, undefined, originalOperator: $2.original\n    o 'Expression &        Expression',         -> new Op $2, $1, $3\n    o 'Expression ^        Expression',         -> new Op $2, $1, $3\n    o 'Expression |        Expression',         -> new Op $2, $1, $3\n    o 'Expression &&       Expression',         -> new Op $2.toString(), $1, $3, undefined, originalOperator: $2.original\n    o 'Expression ||       Expression',         -> new Op $2.toString(), $1, $3, undefined, originalOperator: $2.original\n    o 'Expression BIN?     Expression',         -> new Op $2, $1, $3\n    o 'Expression RELATION Expression',         -> new Op $2.toString(), $1, $3, undefined, invertOperator: $2.invert?.original ? $2.invert\n\n    o 'SimpleAssignable COMPOUND_ASSIGN\n       Expression',                             -> new Assign $1, $3, $2.toString(), originalContext: $2.original\n    o 'SimpleAssignable COMPOUND_ASSIGN\n       INDENT Expression OUTDENT',              -> new Assign $1, $4, $2.toString(), originalContext: $2.original\n    o 'SimpleAssignable COMPOUND_ASSIGN TERMINATOR\n       Expression',                             -> new Assign $1, $4, $2.toString(), originalContext: $2.original\n  ]\n\n  DoIife: [\n    o 'DO_IIFE Code',                           -> new Op $1 , $2\n  ]\n\n# Precedence\n# ----------\n\n# Operators at the top of this list have higher precedence than the ones lower\n# down. Following these rules is what makes `2 + 3 * 4` parse as:\n#\n#     2 + (3 * 4)\n#\n# And not:\n#\n#     (2 + 3) * 4\noperators = [\n  ['right',     'DO_IIFE']\n  ['left',      '.', '?.', '::', '?::']\n  ['left',      'CALL_START', 'CALL_END']\n  ['nonassoc',  '++', '--']\n  ['left',      '?']\n  ['right',     'UNARY', 'DO']\n  ['right',     'AWAIT']\n  ['right',     '**']\n  ['right',     'UNARY_MATH']\n  ['left',      'MATH']\n  ['left',      '+', '-']\n  ['left',      'SHIFT']\n  ['left',      'RELATION']\n  ['left',      'COMPARE']\n  ['left',      '&']\n  ['left',      '^']\n  ['left',      '|']\n  ['left',      '&&']\n  ['left',      '||']\n  ['left',      'BIN?']\n  ['nonassoc',  'INDENT', 'OUTDENT']\n  ['right',     'YIELD']\n  ['right',     '=', ':', 'COMPOUND_ASSIGN', 'RETURN', 'THROW', 'EXTENDS']\n  ['right',     'FORIN', 'FOROF', 'FORFROM', 'BY', 'WHEN']\n  ['right',     'IF', 'ELSE', 'FOR', 'WHILE', 'UNTIL', 'LOOP', 'SUPER', 'CLASS', 'IMPORT', 'EXPORT', 'DYNAMIC_IMPORT']\n  ['left',      'POST_IF']\n]\n\n# Wrapping Up\n# -----------\n\n# Finally, now that we have our **grammar** and our **operators**, we can create\n# our **Jison.Parser**. We do this by processing all of our rules, recording all\n# terminals (every symbol which does not appear as the name of a rule above)\n# as \"tokens\".\ntokens = []\nfor name, alternatives of grammar\n  grammar[name] = for alt in alternatives\n    for token in alt[0].split ' '\n      tokens.push token unless grammar[token]\n    alt[1] = \"return #{alt[1]}\" if name is 'Root'\n    alt\n\n# Initialize the **Parser** with our list of terminal **tokens**, our **grammar**\n# rules, and the name of the root. Reverse the operators because Jison orders\n# precedence from low to high, and we have it high to low\n# (as in [Yacc](http://dinosaur.compilertools.net/yacc/index.html)).\nexports.parser = new Parser\n  tokens      : tokens.join ' '\n  bnf         : grammar\n  operators   : operators.reverse()\n  startSymbol : 'Root'"
  ]
}