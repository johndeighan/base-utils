{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "test/for-each-file.test.coffee"
  ],
  "names": [],
  "mappings": "AAA2B;AAAA,IAAA;;AAE3B,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,OAD7B;EACsC,GADtC;EAC2C,EAD3C;CAAA,MAAA;;AAGA,OAAA;EAAQ,MAAR;CAAA,MAAA;;AACA,OAAA;EACC,KADD;EACQ,IADR;EACc,QADd;EACwB,OADxB;EACiC,SADjC;EAC4C,QAD5C;CAAA,MAAA;;AAIA,MAAA,GAAS,MAAA,CAAO,OAAO,CAAC,GAAR,CAAA,CAAP,EAVkB;;;AAc3B,CAAC,CAAA,CAAA,GAAA;AACD,MAAA;EAAC,MAAA,GAAS,OAAA,CAAQ,2EAAR;SACT,SAAA,CAAU,MAAV,EAAkB,CAAA,WAAA,CAAA,CACJ,MADI,CAAA;WAAA,CAAA,CAEJ,MAFI,CAAA;WAAA,CAAA,CAGJ,MAHI,CAAA,qBAAA,CAAlB;AAFA,CAAD,CAAA,CAAA,EAd2B;;;AAyB3B,CAAC,CAAA,CAAA,GAAA;AACD,MAAA;EAAC,MAAA,GAAS,OAAA,CAAQ,mBAAR,EAA6B;IACrC,KAAA,EAAO,MAD8B;IAErC,IAAA,EAAM;EAF+B,CAA7B;SAIT,SAAA,CAAU,MAAV,EAAkB,CAAA,OAAA,CAAA,CACR,MADQ,CAAA;OAAA,CAAA,CAER,MAFQ,CAAA;OAAA,CAAA,CAGR,MAHQ,CAAA,qBAAA,CAAlB;AALA,CAAD,CAAA,CAAA,EAzB2B;;;AAuC3B,CAAC,CAAA,CAAA,GAAA;AACD,MAAA;EAAC,MAAA,GAAS,OAAA,CAAQ,mBAAR,EAA6B;IACrC,KAAA,EAAO,MAD8B;IAErC,IAAA,EAAM,oBAF+B;IAGrC,GAAA,EAAK;EAHgC,CAA7B;SAKT,SAAA,CAAU,MAAV,EAAkB,CAAA,WAAA,CAAA,CACJ,MADI,CAAA;WAAA,CAAA,CAEJ,MAFI,CAAA;WAAA,CAAA,CAGJ,MAHI,CAAA,qBAAA,CAAlB;AANA,CAAD,CAAA,CAAA,EAvC2B;;;AAsD3B,CAAC,CAAA,CAAA,GAAA;AACD,MAAA;EAAC,MAAA,GAAS,OAAA,CAAQ,mBAAR,EAA6B;IACrC,KAAA,EAAO,MAD8B;IAErC,IAAA,EAAM,uBAF+B;IAGrC,GAAA,EAAK;EAHgC,CAA7B;SAKT,SAAA,CAAU,MAAV,EAAkB,CAAA,WAAA,CAAA,CACJ,MADI,CAAA;WAAA,CAAA,CAEJ,MAFI,CAAA,uBAAA,CAAlB;AANA,CAAD,CAAA,CAAA,EAtD2B;;;AAoE3B,CAAC,CAAA,CAAA,GAAA;AACD,MAAA;EAAC,MAAA,GAAS,OAAA,CAAQ,mBAAR,EAA6B;IACrC,KAAA,EAAO,MAD8B;IAErC,IAAA,EAAM,uBAF+B;IAGrC,GAAA,EAAK;EAHgC,CAA7B;SAKT,SAAA,CAAU,MAAV,EAAkB,CAAA,8BAAA,CAAA,CACe,MADf,CAAA;8BAAA,CAAA,CAEe,MAFf,CAAA,uBAAA,CAAlB;AANA,CAAD,CAAA,CAAA,EApE2B;;;;AAmF3B,CAAC,CAAA,CAAA,GAAA;AACD,MAAA;EAAC,MAAA,GAAS,OAAA,CAAQ,mBAAR,EAA6B;IACrC,KAAA,EAAO,MAD8B;IAErC,IAAA,EAAM,uBAF+B;IAGrC,GAAA,EAAK;EAHgC,CAA7B;SAKT,QAAA,CAAS,CAAA,CAAA,GAAA;WACR,IAAI,CAAC,KAAL,CAAW,MAAX;EADQ,CAAT;AANA,CAAD,CAAA,CAAA",
  "sourcesContent": [
    "# for-each-file.test.coffee\n\nimport {\n\tundef, defined, notdefined, execCmd, LOG, OL,\n\t} from '@jdeighan/base-utils'\nimport {mkpath} from '@jdeighan/base-utils/fs'\nimport {\n\tequal, like, includes, matches, samelines, succeeds,\n\t} from '@jdeighan/base-utils/utest'\n\ncurdir = mkpath(process.cwd())\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tresult = execCmd('npx for-each-file -debug=list -glob=test/test/**/*.txt -cmd=\"echo <file>\"')\n\tsamelines result, \"\"\"\n\t\tCMD: 'echo˳#{curdir}/test/test/file1.txt'\n\t\tCMD: 'echo˳#{curdir}/test/test/file2.txt'\n\t\tCMD: 'echo˳#{curdir}/test/test/file3.txt'\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tresult = execCmd('npx for-each-file', {\n\t\tdebug: 'list'\n\t\tglob: 'test/test/**/*.txt'\n\t\t})\n\tsamelines result, \"\"\"\n\t\tFILE: '#{curdir}/test/test/file1.txt'\n\t\tFILE: '#{curdir}/test/test/file2.txt'\n\t\tFILE: '#{curdir}/test/test/file3.txt'\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tresult = execCmd('npx for-each-file', {\n\t\tdebug: 'list'\n\t\tglob: 'test/test/**/*.txt'\n\t\tcmd: 'echo <file>'\n\t\t})\n\tsamelines result, \"\"\"\n\t\tCMD: 'echo˳#{curdir}/test/test/file1.txt'\n\t\tCMD: 'echo˳#{curdir}/test/test/file2.txt'\n\t\tCMD: 'echo˳#{curdir}/test/test/file3.txt'\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tresult = execCmd('npx for-each-file', {\n\t\tdebug: 'list'\n\t\tglob: 'test/test/**/*.coffee'\n\t\tcmd: 'echo <file>'\n\t\t})\n\tsamelines result, \"\"\"\n\t\tCMD: 'echo˳#{curdir}/test/test/subdir/test.coffee'\n\t\tCMD: 'echo˳#{curdir}/test/test/test.coffee'\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tresult = execCmd('npx for-each-file', {\n\t\tdebug: 'list'\n\t\tglob: 'test/test/**/*.coffee'\n\t\tcmd: 'coffee -cmb --no-header <file>'\n\t\t})\n\tsamelines result, \"\"\"\n\t\tCMD: 'coffee˳-cmb˳--no-header˳#{curdir}/test/test/subdir/test.coffee'\n\t\tCMD: 'coffee˳-cmb˳--no-header˳#{curdir}/test/test/test.coffee'\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test -debug=json\n\n(() =>\n\tresult = execCmd('npx for-each-file', {\n\t\tdebug: 'json'\n\t\tglob: 'test/test/**/*.coffee'\n\t\tcmd: 'coffee -cmb --no-header <file>'\n\t\t})\n\tsucceeds () =>\n\t\tJSON.parse(result)\n\t)()\n"
  ]
}