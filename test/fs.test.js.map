{
  "version": 3,
  "file": "fs.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\fs.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# fs.test.coffee\n\nimport test from 'ava'\nimport {undef, defined, notdefined} from '@jdeighan/base-utils'\nimport {setDebugging} from '@jdeighan/base-utils/debug'\nimport {mkpath} from '@jdeighan/base-utils/ll-fs'\nimport {\n\tisFile, isDir, mkdirSync, slurp, barf, forEachFileInDir,\n\tforEachItem, forEachLineInFile, FileProcessor,\n\tgetTextFileContents, allFilesIn,\n\t} from '@jdeighan/base-utils/fs'\n\ndir = process.cwd()     # should be root directory of @jdeighan/base-utils\ntestDir = mkpath(dir, 'test')\ntestPath = mkpath(dir, 'test', 'readline.txt')\n\n# ---------------------------------------------------------------------------\n\ntest \"line 21\", (t) => t.truthy(isFile(mkpath(dir, 'package.json')))\ntest \"line 22\", (t) => t.falsy (isFile(mkpath(dir, 'doesNotExist.txt')))\ntest \"line 23\", (t) => t.truthy(isDir(mkpath(dir, 'src')))\ntest \"line 24\", (t) => t.truthy(isDir(mkpath(dir, 'test')))\ntest \"line 25\", (t) => t.falsy (isDir(mkpath(dir, 'doesNotExist')))\n\ntest \"line 27\", (t) => t.truthy(isFile(dir, 'package.json'))\ntest \"line 28\", (t) => t.falsy (isFile(dir, 'doesNotExist.txt'))\ntest \"line 29\", (t) => t.truthy(isDir(dir, 'src'))\ntest \"line 30\", (t) => t.truthy(isDir(dir, 'test'))\ntest \"line 31\", (t) => t.falsy (isDir(dir, 'doesNotExist'))\n\ntest \"line 33\", (t) => t.is slurp(testPath, {maxLines: 2}), \"\"\"\n\tabc\n\tdef\n\t\"\"\"\n\ntest \"line 38\", (t) => t.is slurp(testPath, {maxLines: 3}), \"\"\"\n\tabc\n\tdef\n\tghi\n\t\"\"\"\n\ntest \"line 44\", (t) => t.is slurp(testPath, {maxLines: 1000}), \"\"\"\n\tabc\n\tdef\n\tghi\n\tjkl\n\tmno\n\t\"\"\"\n\n# --- Test without building path first\n\ntest \"line 54\", (t) => t.is slurp(dir, 'test', 'readline.txt', {maxLines: 2}), \"\"\"\n\tabc\n\tdef\n\t\"\"\"\n\ntest \"line 59\", (t) => t.is slurp(dir, 'test', 'readline.txt', {maxLines: 3}), \"\"\"\n\tabc\n\tdef\n\tghi\n\t\"\"\"\n\ntest \"line 65\", (t) => t.is slurp(dir, 'test', 'readline.txt', {maxLines: 1000}), \"\"\"\n\tabc\n\tdef\n\tghi\n\tjkl\n\tmno\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n# --- test FileProcessor\n\n(() =>\n\tclass TestProcessor extends FileProcessor\n\n\t\tconstructor: () ->\n\t\t\tsuper './test'\n\n\t\tbegin: () ->\n\t\t\t# --- We need to clear out hWords each time procAll() is called\n\t\t\t@hWords = {}\n\t\t\treturn\n\n\t\tfilter: (hFileInfo) ->\n\t\t\t{stub, ext} = hFileInfo\n\t\t\treturn (ext == '.txt') && stub.match(/^readline/)\n\n\t\thandleLine: (line) ->\n\t\t\t@hWords[line.toUpperCase()] = true\n\t\t\treturn\n\n\tfp = new TestProcessor()\n\tfp.procAll()\n\ttest \"line 101\", (t) => t.deepEqual(fp.hWords, {\n\t\t'ABC': true\n\t\t'DEF': true\n\t\t'GHI': true\n\t\t'JKL': true\n\t\t'MNO': true\n\t\t'PQR': true\n\t\t})\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test getTextFileContents\n\n(() =>\n\tpath = \"./test/test/file3.txt\"\n\th = getTextFileContents(path)\n\ttest \"line 112\", (t) => t.deepEqual(h, {\n\t\tmetadata: {fName: 'John', lName: 'Deighan'}\n\t\tlLines: ['', 'This is a test']\n\t\t})\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test allFilesIn\n\n# setDebugging 'allFilesIn'\n\n(() =>\n\tlNames = []\n\tfor hFileInfo from allFilesIn('./test/test', {})\n\t\tname = hFileInfo.fileName\n\t\th = {name}\n\t\tObject.assign(h, getTextFileContents(hFileInfo.filePath))\n\t\tlNames.push h\n\n\ttest \"line 99\", (t) => t.deepEqual(lNames, [\n\t\t{name: 'file1.txt', metadata: undef, lLines: ['DONE']}\n\t\t{name: 'file1.zh',  metadata: undef, lLines: ['DONE']}\n\t\t{name: 'file2.txt', metadata: undef, lLines: ['DONE']}\n\t\t{name: 'file2.zh',  metadata: undef, lLines: ['DONE']}\n\t\t{\n\t\t\tname: 'file3.txt'\n\t\t\tmetadata: {fName: 'John', lName: 'Deighan'}\n\t\t\tlLines: ['','This is a test']\n\t\t\t}\n\t\t])\n\n\t)()\n\n"
  ]
}