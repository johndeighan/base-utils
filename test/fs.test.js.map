{
  "version": 3,
  "file": "fs.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\fs.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# fs.test.coffee\n\nimport {utest} from '@jdeighan/base-utils/utest'\nimport {undef, fromJSON, toJSON, LOG} from '@jdeighan/base-utils'\nimport {setDebugging} from '@jdeighan/base-utils/debug'\nimport {\n\tworkingDir, parentDir, myself, mydir, mkpath, isFile,\n\tgetPkgJsonDir, getPkgJsonPath,\n\tslurp, slurpJSON, slurpTAML, slurpPkgJSON,\n\tbarf, barfJSON, barfTAML, barfPkgJSON,\n\tparsePath, getTextFileContents, allFilesIn, allLinesIn,\n\tforEachFileInDir, forEachItem, forEachLineInFile,\n\tFileWriter, FileWriterSync,\n\t} from '@jdeighan/base-utils/fs'\n\n# --- should be root directory of @jdeighan/base-utils\nprojDir = workingDir()\ndir = mydir(import.meta.url)    # project test folder\nsubdir = mkpath(dir, 'test')    # subdir test inside test\nfile = myself(import.meta.url)\ntestPath = mkpath(projDir, 'test', 'readline.txt')\n\n# ---------------------------------------------------------------------------\n\nutest.like parsePath(import.meta.url), {\n\ttype: 'file'\n\troot: 'c:/'\n\tbase: 'fs.test.js'\n\tfileName: 'fs.test.js'\n\tname: 'fs.test'\n\tstub: 'fs.test'\n\text: '.js'\n\tpurpose: 'test'\n\t}\n\nutest.like parsePath(projDir), {\n\tpath: projDir\n\ttype: 'dir'\n\troot: 'c:/'\n\tdir: parentDir(projDir)\n\tbase: 'base-utils'\n\tfileName: 'base-utils'\n\tname: 'base-utils'\n\tstub: 'base-utils'\n\text: ''\n\tpurpose: undef\n\t}\n\nutest.like parsePath(dir), {\n\tpath: dir\n\ttype: 'dir'\n\troot: 'c:/'\n\tdir: parentDir(dir)\n\tbase: 'test'\n\tfileName: 'test'\n\tname: 'test'\n\tstub: 'test'\n\text: ''\n\tpurpose: undef\n\t}\n\nutest.like parsePath(subdir), {\n\tpath: subdir\n\ttype: 'dir'\n\troot: 'c:/'\n\tdir: parentDir(subdir)\n\tbase: 'test'\n\tfileName: 'test'\n\tname: 'test'\n\tstub: 'test'\n\text: ''\n\tpurpose: undef\n\t}\n\nutest.like parsePath(file), {\n\tpath: file\n\ttype: 'file'\n\troot: 'c:/'\n\tdir: parentDir(file)\n\tbase: 'fs.test.js'\n\tfileName: 'fs.test.js'\n\tname: 'fs.test'\n\tstub: 'fs.test'\n\text: '.js'\n\tpurpose: 'test'\n\t}\n\nutest.like parsePath(testPath), {\n\tpath: testPath\n\ttype: 'file'\n\troot: 'c:/'\n\tdir: parentDir(testPath)\n\tbase: 'readline.txt'\n\tfileName: 'readline.txt'\n\tname: 'readline'\n\tstub: 'readline'\n\text: '.txt'\n\tpurpose: undef\n\t}\n\n# ---------------------------------------------------------------------------\n\nutest.equal slurp(testPath, {maxLines: 2}), \"\"\"\n\tabc\n\tdef\n\t\"\"\"\n\nutest.equal slurp(testPath, {maxLines: 3}), \"\"\"\n\tabc\n\tdef\n\tghi\n\t\"\"\"\n\nutest.equal slurp(testPath, {maxLines: 1000}), \"\"\"\n\tabc\n\tdef\n\tghi\n\tjkl\n\tmno\n\t\"\"\"\n\n# --- Test without building path first\n\nutest.equal slurp(projDir, 'test', 'readline.txt', {maxLines: 2}), \"\"\"\n\tabc\n\tdef\n\t\"\"\"\n\nutest.equal slurp(projDir, 'test', 'readline.txt', {maxLines: 3}), \"\"\"\n\tabc\n\tdef\n\tghi\n\t\"\"\"\n\nutest.equal slurp(projDir, 'test', 'readline.txt', {maxLines: 1000}), \"\"\"\n\tabc\n\tdef\n\tghi\n\tjkl\n\tmno\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n# --- test getTextFileContents\n\n(() =>\n\tpath = \"./test/test/file3.txt\"\n\th = getTextFileContents(path)\n\tutest.equal h, {\n\t\tmetadata: {fName: 'John', lName: 'Deighan'}\n\t\tlLines: ['', 'This is a test']\n\t\t}\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test allFilesIn\n\n(() =>\n\tlFiles = []\n\tfor hFileInfo from allFilesIn('./test/test', 'eager')\n\t\tlFiles.push hFileInfo\n\n\tutest.like lFiles, [\n\t\t{fileName: 'file1.txt', metadata: undef, lLines: ['Hello']}\n\t\t{fileName: 'file1.zh',  metadata: undef, lLines: ['你好']}\n\t\t{fileName: 'file2.txt', metadata: undef, lLines: ['Goodbye']}\n\t\t{fileName: 'file2.zh',  metadata: undef, lLines: ['再见']}\n\t\t{\n\t\t\tfileName: 'file3.txt'\n\t\t\tmetadata: {\n\t\t\t\tfName: 'John'\n\t\t\t\tlName: 'Deighan'\n\t\t\t\t}\n\t\t\tlLines: ['', 'This is a test']\n\t\t\t}\n\t\t]\n\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tpath = './test/testfile.txt'\n\n\t# --- put garbage into the file\n\tbarf \"garbage...\", path\n\n\twriter = new FileWriterSync(path)\n\twriter.writeln \"line 1\"\n\twriter.writeln \"line 2\"\n\twriter.end()\n\n\tutest.truthy 165, isFile(path)\n\n\ttext = slurp path\n\tutest.equal 168, text, \"line 1\\nline 2\\n\"\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test forEachItem()\n\n(() =>\n\tcountGenerator = () ->\n\t\tyield 1\n\t\tyield 2\n\t\tyield 3\n\t\tyield 4\n\t\treturn\n\n\tcallback = (item, hContext) =>\n\t\tif (item > 2)\n\t\t\treturn \"#{hContext.label} #{item}\"\n\t\telse\n\t\t\treturn undef\n\n\tresult = forEachItem countGenerator(), callback, {label: 'X'}\n\tutest.equal result, ['X 3', 'X 4']\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test forEachLineInFile()\n\n(() =>\n\t# --- Contents:\n\t#        abc\n\t#        def\n\t#        ghi\n\t#        jkl\n\t#        mno\n\t#\n\n\tcallback = (item, hContext) =>\n\t\tif (item == 'def') || (item == 'jkl')\n\t\t\treturn \"#{hContext.label} #{item}\"\n\t\telse\n\t\t\treturn undef\n\n\tresult = forEachLineInFile testPath, callback, {label: '-->'}\n\tutest.equal result, ['--> def', '--> jkl']\n\t)()\n"
  ]
}