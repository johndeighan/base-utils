{
  "version": 3,
  "file": "fs.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\fs.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# fs.test.coffee\n\nimport test from 'ava'\nimport {\n\tundef, defined, notdefined, LOG,\n\t} from '@jdeighan/base-utils'\nimport {setDebugging} from '@jdeighan/base-utils/debug'\nimport {mkpath} from '@jdeighan/base-utils/ll-fs'\nimport {\n\tresolve, pathType,\n\tgetPkgJsonDir, getPkgJsonPath,\n\tfileExists, isFile, rmFile,\n\tdirExists, isDir, mkdir, rmDir,\n\tfromJSON, toJSON,\n\tslurp, slurpJSON, slurpTAML, slurpPkgJSON,\n\tbarf, barfJSON, barfTAML, barfPkgJSON,\n\tparseSource, getTextFileContents, allFilesIn, allLinesIn,\n\tforEachFileInDir, forEachItem, forEachLineInFile,\n\tFileWriter, FileWriterSync, FileProcessor,\n\t} from '@jdeighan/base-utils/fs'\n\ndir = process.cwd()     # should be root directory of @jdeighan/base-utils\ntestDir = mkpath(dir, 'test')\ntestPath = mkpath(dir, 'test', 'readline.txt')\n\n# ---------------------------------------------------------------------------\n# --- test pathType\n\ntest \"line 29\", (t) => t.throws () => pathType(42)\ntest \"line 30\", (t) => t.is pathType('.'), 'dir'\ntest \"line 31\", (t) => t.is pathType('./package.json'), 'file'\ntest \"line 32\", (t) => t.is pathType('./package2.json'), 'missing'\n\ntest \"line 34\", (t) => t.throws () => pathType(['a'])\ntest \"line 35\", (t) => t.is pathType('.', 'test'), 'dir'\ntest \"line 36\", (t) => t.is pathType('.','package.json'), 'file'\ntest \"line 37\", (t) => t.is pathType('.','package2.json'), 'missing'\n\n# ---------------------------------------------------------------------------\n\ntest \"line 41\", (t) => t.truthy(isFile(mkpath(dir, 'package.json')))\ntest \"line 42\", (t) => t.falsy (isFile(mkpath(dir, 'doesNotExist.txt')))\ntest \"line 43\", (t) => t.truthy(isDir(mkpath(dir, 'src')))\ntest \"line 44\", (t) => t.truthy(isDir(mkpath(dir, 'test')))\ntest \"line 45\", (t) => t.falsy (isDir(mkpath(dir, 'doesNotExist')))\n\ntest \"line 47\", (t) => t.is slurp(testPath, {maxLines: 2}), \"\"\"\n\tabc\n\tdef\n\t\"\"\"\n\ntest \"line 52\", (t) => t.is slurp(testPath, {maxLines: 3}), \"\"\"\n\tabc\n\tdef\n\tghi\n\t\"\"\"\n\ntest \"line 58\", (t) => t.is slurp(testPath, {maxLines: 1000}), \"\"\"\n\tabc\n\tdef\n\tghi\n\tjkl\n\tmno\n\t\"\"\"\n\n# --- Test without building path first\n\ntest \"line 68\", (t) => t.is slurp(dir, 'test', 'readline.txt', {maxLines: 2}), \"\"\"\n\tabc\n\tdef\n\t\"\"\"\n\ntest \"line 73\", (t) => t.is slurp(dir, 'test', 'readline.txt', {maxLines: 3}), \"\"\"\n\tabc\n\tdef\n\tghi\n\t\"\"\"\n\ntest \"line 79\", (t) => t.is slurp(dir, 'test', 'readline.txt', {maxLines: 1000}), \"\"\"\n\tabc\n\tdef\n\tghi\n\tjkl\n\tmno\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n# --- test FileProcessor\n\n(() =>\n\tclass TestProcessor extends FileProcessor\n\n\t\tconstructor: () ->\n\t\t\tsuper './test'\n\n\t\tbegin: () ->\n\t\t\t# --- We need to clear out hWords each time go() is called\n\t\t\t@hWords = {}\n\t\t\treturn\n\n\t\tfilter: (hFileInfo) ->\n\t\t\t{stub, ext} = hFileInfo\n\t\t\treturn (ext == '.txt') && stub.match(/^readline/)\n\n\t\thandleLine: (line) ->\n\t\t\t@hWords[line.toUpperCase()] = true\n\t\t\treturn\n\n\tfp = new TestProcessor()\n\tfp.go()\n\ttest \"line 111\", (t) => t.deepEqual(fp.hWords, {\n\t\t'ABC': true\n\t\t'DEF': true\n\t\t'GHI': true\n\t\t'JKL': true\n\t\t'MNO': true\n\t\t'PQR': true\n\t\t})\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test getTextFileContents\n\n(() =>\n\tpath = \"./test/test/file3.txt\"\n\th = getTextFileContents(path)\n\ttest \"line 128\", (t) => t.deepEqual(h, {\n\t\tmetadata: {fName: 'John', lName: 'Deighan'}\n\t\tlLines: ['', 'This is a test']\n\t\t})\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test allFilesIn\n\n(() =>\n\tlFiles = []\n\tfor hFileInfo from allFilesIn('./test/test', {eager: true})\n\t\tlFiles.push hFileInfo\n\n\ttest \"line 142\", (t) => t.like(lFiles, [\n\t\t{fileName: 'file1.txt', metadata: undef, lLines: ['DONE']}\n\t\t{fileName: 'file1.zh',  metadata: undef, lLines: ['DONE']}\n\t\t{fileName: 'file2.txt', metadata: undef, lLines: ['DONE']}\n\t\t{fileName: 'file2.zh',  metadata: undef, lLines: ['DONE']}\n\t\t{\n\t\t\tfileName: 'file3.txt'\n\t\t\tmetadata: {fName: 'John', lName: 'Deighan'}\n\t\t\tlLines: ['','This is a test']\n\t\t\t}\n\t\t])\n\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tpath = './test/testfile.txt'\n\n\t# --- put garbage into the file\n\tbarf \"garbage...\", path\n\n\twriter = new FileWriterSync(path)\n\twriter.writeln \"line 1\"\n\twriter.writeln \"line 2\"\n\twriter.end()\n\n\ttest \"line 169\", (t) => t.truthy(isFile(path))\n\n\ttext = slurp path\n\ttest \"line 172\", (t) => t.is(text, \"line 1\\nline 2\\n\")\n\t)()\n"
  ]
}