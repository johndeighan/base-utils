{
  "version": 3,
  "file": "fs.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\fs.test.coffee"
  ],
  "names": [],
  "mappings": "AAAgB;AAAA,IAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,MAAA,EAAA;;AAEhB,OAAA;EAAQ,CAAR;CAAA,MAAA;;AACA,OAAA;EACC,KADD;EACQ,QADR;EACkB,MADlB;EAC0B,GAD1B;EAC+B,KAD/B;EACsC,MADtC;CAAA,MAAA;;AAGA,OAAA;EAAQ,YAAR;CAAA,MAAA;;AACA,OAAA;EACC,UADD;EACa,SADb;EACwB,MADxB;EACgC,KADhC;EACuC,MADvC;EAC+C,MAD/C;EAEC,aAFD;EAEgB,cAFhB;EAGC,KAHD;EAGQ,SAHR;EAGmB,SAHnB;EAG8B,YAH9B;EAIC,IAJD;EAIO,QAJP;EAIiB,QAJjB;EAI2B,WAJ3B;EAKC,SALD;EAKY,mBALZ;EAKiC,UALjC;EAMC,UAND;EAMa,gBANb;EAM+B,iBAN/B;EAOC,WAPD;EAOc,UAPd;CAAA,MAAA,0BAPgB;;;AAkBhB,OAAA,GAAU,UAAA,CAAA;;AACV,GAAA,GAAM,KAAA,CAAM,MAAO,CAAA,IAAI,CAAC,GAAlB,EAnBU;;AAoBhB,MAAA,GAAS,MAAA,CAAO,GAAP,EAAY,MAAZ,EApBO;;AAqBhB,IAAA,GAAO,MAAA,CAAO,MAAO,CAAA,IAAI,CAAC,GAAnB;;AACP,QAAA,GAAW,MAAA,CAAO,OAAP,EAAgB,MAAhB,EAAwB,cAAxB,EAtBK;;;;AA2BhB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,MAAA,EAAA;EAAC,IAAA,GAAO;EACP,MAAA,GAAS,KAAK,CAAC,IAAN,CAAW,UAAA,CAAW,IAAX,CAAX;SACT,CAAC,CAAC,KAAF,CAAQ,MAAR,EAAgB,CACf,KADe,EAEf,KAFe,EAGf,EAHe,EAIf,KAJe,EAKf,KALe,CAAhB;AAHA,CAAD,CAAA,CAAA,EA3BgB;;;AAyChB,CAAC,CAAC,IAAF,CAAO,SAAA,CAAU,MAAO,CAAA,IAAI,CAAC,GAAtB,CAAP,EAAmC;EAClC,IAAA,EAAM,MAD4B;EAElC,IAAA,EAAM,KAF4B;EAGlC,IAAA,EAAM,YAH4B;EAIlC,QAAA,EAAU,YAJwB;EAKlC,IAAA,EAAM,SAL4B;EAMlC,IAAA,EAAM,SAN4B;EAOlC,GAAA,EAAK,KAP6B;EAQlC,OAAA,EAAS;AARyB,CAAnC;;AAWA,CAAC,CAAC,IAAF,CAAO,SAAA,CAAU,OAAV,CAAP,EAA2B;EAC1B,IAAA,EAAM,OADoB;EAE1B,IAAA,EAAM,KAFoB;EAG1B,IAAA,EAAM,KAHoB;EAI1B,GAAA,EAAK,SAAA,CAAU,OAAV,CAJqB;EAK1B,IAAA,EAAM,YALoB;EAM1B,QAAA,EAAU,YANgB;EAO1B,IAAA,EAAM,YAPoB;EAQ1B,IAAA,EAAM,YARoB;EAS1B,GAAA,EAAK,EATqB;EAU1B,OAAA,EAAS;AAViB,CAA3B;;AAaA,CAAC,CAAC,IAAF,CAAO,SAAA,CAAU,GAAV,CAAP,EAAuB;EACtB,IAAA,EAAM,GADgB;EAEtB,IAAA,EAAM,KAFgB;EAGtB,IAAA,EAAM,KAHgB;EAItB,GAAA,EAAK,SAAA,CAAU,GAAV,CAJiB;EAKtB,IAAA,EAAM,MALgB;EAMtB,QAAA,EAAU,MANY;EAOtB,IAAA,EAAM,MAPgB;EAQtB,IAAA,EAAM,MARgB;EAStB,GAAA,EAAK,EATiB;EAUtB,OAAA,EAAS;AAVa,CAAvB;;AAaA,CAAC,CAAC,IAAF,CAAO,SAAA,CAAU,MAAV,CAAP,EAA0B;EACzB,IAAA,EAAM,MADmB;EAEzB,IAAA,EAAM,KAFmB;EAGzB,IAAA,EAAM,KAHmB;EAIzB,GAAA,EAAK,SAAA,CAAU,MAAV,CAJoB;EAKzB,IAAA,EAAM,MALmB;EAMzB,QAAA,EAAU,MANe;EAOzB,IAAA,EAAM,MAPmB;EAQzB,IAAA,EAAM,MARmB;EASzB,GAAA,EAAK,EAToB;EAUzB,OAAA,EAAS;AAVgB,CAA1B;;AAaA,CAAC,CAAC,IAAF,CAAO,SAAA,CAAU,IAAV,CAAP,EAAwB;EACvB,IAAA,EAAM,IADiB;EAEvB,IAAA,EAAM,MAFiB;EAGvB,IAAA,EAAM,KAHiB;EAIvB,GAAA,EAAK,SAAA,CAAU,IAAV,CAJkB;EAKvB,IAAA,EAAM,YALiB;EAMvB,QAAA,EAAU,YANa;EAOvB,IAAA,EAAM,SAPiB;EAQvB,IAAA,EAAM,SARiB;EASvB,GAAA,EAAK,KATkB;EAUvB,OAAA,EAAS;AAVc,CAAxB;;AAaA,CAAC,CAAC,IAAF,CAAO,SAAA,CAAU,QAAV,CAAP,EAA4B;EAC3B,IAAA,EAAM,QADqB;EAE3B,IAAA,EAAM,MAFqB;EAG3B,IAAA,EAAM,KAHqB;EAI3B,GAAA,EAAK,SAAA,CAAU,QAAV,CAJsB;EAK3B,IAAA,EAAM,cALqB;EAM3B,QAAA,EAAU,cANiB;EAO3B,IAAA,EAAM,UAPqB;EAQ3B,IAAA,EAAM,UARqB;EAS3B,GAAA,EAAK,MATsB;EAU3B,OAAA,EAAS;AAVkB,CAA5B,EAxGgB;;;AAuHhB,CAAC,CAAC,KAAF,CAAQ,KAAA,CAAM,QAAN,EAAgB;EAAC,QAAA,EAAU;AAAX,CAAhB,CAAR,EAAwC,CAAA;GAAA,CAAxC;;AAKA,CAAC,CAAC,KAAF,CAAQ,KAAA,CAAM,QAAN,EAAgB;EAAC,QAAA,EAAU;AAAX,CAAhB,CAAR,EAAwC,CAAA;;GAAA,CAAxC;;AAMA,CAAC,CAAC,KAAF,CAAQ,KAAA,CAAM,QAAN,EAAgB;EAAC,QAAA,EAAU;AAAX,CAAhB,CAAR,EAA2C,CAAA;;;;GAAA,CAA3C;;AAQA,CAAC,CAAC,KAAF,CAAQ,KAAA,CAAM,QAAN,EAAgB,YAAhB,CAAR,EAAuC,CAAA;;GAAA,CAAvC,EA1IgB;;;;AAmJhB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,CAAA,EAAA;EAAC,IAAA,GAAO;EACP,CAAA,GAAI,mBAAA,CAAoB,IAApB;SACJ,CAAC,CAAC,KAAF,CAAQ,CAAR,EAAW;IACV,QAAA,EAAU;MAAC,KAAA,EAAO,MAAR;MAAgB,KAAA,EAAO;IAAvB,CADA;IAEV,MAAA,EAAQ,CAAC,EAAD,EAAK,gBAAL;EAFE,CAAX;AAHA,CAAD,CAAA,CAAA,EAnJgB;;;;AA+JhB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,SAAA,EAAA,MAAA,EAAA;EAAC,MAAA,GAAS;AACT;EAAA,KAAA,gBAAA;IACC,MAAM,CAAC,IAAP,CAAY,SAAZ;EADD;SAGA,CAAC,CAAC,IAAF,CAAO,MAAP,EAAe;IACd;MAAC,QAAA,EAAU,WAAX;MAAwB,QAAA,EAAU,KAAlC;MAAyC,MAAA,EAAQ,CAAC,OAAD;IAAjD,CADc;IAEd;MAAC,QAAA,EAAU,UAAX;MAAwB,QAAA,EAAU,KAAlC;MAAyC,MAAA,EAAQ,CAAC,IAAD;IAAjD,CAFc;IAGd;MAAC,QAAA,EAAU,WAAX;MAAwB,QAAA,EAAU,KAAlC;MAAyC,MAAA,EAAQ,CAAC,SAAD;IAAjD,CAHc;IAId;MAAC,QAAA,EAAU,UAAX;MAAwB,QAAA,EAAU,KAAlC;MAAyC,MAAA,EAAQ,CAAC,IAAD;IAAjD,CAJc;IAKd;MACC,QAAA,EAAU,WADX;MAEC,QAAA,EAAU;QACT,KAAA,EAAO,MADE;QAET,KAAA,EAAO;MAFE,CAFX;MAMC,MAAA,EAAQ,CAAC,EAAD;IAAK,gBAAL;IANT,CALc;GAAf;AALA,CAAD,CAAA,CAAA,EA/JgB;;;;AAwLhB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,SAAA,EAAA,QAAA,EAAA,MAAA,EAAA;EAAC,MAAA,GAAS;EACT,QAAA,GAAW;IACV,KAAA,EAAO,IADG;IAEV,MAAA,EAAQ;EAFE;AAIX;EAAA,KAAA,gBAAA;IACC,MAAM,CAAC,IAAP,CAAY,SAAZ;EADD;SAGA,CAAC,CAAC,IAAF,CAAO,MAAP,EAAe;IACd;MAAC,QAAA,EAAU,WAAX;MAAwB,QAAA,EAAU,KAAlC;MAAyC,MAAA,EAAQ,CAAC,OAAD;IAAjD,CADc;IAEd;MAAC,QAAA,EAAU,WAAX;MAAwB,QAAA,EAAU,KAAlC;MAAyC,MAAA,EAAQ,CAAC,SAAD;IAAjD,CAFc;IAGd;MACC,QAAA,EAAU,WADX;MAEC,QAAA,EAAU;QACT,KAAA,EAAO,MADE;QAET,KAAA,EAAO;MAFE,CAFX;MAMC,MAAA,EAAQ,CAAC,EAAD;IAAK,gBAAL;IANT,CAHc;GAAf;AATA,CAAD,CAAA,CAAA,EAxLgB;;;;AAmNhB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,QAAA,EAAA,MAAA;;;;;;;;EAQC,QAAA,GAAW,CAAC,IAAD,EAAO,QAAP,CAAA,GAAA;IACV,IAAG,CAAC,IAAA,KAAQ,KAAT,CAAA,IAAmB,CAAC,IAAA,KAAQ,KAAT,CAAtB;AACC,aAAO,CAAA,CAAA,CAAG,QAAQ,CAAC,KAAZ,EAAA,CAAA,CAAqB,IAArB,CAAA,EADR;KAAA,MAAA;AAGC,aAAO,MAHR;;EADU;EAMX,MAAA,GAAS,iBAAA,CAAkB,QAAlB,EAA4B,QAA5B,EAAsC;IAAC,KAAA,EAAO;EAAR,CAAtC;SACT,CAAC,CAAC,KAAF,CAAQ,MAAR,EAAgB,CAAC,SAAD,EAAY,SAAZ,CAAhB;AAhBA,CAAD,CAAA,CAAA,EAnNgB;;;;AAyOhB,KAAA,GAAQ;;AACR,CAAC,CAAC,KAAF,CAAQ,WAAA,CAAY,KAAZ,EAAmB,UAAnB,CAA8B,CAAC,MAAvC,EAA+C,CAA/C;;AACA,CAAC,CAAC,KAAF,CAAQ,WAAA,CAAY,KAAZ,EAAmB,MAAnB,CAA0B,CAAC,MAAnC,EAA2C,CAA3C;;AACA,CAAC,CAAC,KAAF,CAAQ,WAAA,CAAY,KAAZ,EAAmB,GAAnB,CAAuB,CAAC,MAAhC,EAAwC,CAAxC;;AACA,CAAC,CAAC,KAAF,CAAQ,WAAA,CAAY,KAAZ,EAAmB,GAAnB,EAAwB,WAAxB,CAAoC,CAAC,MAA7C,EAAqD,CAArD;;AACA,CAAC,CAAC,KAAF,CAAQ,WAAA,CAAY,KAAZ,EAAmB,GAAnB,EAAwB,UAAxB,CAAmC,CAAC,MAA5C,EAAoD,CAApD,EA9OgB;;;AAkPhB,CAAC,CAAA,CAAA,GAAA;AAED,MAAA,SAAA,EAAA,MAAA,EAAA,IAAA,EAAA;EAAC,MAAA,GAAS;EAET,SAAA,GAAY;AACZ;EAAA,KAAA,WAAA;IACC,MAAM,CAAC,IAAP,CAAY,IAAZ;EADD;SAGA,CAAC,CAAC,KAAF,CAAQ,MAAR,EAAgB,CAAC,KAAD,EAAQ,KAAR,EAAe,EAAf,EAAmB,KAAnB,EAA0B,KAA1B,CAAhB;AARA,CAAD,CAAA,CAAA,EAlPgB;;;;;AAiQhB,CAAC,CAAA,CAAA,GAAA;AAED,MAAA,SAAA,EAAA,IAAA,EAAA;EAAC,IAAA,GAAO,CAAC,IAAD,EAAO,QAAP,CAAA,GAAA;IACN,IAAI,IAAA,KAAQ,EAAZ;AACC,aAAO,MADR;KAAA,MAAA;AAGC,aAAO,CAAA,CAAA,CAAG,QAAQ,CAAC,MAAZ,CAAA,CAAA,CAAqB,IAAI,CAAC,WAAL,CAAA,CAArB,CAAA,EAHR;;EADM;EAMP,SAAA,GAAY;EACZ,MAAA,GAAS,iBAAA,CAAkB,SAAlB,EAA6B,IAA7B,EAAmC;IAAC,MAAA,EAAQ;EAAT,CAAnC;SAET,CAAC,CAAC,KAAF,CAAQ,MAAR,EAAgB,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,CAAhB;AAXA,CAAD,CAAA,CAAA,EAjQgB;;;;;AAmRhB,CAAC,CAAA,CAAA,GAAA;AAED,MAAA,SAAA,EAAA,IAAA,EAAA;EAAC,IAAA,GAAO,CAAC,IAAD,EAAO,QAAP,CAAA,GAAA;IACN,IAAI,IAAA,KAAQ,EAAZ;AACC,aAAO,MADR;KAAA,MAAA;AAGC,aAAO,CAAA,CAAA,CAAG,QAAQ,CAAC,MAAZ,CAAA,CAAA,CAAqB,IAAI,CAAC,WAAL,CAAA,CAArB,CAAA,EAHR;;EADM;EAMP,SAAA,GAAY;EACZ,MAAA,GAAS,iBAAA,CAAkB,SAAlB,EAA6B,IAA7B,EAAmC;IAAC,MAAA,EAAQ;EAAT,CAAnC;SAET,CAAC,CAAC,KAAF,CAAQ,MAAR,EAAgB,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,CAAhB;AAXA,CAAD,CAAA,CAAA,EAnRgB;;;;AAoShB,CAAC,CAAA,CAAA,GAAA;AAED,MAAA,SAAA,EAAA,IAAA,EAAA;EAAC,IAAA,GAAO,CAAC,IAAD,EAAO,QAAP,CAAA,GAAA;IACN,IAAI,IAAA,KAAQ,EAAZ;MACC,MAAM,OADP;KAAA,MAAA;AAGC,aAAO,CAAA,CAAA,CAAG,QAAQ,CAAC,MAAZ,CAAA,CAAA,CAAqB,IAAI,CAAC,WAAL,CAAA,CAArB,CAAA,EAHR;;EADM;EAMP,SAAA,GAAY;EACZ,MAAA,GAAS,iBAAA,CAAkB,SAAlB,EAA6B,IAA7B,EAAmC;IAAC,MAAA,EAAQ;EAAT,CAAnC;SAET,CAAC,CAAC,KAAF,CAAQ,MAAR,EAAgB,CAAC,OAAD,EAAU,OAAV,CAAhB;AAXA,CAAD,CAAA,CAAA,EApSgB;;;AAoThB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,IAAA,EAAA,IAAA,EAAA,MAAA;;EACC,IAAA,GAAO;EACP,IAAA,CAAK,YAAL,EAAmB,IAAnB;EAEA,MAAA,GAAS,IAAI,UAAJ,CAAe,IAAf;EACT,MAAM,CAAC,OAAP,CAAe,QAAf;EACA,MAAM,CAAC,OAAP,CAAe,QAAf;EACA,MAAM,CAAC,KAAP,CAAA;EAEA,CAAC,CAAC,MAAF,CAAS,MAAA,CAAO,IAAP,CAAT;EAEA,IAAA,GAAO,KAAA,CAAM,IAAN;SACP,CAAC,CAAC,KAAF,CAAQ,IAAR,EAAc,kBAAd;AAbA,CAAD,CAAA,CAAA,EApTgB;;;AAsUhB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,IAAA,EAAA,IAAA,EAAA,MAAA;;EACC,IAAA,GAAO;EACP,IAAA,CAAK,YAAL,EAAmB,IAAnB;EAEA,MAAA,GAAS,IAAI,UAAJ,CAAe,IAAf;EACT,MAAM,CAAC,OAAP,CAAe,QAAf;EACA,MAAM,CAAC,OAAP,CAAe,QAAf;EACA,MAAM,CAAC,KAAP,CAAA;EAEA,CAAC,CAAC,MAAF,CAAS,MAAA,CAAO,IAAP,CAAT;EAEA,IAAA,GAAO,KAAA,CAAM,IAAN;SACP,CAAC,CAAC,KAAF,CAAQ,KAAA,CAAM,IAAN,CAAR,EAAqB,CAAA;MAAA,CAArB;AAbA,CAAD,CAAA,CAAA,EAtUgB;;;AA2VhB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,IAAA,EAAA,IAAA,EAAA,MAAA;;EACC,IAAA,GAAO;EACP,IAAA,CAAK,YAAL,EAAmB,IAAnB;EAEA,MAAA,GAAS,IAAI,UAAJ,CAAe,IAAf;EACT,MAAM,CAAC,OAAP,CAAe,QAAf,EAAyB,cAAzB;EACA,MAAM,CAAC,OAAP,CAAe,QAAf,EAAyB,cAAzB;EACA,MAAM,CAAC,KAAP,CAAA;EAEA,CAAC,CAAC,MAAF,CAAS,MAAA,CAAO,IAAP,CAAT;EAEA,IAAA,GAAO,KAAA,CAAM,IAAN;SACP,CAAC,CAAC,KAAF,CAAQ,IAAR,EAAc,0CAAd;AAbA,CAAD,CAAA,CAAA,EA3VgB;;;AA6WhB,CAAC,KAAA,CAAA,CAAA,GAAA;AACD,MAAA,IAAA,EAAA,IAAA,EAAA,MAAA;;EACC,IAAA,GAAO;EACP,IAAA,CAAK,YAAL,EAAmB,IAAnB;EAEA,MAAA,GAAS,IAAI,UAAJ,CAAe,IAAf,EAAqB;IAAC,KAAA,EAAO;EAAR,CAArB;EACT,MAAM,MAAM,CAAC,OAAP,CAAe,QAAf;EACN,MAAM,MAAM,CAAC,OAAP,CAAe,QAAf;EACN,MAAM,MAAM,CAAC,KAAP,CAAA;EAEN,CAAC,CAAC,MAAF,CAAS,MAAA,CAAO,IAAP,CAAT;EAEA,IAAA,GAAO,KAAA,CAAM,IAAN;SACP,CAAC,CAAC,KAAF,CAAQ,IAAR,EAAc,kBAAd;AAbA,CAAD,CAAA,CAAA",
  "sourcesContent": [
    "# fs.test.coffee\n\nimport {u} from '@jdeighan/base-utils/utest'\nimport {\n\tundef, fromJSON, toJSON, LOG, chomp, jsType,\n\t} from '@jdeighan/base-utils'\nimport {setDebugging} from '@jdeighan/base-utils/debug'\nimport {\n\tworkingDir, parentDir, myself, mydir, mkpath, isFile,\n\tgetPkgJsonDir, getPkgJsonPath,\n\tslurp, slurpJSON, slurpTAML, slurpPkgJSON,\n\tbarf, barfJSON, barfTAML, barfPkgJSON,\n\tparsePath, getTextFileContents, allFilesIn,\n\tallLinesIn, forEachFileInDir, forEachLineInFile,\n\tdirContents, FileWriter,\n\t} from '@jdeighan/base-utils/fs'\n\n# --- should be root directory of @jdeighan/base-utils\nprojDir = workingDir()\ndir = mydir(import.meta.url)    # project test folder\nsubdir = mkpath(dir, 'test')    # subdir test inside test\nfile = myself(import.meta.url)\ntestPath = mkpath(projDir, 'test', 'readline.txt')\n\n# ---------------------------------------------------------------------------\n# --- test allLinesIn()\n\n(() =>\n\tpath = './test/readline3.txt'\n\tlLines = Array.from allLinesIn(path)\n\tu.equal lLines, [\n\t\t'ghi'\n\t\t'jkl'\n\t\t''\n\t\t'mno'\n\t\t'pqr'\n\t\t]\n\t)()\n\n# ---------------------------------------------------------------------------\n\nu.like parsePath(import.meta.url), {\n\ttype: 'file'\n\troot: 'c:/'\n\tbase: 'fs.test.js'\n\tfileName: 'fs.test.js'\n\tname: 'fs.test'\n\tstub: 'fs.test'\n\text: '.js'\n\tpurpose: 'test'\n\t}\n\nu.like parsePath(projDir), {\n\tpath: projDir\n\ttype: 'dir'\n\troot: 'c:/'\n\tdir: parentDir(projDir)\n\tbase: 'base-utils'\n\tfileName: 'base-utils'\n\tname: 'base-utils'\n\tstub: 'base-utils'\n\text: ''\n\tpurpose: undef\n\t}\n\nu.like parsePath(dir), {\n\tpath: dir\n\ttype: 'dir'\n\troot: 'c:/'\n\tdir: parentDir(dir)\n\tbase: 'test'\n\tfileName: 'test'\n\tname: 'test'\n\tstub: 'test'\n\text: ''\n\tpurpose: undef\n\t}\n\nu.like parsePath(subdir), {\n\tpath: subdir\n\ttype: 'dir'\n\troot: 'c:/'\n\tdir: parentDir(subdir)\n\tbase: 'test'\n\tfileName: 'test'\n\tname: 'test'\n\tstub: 'test'\n\text: ''\n\tpurpose: undef\n\t}\n\nu.like parsePath(file), {\n\tpath: file\n\ttype: 'file'\n\troot: 'c:/'\n\tdir: parentDir(file)\n\tbase: 'fs.test.js'\n\tfileName: 'fs.test.js'\n\tname: 'fs.test'\n\tstub: 'fs.test'\n\text: '.js'\n\tpurpose: 'test'\n\t}\n\nu.like parsePath(testPath), {\n\tpath: testPath\n\ttype: 'file'\n\troot: 'c:/'\n\tdir: parentDir(testPath)\n\tbase: 'readline.txt'\n\tfileName: 'readline.txt'\n\tname: 'readline'\n\tstub: 'readline'\n\text: '.txt'\n\tpurpose: undef\n\t}\n\n# ---------------------------------------------------------------------------\n\nu.equal slurp(testPath, {maxLines: 2}), \"\"\"\n\tabc\n\tdef\n\t\"\"\"\n\nu.equal slurp(testPath, {maxLines: 3}), \"\"\"\n\tabc\n\tdef\n\tghi\n\t\"\"\"\n\nu.equal slurp(testPath, {maxLines: 1000}), \"\"\"\n\tabc\n\tdef\n\tghi\n\tjkl\n\tmno\n\t\"\"\"\n\nu.equal slurp(testPath, 'maxLines=3'), \"\"\"\n\tabc\n\tdef\n\tghi\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n# --- test getTextFileContents\n\n(() =>\n\tpath = \"./test/test/file3.txt\"\n\th = getTextFileContents(path)\n\tu.equal h, {\n\t\tmetadata: {fName: 'John', lName: 'Deighan'}\n\t\tlLines: ['', 'This is a test']\n\t\t}\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test allFilesIn\n\n(() =>\n\tlFiles = []\n\tfor hFileInfo from allFilesIn('./test/test', 'eager')\n\t\tlFiles.push hFileInfo\n\n\tu.like lFiles, [\n\t\t{fileName: 'file1.txt', metadata: undef, lLines: ['Hello']}\n\t\t{fileName: 'file1.zh',  metadata: undef, lLines: ['你好']}\n\t\t{fileName: 'file2.txt', metadata: undef, lLines: ['Goodbye']}\n\t\t{fileName: 'file2.zh',  metadata: undef, lLines: ['再见']}\n\t\t{\n\t\t\tfileName: 'file3.txt'\n\t\t\tmetadata: {\n\t\t\t\tfName: 'John'\n\t\t\t\tlName: 'Deighan'\n\t\t\t\t}\n\t\t\tlLines: ['', 'This is a test']\n\t\t\t}\n\t\t]\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test allFilesIn with regexp\n\n(() =>\n\tlFiles = []\n\thOptions = {\n\t\teager: true\n\t\tregexp: /\\.txt$/\n\t\t}\n\tfor hFileInfo from allFilesIn('./test/test', hOptions)\n\t\tlFiles.push hFileInfo\n\n\tu.like lFiles, [\n\t\t{fileName: 'file1.txt', metadata: undef, lLines: ['Hello']}\n\t\t{fileName: 'file2.txt', metadata: undef, lLines: ['Goodbye']}\n\t\t{\n\t\t\tfileName: 'file3.txt'\n\t\t\tmetadata: {\n\t\t\t\tfName: 'John'\n\t\t\t\tlName: 'Deighan'\n\t\t\t\t}\n\t\t\tlLines: ['', 'This is a test']\n\t\t\t}\n\t\t]\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test forEachLineInFile()\n\n(() =>\n\t# --- Contents:\n\t#        abc\n\t#        def\n\t#        ghi\n\t#        jkl\n\t#        mno\n\t#\n\n\tcallback = (item, hContext) =>\n\t\tif (item == 'def') || (item == 'jkl')\n\t\t\treturn \"#{hContext.label} #{item}\"\n\t\telse\n\t\t\treturn undef\n\n\tresult = forEachLineInFile testPath, callback, {label: '-->'}\n\tu.equal result, ['--> def', '--> jkl']\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test dirContents()\n\nsmDir = './test/source-map'\nu.equal dirContents(smDir, '*.coffee').length, 1\nu.equal dirContents(smDir, '*.js').length, 2\nu.equal dirContents(smDir, '*').length, 6\nu.equal dirContents(smDir, '*', 'filesOnly').length, 4\nu.equal dirContents(smDir, '*', 'dirsOnly').length, 2\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\n\tlLines = []\n\n\tfilePath4 = './test/readline4.txt'\n\tfor line from allLinesIn(filePath4)\n\t\tlLines.push line\n\n\tu.equal lLines, ['ghi', 'jkl', '', 'mno', 'pqr']\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Produce capitalized version, with a prefix \"> \"\n#        skipping blank lines\n\n(() =>\n\n\tfunc = (line, hContext) =>\n\t\tif (line == '')\n\t\t\treturn undef\n\t\telse\n\t\t\treturn \"#{hContext.prefix}#{line.toUpperCase()}\"\n\n\tfilePath3 = './test/readline3.txt'\n\tlLines = forEachLineInFile filePath3, func, {prefix: '> '}\n\n\tu.equal lLines, ['> GHI', '> JKL', '> MNO', '> PQR']\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Produce capitalized version, with a prefix \"> \"\n#        skipping blank lines\n\n(() =>\n\n\tfunc = (line, hContext) =>\n\t\tif (line == '')\n\t\t\treturn undef\n\t\telse\n\t\t\treturn \"#{hContext.prefix}#{line.toUpperCase()}\"\n\n\tfilePath4 = './test/readline4.txt'\n\tlLines = forEachLineInFile filePath4, func, {prefix: '> '}\n\n\tu.equal lLines, ['> GHI', '> JKL', '> MNO', '> PQR']\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- This time, stop processing when a blank line is found\n\n(() =>\n\n\tfunc = (line, hContext) =>\n\t\tif (line == '')\n\t\t\tthrow 'stop'\n\t\telse\n\t\t\treturn \"#{hContext.prefix}#{line.toUpperCase()}\"\n\n\tfilePath4 = './test/readline4.txt'\n\tlLines = forEachLineInFile filePath4, func, {prefix: '> '}\n\n\tu.equal lLines, ['> GHI', '> JKL']\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\t# --- put garbage into the file\n\tpath = './test/testfile.txt'\n\tbarf \"garbage...\", path\n\n\twriter = new FileWriter(path)\n\twriter.writeln \"line 1\"\n\twriter.writeln \"line 2\"\n\twriter.close()\n\n\tu.truthy isFile(path)\n\n\ttext = slurp path\n\tu.equal text, \"line 1\\nline 2\\n\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\t# --- put garbage into the file\n\tpath = './test/testfile.txt'\n\tbarf \"garbage...\", path\n\n\twriter = new FileWriter(path)\n\twriter.writeln \"line 1\"\n\twriter.writeln \"line 2\"\n\twriter.close()\n\n\tu.truthy isFile(path)\n\n\ttext = slurp path\n\tu.equal chomp(text), \"\"\"\n\t\tline 1\n\t\tline 2\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\t# --- put garbage into the file\n\tpath = './test/testfile.txt'\n\tbarf \"garbage...\", path\n\n\twriter = new FileWriter(path)\n\twriter.writeln \"line 1\", \" - some text\"\n\twriter.writeln \"line 2\", \" - more text\"\n\twriter.close()\n\n\tu.truthy isFile(path)\n\n\ttext = slurp path\n\tu.equal text, \"line 1 - some text\\nline 2 - more text\\n\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\t# --- put garbage into the file\n\tpath = './test/testfile.txt'\n\tbarf \"garbage...\", path\n\n\twriter = new FileWriter(path, {async: true})\n\tawait writer.writeln \"line 1\"\n\tawait writer.writeln \"line 2\"\n\tawait writer.close()\n\n\tu.truthy isFile(path)\n\n\ttext = slurp path\n\tu.equal text, \"line 1\\nline 2\\n\"\n\t)()\n"
  ]
}