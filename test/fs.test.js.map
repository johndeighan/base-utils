{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "<anonymous>"
  ],
  "names": [],
  "mappings": "AAAgB;AAAA,IAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,MAAA,EAAA;;AAEhB,OAAA;EACC,UADD;EAEC,KAFD;EAEQ,IAFR;EAEc,QAFd;EAEwB,MAFxB;EAEgC,KAFhC;EAEuC,KAFvC;EAE8C,QAF9C;CAAA,MAAA;;AAIA,OAAA;EACC,KADD;EACQ,QADR;EACkB,MADlB;EAC0B,EAD1B;EAC8B,KAD9B;EACqC,MADrC;EAEC,KAFD;EAEQ,MAFR;EAEgB,iBAFhB;EAGC,mBAHD;CAAA,MAAA;;AAKA,OAAA;EAAQ,GAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,YAAR;CAAA,MAAA;;AACA,OAAO,CAAA,OAAP,MAAA;;AACA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,GAAtB,EAdgB;;;AAiBhB,OAAA,GAAU,UAAA,CAAA;;AACV,GAAA,GAAM,KAAA,CAAM,MAAO,CAAA,IAAI,CAAC,GAAlB,EAlBU;;AAmBhB,MAAA,GAAS,MAAA,CAAO,GAAP,EAAY,MAAZ,EAnBO;;AAoBhB,IAAA,GAAO,MAAA,CAAO,MAAO,CAAA,IAAI,CAAC,GAAnB;;AACP,QAAA,GAAW,MAAA,CAAO,OAAP,EAAgB,MAAhB,EAAwB,cAAxB,EArBK;;;;AA0BhB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,MAAA,EAAA;EAAC,IAAA,GAAO;EACP,MAAA,GAAS,KAAK,CAAC,IAAN,CAAW,UAAA,CAAW,IAAX,CAAX;SACT,KAAA,CAAM,MAAN,EAAc,CACb,KADa,EAEb,KAFa,EAGb,EAHa,EAIb,KAJa,EAKb,KALa,CAAd;AAHA,CAAD,CAAA,CAAA,EA1BgB;;;AAwChB,IAAA,CAAK,SAAA,CAAU,MAAO,CAAA,IAAI,CAAC,GAAtB,CAAL,EAAiC;EAChC,IAAA,EAAM,MAD0B;EAEhC,IAAA,EAAM,KAF0B;EAGhC,IAAA,EAAM,YAH0B;EAIhC,QAAA,EAAU,YAJsB;EAKhC,IAAA,EAAM,SAL0B;EAMhC,IAAA,EAAM,SAN0B;EAOhC,GAAA,EAAK,KAP2B;EAQhC,OAAA,EAAS;AARuB,CAAjC;;AAWA,IAAA,CAAK,SAAA,CAAU,OAAV,CAAL,EAAyB;EACxB,IAAA,EAAM,OADkB;EAExB,IAAA,EAAM,KAFkB;EAGxB,IAAA,EAAM,KAHkB;EAIxB,GAAA,EAAK,SAAA,CAAU,OAAV,CAJmB;EAKxB,IAAA,EAAM,YALkB;EAMxB,QAAA,EAAU,YANc;EAOxB,IAAA,EAAM,YAPkB;EAQxB,IAAA,EAAM,YARkB;EASxB,GAAA,EAAK,EATmB;EAUxB,OAAA,EAAS;AAVe,CAAzB;;AAaA,IAAA,CAAK,SAAA,CAAU,GAAV,CAAL,EAAqB;EACpB,IAAA,EAAM,GADc;EAEpB,IAAA,EAAM,KAFc;EAGpB,IAAA,EAAM,KAHc;EAIpB,GAAA,EAAK,SAAA,CAAU,GAAV,CAJe;EAKpB,IAAA,EAAM,MALc;EAMpB,QAAA,EAAU,MANU;EAOpB,IAAA,EAAM,MAPc;EAQpB,IAAA,EAAM,MARc;EASpB,GAAA,EAAK,EATe;EAUpB,OAAA,EAAS;AAVW,CAArB;;AAaA,IAAA,CAAK,SAAA,CAAU,MAAV,CAAL,EAAwB;EACvB,IAAA,EAAM,MADiB;EAEvB,IAAA,EAAM,KAFiB;EAGvB,IAAA,EAAM,KAHiB;EAIvB,GAAA,EAAK,SAAA,CAAU,MAAV,CAJkB;EAKvB,IAAA,EAAM,MALiB;EAMvB,QAAA,EAAU,MANa;EAOvB,IAAA,EAAM,MAPiB;EAQvB,IAAA,EAAM,MARiB;EASvB,GAAA,EAAK,EATkB;EAUvB,OAAA,EAAS;AAVc,CAAxB;;AAaA,IAAA,CAAK,SAAA,CAAU,IAAV,CAAL,EAAsB;EACrB,IAAA,EAAM,IADe;EAErB,IAAA,EAAM,MAFe;EAGrB,IAAA,EAAM,KAHe;EAIrB,GAAA,EAAK,SAAA,CAAU,IAAV,CAJgB;EAKrB,IAAA,EAAM,YALe;EAMrB,QAAA,EAAU,YANW;EAOrB,IAAA,EAAM,SAPe;EAQrB,IAAA,EAAM,SARe;EASrB,GAAA,EAAK,KATgB;EAUrB,OAAA,EAAS;AAVY,CAAtB;;AAaA,IAAA,CAAK,SAAA,CAAU,QAAV,CAAL,EAA0B;EACzB,IAAA,EAAM,QADmB;EAEzB,IAAA,EAAM,MAFmB;EAGzB,IAAA,EAAM,KAHmB;EAIzB,GAAA,EAAK,SAAA,CAAU,QAAV,CAJoB;EAKzB,IAAA,EAAM,cALmB;EAMzB,QAAA,EAAU,cANe;EAOzB,IAAA,EAAM,UAPmB;EAQzB,IAAA,EAAM,UARmB;EASzB,GAAA,EAAK,MAToB;EAUzB,OAAA,EAAS;AAVgB,CAA1B,EAvGgB;;;AAsHhB,KAAA,CAAM,KAAA,CAAM,QAAN,EAAgB;EAAC,QAAA,EAAU;AAAX,CAAhB,CAAN,EAAsC,CAAA;GAAA,CAAtC;;AAKA,KAAA,CAAM,KAAA,CAAM,QAAN,EAAgB;EAAC,QAAA,EAAU;AAAX,CAAhB,CAAN,EAAsC,CAAA;;GAAA,CAAtC;;AAMA,KAAA,CAAM,KAAA,CAAM,QAAN,EAAgB;EAAC,QAAA,EAAU;AAAX,CAAhB,CAAN,EAAyC,CAAA;;;;GAAA,CAAzC;;AAQA,KAAA,CAAM,KAAA,CAAM,QAAN,EAAgB,YAAhB,CAAN,EAAqC,CAAA;;GAAA,CAArC,EAzIgB;;;;AAkJhB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,CAAA,EAAA;EAAC,IAAA,GAAO;EACP,CAAA,GAAI,YAAA,CAAa,IAAb;SACJ,KAAA,CAAM,CAAN,EAAS;IACR,SAAA,EAAW;MAAC,KAAA,EAAO,MAAR;MAAgB,KAAA,EAAO;IAAvB,CADH;IAER,MAAA,EAAQ,CAAC,EAAD,EAAK,gBAAL;EAFA,CAAT;AAHA,CAAD,CAAA,CAAA,EAlJgB;;;;AA8JhB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA;EAAC,MAAA,GAAS;AACT;EAAA,KAAA,YAAA;IACC,CAAA,CAAC,GAAD,CAAA,GAAQ,KAAR;IACA,IAAG,CAAC,GAAA,KAAO,MAAR,CAAA,IAAmB,CAAC,GAAA,KAAO,KAAR,CAAtB;MACC,MAAM,CAAC,IAAP,CAAY,KAAZ,EADD;;EAFD;EAIA,iBAAA,CAAkB,MAAlB,EAA0B,UAA1B;SAEA,IAAA,CAAK,MAAL,EAAa;IACZ;MACC,QAAA,EAAU,WADX;MAEC,SAAA,EAAW,CAAA,CAFZ;MAGC,MAAA,EAAQ,CAAC,OAAD;IAHT,CADY;IAMZ;MACC,QAAA,EAAU,UADX;MAEC,SAAA,EAAW,CAAA,CAFZ;MAGC,MAAA,EAAQ,CAAC,IAAD;IAHT,CANY;IAWZ;MACC,QAAA,EAAU,WADX;MAEC,SAAA,EAAW,CAAA,CAFZ;MAGC,MAAA,EAAQ,CAAC,SAAD;IAHT,CAXY;IAgBZ;MACC,QAAA,EAAU,UADX;MAEC,SAAA,EAAW,CAAA,CAFZ;MAGC,MAAA,EAAQ,CAAC,IAAD;IAHT,CAhBY;IAqBZ;MACC,QAAA,EAAU,WADX;MAEC,SAAA,EAAW;QACV,KAAA,EAAO,MADG;QAEV,KAAA,EAAO;MAFG,CAFZ;MAMC,MAAA,EAAQ,CAAC,EAAD;IAAK,gBAAL;IANT,CArBY;IA6BZ;MACC,QAAA,EAAU,aADX;MAEC,SAAA,EAAW,CAAA,CAFZ;MAGC,MAAA,EAAQ,CAAE,qBAAF;IAHT,CA7BY;GAAb;AARA,CAAD,CAAA,CAAA,EA9JgB;;;;AA+MhB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,KAAA,EAAA,QAAA,EAAA,MAAA,EAAA;EAAC,MAAA,GAAS;EACT,QAAA,GAAW;IACV,KAAA,EAAO;EADG;AAGX;EAAA,KAAA,YAAA;IACC,MAAM,CAAC,IAAP,CAAY,KAAZ;EADD;EAEA,iBAAA,CAAkB,MAAlB,EAA0B,UAA1B;SAEA,IAAA,CAAK,MAAL,EAAa;IACZ;MACC,QAAA,EAAU,WADX;MAEC,SAAA,EAAW,CAAA,CAFZ;MAGC,MAAA,EAAQ,CAAC,OAAD;IAHT,CADY;IAMZ;MACC,QAAA,EAAU,WADX;MAEC,SAAA,EAAW,CAAA,CAFZ;MAGC,MAAA,EAAQ,CAAC,SAAD;IAHT,CANY;IAWZ;MACC,QAAA,EAAU,WADX;MAEC,SAAA,EAAW;QACV,KAAA,EAAO,MADG;QAEV,KAAA,EAAO;MAFG,CAFZ;MAMC,MAAA,EAAQ,CAAC,EAAD;IAAK,gBAAL;IANT,CAXY;GAAb;AATA,CAAD,CAAA,CAAA,EA/MgB;;;;AAkPhB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,KAAA,EAAA,QAAA,EAAA,MAAA,EAAA;EAAC,MAAA,GAAS;EACT,QAAA,GAAW;IACV,KAAA,EAAO,IADG;IAEV,YAAA,EAAc;MACb,GAAA,EAAK;IADQ;EAFJ;AAMX;EAAA,KAAA,YAAA;IACC,MAAM,CAAC,IAAP,CAAY,KAAZ;EADD;EAEA,iBAAA,CAAkB,MAAlB,EAA0B,UAA1B;SAEA,IAAA,CAAK,MAAL,EAAa;IACZ;MACC,QAAA,EAAU,WADX;MAEC,SAAA,EAAW,CAAA,CAFZ;MAGC,MAAA,EAAQ,CAAC,OAAD;IAHT,CADY;IAMZ;MACC,QAAA,EAAU,WADX;MAEC,SAAA,EAAW,CAAA,CAFZ;MAGC,MAAA,EAAQ,CAAC,SAAD;IAHT,CANY;IAWZ;MACC,QAAA,EAAU,WADX;MAEC,SAAA,EAAW;QACV,KAAA,EAAO,MADG;QAEV,KAAA,EAAO;MAFG,CAFZ;MAMC,MAAA,EAAQ,CAAC,EAAD;IAAK,gBAAL;IANT,CAXY;GAAb;AAZA,CAAD,CAAA,CAAA,EAlPgB;;;;AAwRhB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,QAAA,EAAA,MAAA;;;;;;;;EAQC,QAAA,GAAW,CAAC,IAAD,EAAO,QAAP,CAAA,GAAA;IACV,IAAG,CAAC,IAAA,KAAQ,KAAT,CAAA,IAAmB,CAAC,IAAA,KAAQ,KAAT,CAAtB;AACC,aAAO,CAAA,CAAA,CAAG,QAAQ,CAAC,KAAZ,EAAA,CAAA,CAAqB,IAArB,CAAA,EADR;KAAA,MAAA;AAGC,aAAO,MAHR;;EADU;EAMX,MAAA,GAAS,iBAAA,CAAkB,QAAlB,EAA4B,QAA5B,EAAsC;IAAC,KAAA,EAAO;EAAR,CAAtC;SACT,KAAA,CAAM,MAAN,EAAc,CAAC,SAAD,EAAY,SAAZ,CAAd;AAhBA,CAAD,CAAA,CAAA,EAxRgB;;;;AA8ShB,KAAA,GAAQ;;AACR,KAAA,CAAM,WAAA,CAAY,KAAZ,EAAmB,UAAnB,CAA8B,CAAC,MAArC,EAA6C,CAA7C;;AACA,KAAA,CAAM,WAAA,CAAY,KAAZ,EAAmB,MAAnB,CAA0B,CAAC,MAAjC,EAAyC,CAAzC;;AACA,KAAA,CAAM,WAAA,CAAY,KAAZ,EAAmB,GAAnB,CAAuB,CAAC,MAA9B,EAAsC,CAAtC;;AACA,KAAA,CAAM,WAAA,CAAY,KAAZ,EAAmB,GAAnB,EAAwB,WAAxB,CAAoC,CAAC,MAA3C,EAAmD,CAAnD;;AACA,KAAA,CAAM,WAAA,CAAY,KAAZ,EAAmB,GAAnB,EAAwB,UAAxB,CAAmC,CAAC,MAA1C,EAAkD,CAAlD,EAnTgB;;;AAuThB,CAAC,CAAA,CAAA,GAAA;AAED,MAAA,SAAA,EAAA,MAAA,EAAA,IAAA,EAAA;EAAC,MAAA,GAAS;EAET,SAAA,GAAY;AACZ;EAAA,KAAA,WAAA;IACC,MAAM,CAAC,IAAP,CAAY,IAAZ;EADD;SAGA,KAAA,CAAM,MAAN,EAAc,CAAC,KAAD,EAAQ,KAAR,EAAe,EAAf,EAAmB,KAAnB,EAA0B,KAA1B,CAAd;AARA,CAAD,CAAA,CAAA,EAvTgB;;;;;AAsUhB,CAAC,CAAA,CAAA,GAAA;AAED,MAAA,SAAA,EAAA,IAAA,EAAA;EAAC,IAAA,GAAO,CAAC,IAAD,EAAO,QAAP,CAAA,GAAA;IACN,IAAI,IAAA,KAAQ,EAAZ;AACC,aAAO,MADR;KAAA,MAAA;AAGC,aAAO,CAAA,CAAA,CAAG,QAAQ,CAAC,MAAZ,CAAA,CAAA,CAAqB,IAAI,CAAC,WAAL,CAAA,CAArB,CAAA,EAHR;;EADM;EAMP,SAAA,GAAY;EACZ,MAAA,GAAS,iBAAA,CAAkB,SAAlB,EAA6B,IAA7B,EAAmC;IAAC,MAAA,EAAQ;EAAT,CAAnC;SAET,KAAA,CAAM,MAAN,EAAc,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,CAAd;AAXA,CAAD,CAAA,CAAA,EAtUgB;;;;;AAwVhB,CAAC,CAAA,CAAA,GAAA;AAED,MAAA,SAAA,EAAA,IAAA,EAAA;EAAC,IAAA,GAAO,CAAC,IAAD,EAAO,QAAP,CAAA,GAAA;IACN,IAAI,IAAA,KAAQ,EAAZ;AACC,aAAO,MADR;KAAA,MAAA;AAGC,aAAO,CAAA,CAAA,CAAG,QAAQ,CAAC,MAAZ,CAAA,CAAA,CAAqB,IAAI,CAAC,WAAL,CAAA,CAArB,CAAA,EAHR;;EADM;EAMP,SAAA,GAAY;EACZ,MAAA,GAAS,iBAAA,CAAkB,SAAlB,EAA6B,IAA7B,EAAmC;IAAC,MAAA,EAAQ;EAAT,CAAnC;SAET,KAAA,CAAM,MAAN,EAAc,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,CAAd;AAXA,CAAD,CAAA,CAAA,EAxVgB;;;;AAyWhB,CAAC,CAAA,CAAA,GAAA;AAED,MAAA,SAAA,EAAA,IAAA,EAAA;EAAC,IAAA,GAAO,CAAC,IAAD,EAAO,QAAP,CAAA,GAAA;IACN,IAAI,IAAA,KAAQ,EAAZ;MACC,MAAM,OADP;KAAA,MAAA;AAGC,aAAO,CAAA,CAAA,CAAG,QAAQ,CAAC,MAAZ,CAAA,CAAA,CAAqB,IAAI,CAAC,WAAL,CAAA,CAArB,CAAA,EAHR;;EADM;EAMP,SAAA,GAAY;EACZ,MAAA,GAAS,iBAAA,CAAkB,SAAlB,EAA6B,IAA7B,EAAmC;IAAC,MAAA,EAAQ;EAAT,CAAnC;SAET,KAAA,CAAM,MAAN,EAAc,CAAC,OAAD,EAAU,OAAV,CAAd;AAXA,CAAD,CAAA,CAAA,EAzWgB;;;AAyXhB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,IAAA,EAAA,IAAA,EAAA,MAAA;;EACC,IAAA,GAAO;EACP,IAAA,CAAK,YAAL,EAAmB,IAAnB;EAEA,MAAA,GAAS,IAAI,UAAJ,CAAe,IAAf;EACT,MAAM,CAAC,OAAP,CAAe,QAAf;EACA,MAAM,CAAC,OAAP,CAAe,QAAf;EACA,MAAM,CAAC,KAAP,CAAA;EAEA,MAAA,CAAO,MAAA,CAAO,IAAP,CAAP;EAEA,IAAA,GAAO,KAAA,CAAM,IAAN;SACP,KAAA,CAAM,IAAN,EAAY,kBAAZ;AAbA,CAAD,CAAA,CAAA,EAzXgB;;;AA2YhB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,IAAA,EAAA,IAAA,EAAA,MAAA;;EACC,IAAA,GAAO;EACP,IAAA,CAAK,YAAL,EAAmB,IAAnB;EAEA,MAAA,GAAS,IAAI,UAAJ,CAAe,IAAf;EACT,MAAM,CAAC,OAAP,CAAe,QAAf;EACA,MAAM,CAAC,OAAP,CAAe,QAAf;EACA,MAAM,CAAC,KAAP,CAAA;EAEA,MAAA,CAAO,MAAA,CAAO,IAAP,CAAP;EAEA,IAAA,GAAO,KAAA,CAAM,IAAN;SACP,KAAA,CAAM,KAAA,CAAM,IAAN,CAAN,EAAmB,CAAA;MAAA,CAAnB;AAbA,CAAD,CAAA,CAAA,EA3YgB;;;AAgahB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,IAAA,EAAA,IAAA,EAAA,MAAA;;EACC,IAAA,GAAO;EACP,IAAA,CAAK,YAAL,EAAmB,IAAnB;EAEA,MAAA,GAAS,IAAI,UAAJ,CAAe,IAAf;EACT,MAAM,CAAC,OAAP,CAAe,QAAf,EAAyB,cAAzB;EACA,MAAM,CAAC,OAAP,CAAe,QAAf,EAAyB,cAAzB;EACA,MAAM,CAAC,KAAP,CAAA;EAEA,MAAA,CAAO,MAAA,CAAO,IAAP,CAAP;EAEA,IAAA,GAAO,KAAA,CAAM,IAAN;SACP,KAAA,CAAM,IAAN,EAAY,0CAAZ;AAbA,CAAD,CAAA,CAAA,EAhagB;;;AAkbhB,CAAC,KAAA,CAAA,CAAA,GAAA;AACD,MAAA,IAAA,EAAA,IAAA,EAAA,MAAA;;EACC,IAAA,GAAO;EACP,IAAA,CAAK,YAAL,EAAmB,IAAnB;EAEA,MAAA,GAAS,IAAI,UAAJ,CAAe,IAAf,EAAqB;IAAC,KAAA,EAAO;EAAR,CAArB;EACT,MAAM,MAAM,CAAC,OAAP,CAAe,QAAf;EACN,MAAM,MAAM,CAAC,OAAP,CAAe,QAAf;EACN,MAAM,MAAM,CAAC,KAAP,CAAA;EAEN,MAAA,CAAO,MAAA,CAAO,IAAP,CAAP;EAEA,IAAA,GAAO,KAAA,CAAM,IAAN;SACP,KAAA,CAAM,IAAN,EAAY,kBAAZ;AAbA,CAAD,CAAA,CAAA,EAlbgB;;;AAochB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,UAAA,EAAA,SAAA,EAAA,MAAA;;EAEC,UAAA,GAAa;EACb,MAAA,GAAS;EACT,SAAA,GAAY;EAEZ,MAAA,CAAO,mBAAA,CAAoB,UAApB,EAAgC,MAAhC,CAAP;EACA,KAAA,CAAM,mBAAA,CAAoB,MAApB,EAA4B,UAA5B,CAAN;SACA,KAAA,CAAM,mBAAA,CAAoB,UAApB,EAAgC,SAAhC,CAAN;AATA,CAAD,CAAA,CAAA",
  "sourcesContent": [
    "# fs.test.coffee\n\nimport {\n\tUnitTester,\n\tequal, like, notequal, truthy, falsy, fails, succeeds,\n\t} from '@jdeighan/base-utils/utest'\nimport {\n\tundef, fromJSON, toJSON, OL, chomp, jsType,\n\twords, hslice, sortArrayOfHashes,\n\tnewerDestFilesExist,\n\t} from '@jdeighan/base-utils'\nimport {LOG} from '@jdeighan/base-utils/log'\nimport {setDebugging} from '@jdeighan/base-utils/debug'\nimport * as lib from '@jdeighan/base-utils/fs'\nObject.assign(global, lib)\n\n# --- should be root directory of @jdeighan/base-utils\nprojDir = workingDir()\ndir = mydir(import.meta.url)    # project test folder\nsubdir = mkpath(dir, 'test')    # subdir test inside test\nfile = myself(import.meta.url)\ntestPath = mkpath(projDir, 'test', 'readline.txt')\n\n# ---------------------------------------------------------------------------\n# --- test allLinesIn()\n\n(() =>\n\tpath = './test/readline3.txt'\n\tlLines = Array.from allLinesIn(path)\n\tequal lLines, [\n\t\t'ghi'\n\t\t'jkl'\n\t\t''\n\t\t'mno'\n\t\t'pqr'\n\t\t]\n\t)()\n\n# ---------------------------------------------------------------------------\n\nlike parsePath(import.meta.url), {\n\ttype: 'file'\n\troot: 'c:/'\n\tbase: 'fs.test.js'\n\tfileName: 'fs.test.js'\n\tname: 'fs.test'\n\tstub: 'fs.test'\n\text: '.js'\n\tpurpose: 'test'\n\t}\n\nlike parsePath(projDir), {\n\tpath: projDir\n\ttype: 'dir'\n\troot: 'c:/'\n\tdir: parentDir(projDir)\n\tbase: 'base-utils'\n\tfileName: 'base-utils'\n\tname: 'base-utils'\n\tstub: 'base-utils'\n\text: ''\n\tpurpose: undef\n\t}\n\nlike parsePath(dir), {\n\tpath: dir\n\ttype: 'dir'\n\troot: 'c:/'\n\tdir: parentDir(dir)\n\tbase: 'test'\n\tfileName: 'test'\n\tname: 'test'\n\tstub: 'test'\n\text: ''\n\tpurpose: undef\n\t}\n\nlike parsePath(subdir), {\n\tpath: subdir\n\ttype: 'dir'\n\troot: 'c:/'\n\tdir: parentDir(subdir)\n\tbase: 'test'\n\tfileName: 'test'\n\tname: 'test'\n\tstub: 'test'\n\text: ''\n\tpurpose: undef\n\t}\n\nlike parsePath(file), {\n\tpath: file\n\ttype: 'file'\n\troot: 'c:/'\n\tdir: parentDir(file)\n\tbase: 'fs.test.js'\n\tfileName: 'fs.test.js'\n\tname: 'fs.test'\n\tstub: 'fs.test'\n\text: '.js'\n\tpurpose: 'test'\n\t}\n\nlike parsePath(testPath), {\n\tpath: testPath\n\ttype: 'file'\n\troot: 'c:/'\n\tdir: parentDir(testPath)\n\tbase: 'readline.txt'\n\tfileName: 'readline.txt'\n\tname: 'readline'\n\tstub: 'readline'\n\text: '.txt'\n\tpurpose: undef\n\t}\n\n# ---------------------------------------------------------------------------\n\nequal slurp(testPath, {maxLines: 2}), \"\"\"\n\tabc\n\tdef\n\t\"\"\"\n\nequal slurp(testPath, {maxLines: 3}), \"\"\"\n\tabc\n\tdef\n\tghi\n\t\"\"\"\n\nequal slurp(testPath, {maxLines: 1000}), \"\"\"\n\tabc\n\tdef\n\tghi\n\tjkl\n\tmno\n\t\"\"\"\n\nequal slurp(testPath, 'maxLines=3'), \"\"\"\n\tabc\n\tdef\n\tghi\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n# --- test readTextFile\n\n(() =>\n\tpath = \"./test/test/file3.txt\"\n\th = readTextFile(path)\n\tequal h, {\n\t\thMetaData: {fName: 'John', lName: 'Deighan'}\n\t\tlLines: ['', 'This is a test']\n\t\t}\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test allFilesMatching\n\n(() =>\n\tlFiles = []\n\tfor hFile from allFilesMatching('./test/test/*', 'eager')\n\t\t{ext} = hFile\n\t\tif (ext != '.map') && (ext != '.js')\n\t\t\tlFiles.push hFile\n\tsortArrayOfHashes lFiles, 'fileName'\n\n\tlike lFiles, [\n\t\t{\n\t\t\tfileName: 'file1.txt',\n\t\t\thMetaData: {},\n\t\t\tlLines: ['Hello']\n\t\t\t}\n\t\t{\n\t\t\tfileName: 'file1.zh',\n\t\t\thMetaData: {},\n\t\t\tlLines: ['你好']\n\t\t\t}\n\t\t{\n\t\t\tfileName: 'file2.txt',\n\t\t\thMetaData: {},\n\t\t\tlLines: ['Goodbye']\n\t\t\t}\n\t\t{\n\t\t\tfileName: 'file2.zh',\n\t\t\thMetaData: {},\n\t\t\tlLines: ['再见']\n\t\t\t}\n\t\t{\n\t\t\tfileName: 'file3.txt'\n\t\t\thMetaData: {\n\t\t\t\tfName: 'John'\n\t\t\t\tlName: 'Deighan'\n\t\t\t\t}\n\t\t\tlLines: ['', 'This is a test']\n\t\t\t}\n\t\t{\n\t\t\tfileName: 'test.coffee',\n\t\t\thMetaData: {},\n\t\t\tlLines: [ 'console.log \"Hello\"' ]\n\t\t\t}\n\t\t]\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test allFilesMatching with pattern\n\n(() =>\n\tlFiles = []\n\thOptions = {\n\t\teager: true\n\t\t}\n\tfor hFile from allFilesMatching('./test/test/*.txt', hOptions)\n\t\tlFiles.push hFile\n\tsortArrayOfHashes lFiles, 'fileName'\n\n\tlike lFiles, [\n\t\t{\n\t\t\tfileName: 'file1.txt',\n\t\t\thMetaData: {},\n\t\t\tlLines: ['Hello']\n\t\t\t}\n\t\t{\n\t\t\tfileName: 'file2.txt',\n\t\t\thMetaData: {},\n\t\t\tlLines: ['Goodbye']\n\t\t\t}\n\t\t{\n\t\t\tfileName: 'file3.txt'\n\t\t\thMetaData: {\n\t\t\t\tfName: 'John'\n\t\t\t\tlName: 'Deighan'\n\t\t\t\t}\n\t\t\tlLines: ['', 'This is a test']\n\t\t\t}\n\t\t]\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test allFilesMatching with pattern and cwd\n\n(() =>\n\tlFiles = []\n\thOptions = {\n\t\teager: true\n\t\thGlobOptions: {\n\t\t\tcwd: './test/test'\n\t\t\t}\n\t\t}\n\tfor hFile from allFilesMatching('*.txt', hOptions)\n\t\tlFiles.push hFile\n\tsortArrayOfHashes lFiles, 'fileName'\n\n\tlike lFiles, [\n\t\t{\n\t\t\tfileName: 'file1.txt',\n\t\t\thMetaData: {},\n\t\t\tlLines: ['Hello']\n\t\t\t}\n\t\t{\n\t\t\tfileName: 'file2.txt',\n\t\t\thMetaData: {},\n\t\t\tlLines: ['Goodbye']\n\t\t\t}\n\t\t{\n\t\t\tfileName: 'file3.txt'\n\t\t\thMetaData: {\n\t\t\t\tfName: 'John'\n\t\t\t\tlName: 'Deighan'\n\t\t\t\t}\n\t\t\tlLines: ['', 'This is a test']\n\t\t\t}\n\t\t]\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test forEachLineInFile()\n\n(() =>\n\t# --- Contents:\n\t#        abc\n\t#        def\n\t#        ghi\n\t#        jkl\n\t#        mno\n\t#\n\n\tcallback = (item, hContext) =>\n\t\tif (item == 'def') || (item == 'jkl')\n\t\t\treturn \"#{hContext.label} #{item}\"\n\t\telse\n\t\t\treturn undef\n\n\tresult = forEachLineInFile testPath, callback, {label: '-->'}\n\tequal result, ['--> def', '--> jkl']\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test dirContents()\n\nsmDir = './test/source-map'\nequal dirContents(smDir, '*.coffee').length, 1\nequal dirContents(smDir, '*.js').length, 2\nequal dirContents(smDir, '*').length, 6\nequal dirContents(smDir, '*', 'filesOnly').length, 4\nequal dirContents(smDir, '*', 'dirsOnly').length, 2\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\n\tlLines = []\n\n\tfilePath4 = './test/readline4.txt'\n\tfor line from allLinesIn(filePath4)\n\t\tlLines.push line\n\n\tequal lLines, ['ghi', 'jkl', '', 'mno', 'pqr']\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Produce capitalized version, with a prefix \"> \"\n#        skipping blank lines\n\n(() =>\n\n\tfunc = (line, hContext) =>\n\t\tif (line == '')\n\t\t\treturn undef\n\t\telse\n\t\t\treturn \"#{hContext.prefix}#{line.toUpperCase()}\"\n\n\tfilePath3 = './test/readline3.txt'\n\tlLines = forEachLineInFile filePath3, func, {prefix: '> '}\n\n\tequal lLines, ['> GHI', '> JKL', '> MNO', '> PQR']\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Produce capitalized version, with a prefix \"> \"\n#        skipping blank lines\n\n(() =>\n\n\tfunc = (line, hContext) =>\n\t\tif (line == '')\n\t\t\treturn undef\n\t\telse\n\t\t\treturn \"#{hContext.prefix}#{line.toUpperCase()}\"\n\n\tfilePath4 = './test/readline4.txt'\n\tlLines = forEachLineInFile filePath4, func, {prefix: '> '}\n\n\tequal lLines, ['> GHI', '> JKL', '> MNO', '> PQR']\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- This time, stop processing when a blank line is found\n\n(() =>\n\n\tfunc = (line, hContext) =>\n\t\tif (line == '')\n\t\t\tthrow 'stop'\n\t\telse\n\t\t\treturn \"#{hContext.prefix}#{line.toUpperCase()}\"\n\n\tfilePath4 = './test/readline4.txt'\n\tlLines = forEachLineInFile filePath4, func, {prefix: '> '}\n\n\tequal lLines, ['> GHI', '> JKL']\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\t# --- put garbage into the file\n\tpath = './test/testfile.txt'\n\tbarf \"garbage...\", path\n\n\twriter = new FileWriter(path)\n\twriter.writeln \"line 1\"\n\twriter.writeln \"line 2\"\n\twriter.close()\n\n\ttruthy isFile(path)\n\n\ttext = slurp path\n\tequal text, \"line 1\\nline 2\\n\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\t# --- put garbage into the file\n\tpath = './test/testfile.txt'\n\tbarf \"garbage...\", path\n\n\twriter = new FileWriter(path)\n\twriter.writeln \"line 1\"\n\twriter.writeln \"line 2\"\n\twriter.close()\n\n\ttruthy isFile(path)\n\n\ttext = slurp path\n\tequal chomp(text), \"\"\"\n\t\tline 1\n\t\tline 2\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\t# --- put garbage into the file\n\tpath = './test/testfile.txt'\n\tbarf \"garbage...\", path\n\n\twriter = new FileWriter(path)\n\twriter.writeln \"line 1\", \" - some text\"\n\twriter.writeln \"line 2\", \" - more text\"\n\twriter.close()\n\n\ttruthy isFile(path)\n\n\ttext = slurp path\n\tequal text, \"line 1 - some text\\nline 2 - more text\\n\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\t# --- put garbage into the file\n\tpath = './test/testfile.txt'\n\tbarf \"garbage...\", path\n\n\twriter = new FileWriter(path, {async: true})\n\tawait writer.writeln \"line 1\"\n\tawait writer.writeln \"line 2\"\n\tawait writer.close()\n\n\ttruthy isFile(path)\n\n\ttext = slurp path\n\tequal text, \"line 1\\nline 2\\n\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\t# --- test newerDestFilesExist()\n\n\tcoffeeFile = \"./src/lib/fs.coffee\"\n\tjsFile = \"./src/lib/fs.js\"\n\tdummyFile = \"./src/lib/dummy.js\"\n\n\ttruthy newerDestFilesExist(coffeeFile, jsFile)\n\tfalsy newerDestFilesExist(jsFile, coffeeFile)\n\tfalsy newerDestFilesExist(coffeeFile, dummyFile)\n\t)()"
  ]
}