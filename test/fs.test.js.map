{
  "version": 3,
  "file": "fs.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\fs.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# fs.test.coffee\n\nimport test from 'ava'\nimport {undef, defined} from '@jdeighan/base-utils'\nimport {setDebugging} from '@jdeighan/base-utils/debug'\nimport {\n\tisFile, isDir, mkpath, mkdirSync, slurp, barf, forEachFileInDir,\n\tforEachItem, forEachLineInFile, FileProcessor,\n\t} from '@jdeighan/base-utils/fs'\n\ndir = process.cwd()     # should be root directory of @jdeighan/base-utils\ntestDir = mkpath(dir, 'test')\ntestPath = mkpath(dir, 'test', 'readline.txt')\n\n# ---------------------------------------------------------------------------\n\ntest \"line 17\", (t) => t.is(mkpath(\"abc\",\"def\"), \"abc/def\")\ntest \"line 18\", (t) => t.is(mkpath(\"c:\\\\Users\",\"johnd\"), \"c:/Users/johnd\")\ntest \"line 19\", (t) => t.is(mkpath(\"C:\\\\Users\",\"johnd\"), \"C:/Users/johnd\")\n\ntest \"line 21\", (t) => t.truthy(isFile(mkpath(dir, 'package.json')))\ntest \"line 22\", (t) => t.falsy (isFile(mkpath(dir, 'doesNotExist.txt')))\ntest \"line 23\", (t) => t.truthy(isDir(mkpath(dir, 'src')))\ntest \"line 24\", (t) => t.truthy(isDir(mkpath(dir, 'test')))\ntest \"line 25\", (t) => t.falsy (isDir(mkpath(dir, 'doesNotExist')))\n\ntest \"line 27\", (t) => t.truthy(isFile(dir, 'package.json'))\ntest \"line 28\", (t) => t.falsy (isFile(dir, 'doesNotExist.txt'))\ntest \"line 29\", (t) => t.truthy(isDir(dir, 'src'))\ntest \"line 30\", (t) => t.truthy(isDir(dir, 'test'))\ntest \"line 31\", (t) => t.falsy (isDir(dir, 'doesNotExist'))\n\ntest \"line 33\", (t) => t.is slurp(testPath, {maxLines: 2}), \"\"\"\n\tabc\n\tdef\n\t\"\"\"\n\ntest \"line 38\", (t) => t.is slurp(testPath, {maxLines: 3}), \"\"\"\n\tabc\n\tdef\n\tghi\n\t\"\"\"\n\ntest \"line 44\", (t) => t.is slurp(testPath, {maxLines: 1000}), \"\"\"\n\tabc\n\tdef\n\tghi\n\tjkl\n\tmno\n\t\"\"\"\n\n# --- Test without building path first\n\ntest \"line 54\", (t) => t.is slurp(dir, 'test', 'readline.txt', {maxLines: 2}), \"\"\"\n\tabc\n\tdef\n\t\"\"\"\n\ntest \"line 59\", (t) => t.is slurp(dir, 'test', 'readline.txt', {maxLines: 3}), \"\"\"\n\tabc\n\tdef\n\tghi\n\t\"\"\"\n\ntest \"line 65\", (t) => t.is slurp(dir, 'test', 'readline.txt', {maxLines: 1000}), \"\"\"\n\tabc\n\tdef\n\tghi\n\tjkl\n\tmno\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n# --- test FileProcessor\n\n(() =>\n\tclass TestProcessor extends FileProcessor\n\n\t\tconstructor: () ->\n\t\t\tsuper './test'\n\n\t\tinit: () ->\n\t\t\t# --- We need to clear out hWords each time procAll() is called\n\t\t\t@hWords = {}\n\t\t\treturn\n\n\t\tfilter: (hFileInfo) ->\n\t\t\t@log \"FILTER hFileInfo:\"\n\t\t\t@log hFileInfo\n\t\t\t{stub, ext} = hFileInfo\n\t\t\t@log \"stub='#{stub}' ext='#{ext}'\"\n\t\t\treturn (ext == '.txt') && stub.match(/^readline/)\n\n\t\thandleLine: (line) ->\n\t\t\t@log \"HANDLE LINE: #{line}\"\n\t\t\t@hWords[line.toUpperCase()] = true\n\t\t\treturn\n\n\tfp = new TestProcessor()\n\tfp.procAll()\n\ttest \"line 101\", (t) => t.deepEqual(fp.hWords, {\n\t\t'ABC': true\n\t\t'DEF': true\n\t\t'GHI': true\n\t\t'JKL': true\n\t\t'MNO': true\n\t\t'PQR': true\n\t\t})\n\n\t)()\n"
  ]
}