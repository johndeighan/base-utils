{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "test/fs.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# fs.test.coffee\n\nimport {\n\tUnitTester,\n\tequal, like, notequal, truthy, falsy, fails, succeeds,\n\t} from '@jdeighan/base-utils/utest'\nimport {\n\tundef, fromJSON, toJSON, OL, chomp, jsType,\n\twords, hslice, sortArrayOfHashes,\n\tnewerDestFilesExist, isArray,\n\t} from '@jdeighan/base-utils'\nimport {LOG} from '@jdeighan/base-utils/log'\nimport {setDebugging} from '@jdeighan/base-utils/debug'\nimport {assert} from '@jdeighan/base-utils/exceptions'\nimport * as lib from '@jdeighan/base-utils/fs'\nObject.assign(global, lib)\n\n# --- should be root directory of @jdeighan/base-utils\nprojDir = workingDir()\ndir = mydir(import.meta.url)    # project test folder\nsubdir = mkpath(dir, 'test')    # subdir test inside test\nfile = myself(import.meta.url)\ntestPath = mkpath(projDir, 'test', 'readline.txt')\n\n# ---------------------------------------------------------------------------\n\nlike parsePath(import.meta.url), {\n\ttype: 'file'\n\troot: 'c:/'\n\tbase: 'fs.test.js'\n\tfileName: 'fs.test.js'\n\tname: 'fs.test'\n\tstub: 'fs.test'\n\text: '.js'\n\tpurpose: 'test'\n\t}\n\nlike parsePath(projDir), {\n\tpath: projDir\n\ttype: 'dir'\n\troot: 'c:/'\n\tdir: parentDir(projDir)\n\tbase: 'base-utils'\n\tfileName: 'base-utils'\n\tname: 'base-utils'\n\tstub: 'base-utils'\n\text: ''\n\tpurpose: undef\n\t}\n\nlike parsePath(dir), {\n\tpath: dir\n\ttype: 'dir'\n\troot: 'c:/'\n\tdir: parentDir(dir)\n\tbase: 'test'\n\tfileName: 'test'\n\tname: 'test'\n\tstub: 'test'\n\text: ''\n\tpurpose: undef\n\t}\n\nlike parsePath(subdir), {\n\tpath: subdir\n\ttype: 'dir'\n\troot: 'c:/'\n\tdir: parentDir(subdir)\n\tbase: 'test'\n\tfileName: 'test'\n\tname: 'test'\n\tstub: 'test'\n\text: ''\n\tpurpose: undef\n\t}\n\nlike parsePath(file), {\n\tpath: file\n\ttype: 'file'\n\troot: 'c:/'\n\tdir: parentDir(file)\n\tbase: 'fs.test.js'\n\tfileName: 'fs.test.js'\n\tname: 'fs.test'\n\tstub: 'fs.test'\n\text: '.js'\n\tpurpose: 'test'\n\t}\n\nlike parsePath(testPath), {\n\tpath: testPath\n\ttype: 'file'\n\troot: 'c:/'\n\tdir: parentDir(testPath)\n\tbase: 'readline.txt'\n\tfileName: 'readline.txt'\n\tname: 'readline'\n\tstub: 'readline'\n\text: '.txt'\n\tpurpose: undef\n\t}\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\t# --- put garbage into the file\n\tpath = './test/testfile.txt'\n\tbarf \"garbage...\", path\n\n\twriter = new FileWriter(path)\n\twriter.writeln \"line 1\"\n\twriter.writeln \"line 2\"\n\twriter.close()\n\n\ttruthy isFile(path)\n\n\ttext = slurp path\n\tequal text, \"line 1\\nline 2\\n\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\t# --- put garbage into the file\n\tpath = './test/testfile.txt'\n\tbarf \"garbage...\", path\n\n\twriter = new FileWriter(path)\n\twriter.writeln \"line 1\"\n\twriter.writeln \"line 2\"\n\twriter.close()\n\n\ttruthy isFile(path)\n\n\ttext = slurp path\n\tequal chomp(text), \"\"\"\n\t\tline 1\n\t\tline 2\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\t# --- put garbage into the file\n\tpath = './test/testfile.txt'\n\tbarf \"garbage...\", path\n\n\twriter = new FileWriter(path)\n\twriter.writeln \"line 1\", \" - some text\"\n\twriter.writeln \"line 2\", \" - more text\"\n\twriter.close()\n\n\ttruthy isFile(path)\n\n\ttext = slurp path\n\tequal text, \"line 1 - some text\\nline 2 - more text\\n\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\t# --- put garbage into the file\n\tpath = './test/testfile.txt'\n\tbarf \"garbage...\", path\n\n\twriter = new FileWriter(path, {async: true})\n\tawait writer.writeln \"line 1\"\n\tawait writer.writeln \"line 2\"\n\tawait writer.close()\n\n\ttruthy isFile(path)\n\n\ttext = slurp path\n\tequal text, \"line 1\\nline 2\\n\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\t# --- test newerDestFilesExist()\n\n\tcoffeeFile = \"./src/lib/fs.coffee\"\n\tjsFile = \"./src/lib/fs.js\"\n\tdummyFile = \"./src/lib/dummy.js\"\n\n\ttruthy newerDestFilesExist(coffeeFile, jsFile)\n\tfalsy newerDestFilesExist(jsFile, coffeeFile)\n\tfalsy newerDestFilesExist(coffeeFile, dummyFile)\n\t)()"
  ]
}