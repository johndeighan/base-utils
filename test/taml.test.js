// Generated by CoffeeScript 2.7.0
// taml.test.coffee
import test from 'ava';

import {
  assert,
  croak
} from '@jdeighan/exceptions';

import {
  undef,
  untabify
} from '@jdeighan/exceptions/utils';

import {
  LOG
} from '@jdeighan/exceptions/log';

import {
  isTAML,
  toTAML,
  fromTAML
} from '@jdeighan/exceptions/taml';

// ---------------------------------------------------------------------------
test("line 12", (t) => {
  return t.truthy(isTAML("---\n- first\n- second"));
});

test("line 15", (t) => {
  return t.falsy(isTAML("x---\n5"));
});

test("line 18", (t) => {
  return t.falsy(isTAML("---x\n5"));
});

test("line 21", (t) => {
  return t.is(toTAML({
    a: 1
  }), "---\na: 1");
});

test("line 24", (t) => {
  return t.is(toTAML({
    a: 1,
    b: 2
  }), "---\na: 1\nb: 2");
});

test("line 27", (t) => {
  return t.is(toTAML([
    1,
    'abc',
    {
      a: 1
    }
  ]), "---\n- 1\n- abc\n-\n   a: 1");
});

test("line 31", (t) => {
  return t.is(toTAML({
    a: 1,
    b: 2
  }), `---
a: 1
b: 2`);
});

test("line 38", (t) => {
  return t.is(toTAML(['a', 'b']), `---
- a
- b`);
});

test("line 45", (t) => {
  return t.is(toTAML([
    'a',
    'b',
    {
      a: 1
    },
    ['x']
  ]), untabify(`---
- a
- b
-
	a: 1
-
	- x`));
});

test("line 56", (t) => {
  return t.deepEqual(fromTAML("---\n- a\n- b"), ['a', 'b']);
});

test("line 59", (t) => {
  return t.deepEqual(fromTAML(`---
title:
\ten: Hello, she said.`), {
    title: {
      en: 'Hello, she said.'
    }
  });
});

test("line 71", (t) => {
  return t.deepEqual(fromTAML(`---
a: 1
b: 2`), {
    a: 1,
    b: 2
  });
});

test("line 83", (t) => {
  return t.is(toTAML(undef), "---\nundef");
});

test("line 86", (t) => {
  return t.is(toTAML(null), "---\nnull");
});

test("line 89", (t) => {
  return t.is(toTAML({
    a: 1
  }), "---\na: 1");
});

test("line 92", (t) => {
  return t.is(toTAML({
    a: 1,
    b: 2
  }), "---\na: 1\nb: 2");
});

test("line 95", (t) => {
  return t.is(toTAML([
    1,
    'abc',
    {
      a: 1
    }
  ]), "---\n- 1\n- abc\n-\n   a: 1");
});

test("line 98", (t) => {
  return t.is(toTAML({
    a: 1,
    b: 2
  }), `---
a: 1
b: 2`);
});

test("line 105", (t) => {
  return t.is(toTAML(['a', 'b']), `---
- a
- b`);
});

test("line 112", (t) => {
  return t.is(toTAML([
    'a',
    'b',
    {
      a: 1
    },
    ['x']
  ]), untabify(`---
- a
- b
-
	a: 1
-
	- x`));
});

test("line 123", (t) => {
  return t.is(toTAML(['xyz', 42, false, 'false', undef]), `---
- xyz
- 42
- false
- 'false'
- undef`);
});
