{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "test/indent.test.coffee"
  ],
  "names": [],
  "mappings": "AAAoB;AAEpB,OAAA;EAAQ,KAAR;EAAe,SAAf;CAAA,MAAA;;AACA,OAAA;EAAQ,MAAR;CAAA,MAAA;;AACA,OAAO,CAAA,OAAP,MAAA;;AACA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,GAAtB;;AACA,OAAA;EACC,UADD;EAEC,KAFD;EAEQ,IAFR;EAEc,QAFd;EAEwB,QAFxB;EAEkC,KAFlC;EAEyC,MAFzC;EAEiD,KAFjD;CAAA,MAAA,6BANoB;;;AAapB,KAAA,CAAM,YAAA,CAAa,KAAb,CAAN,EAA2B,KAA3B;;AACA,KAAA,CAAM,YAAA,CAAa,EAAb,CAAN,EAAwB,KAAxB;;AACA,KAAA,CAAM,YAAA,CAAa,OAAb,CAAN,EAA6B,IAA7B;;AACA,KAAA,CAAM,YAAA,CAAa,SAAb,CAAN,EAA+B,IAA/B;;AACA,KAAA,CAAM,YAAA,CAAa,MAAb,CAAN,EAA4B,GAA5B;;AACA,KAAA,CAAM,YAAA,CAAa,QAAb,CAAN,EAA8B,KAA9B;;AACA,KAAA,CAAM,QAAA,CAAA,CAAA;SAAM,YAAA,CAAa,QAAb;AAAN,CAAN;;AACA,KAAA,CAAM,QAAA,CAAA,CAAA;SAAM,YAAA,CAAa,QAAb;AAAN,CAAN,EApBoB;;;AAwBpB,KAAA,CAAM,WAAA,CAAY,KAAZ,CAAN,EAA0B,CAA1B;;AACA,KAAA,CAAM,WAAA,CAAY,OAAZ,CAAN,EAA4B,CAA5B;;AACA,KAAA,CAAM,WAAA,CAAY,SAAZ,CAAN,EAA8B,CAA9B,EA1BoB;;;AA8BpB,MAAA,CAAO,UAAA,CAAW,KAAX,CAAP;;AACA,KAAA,CAAO,UAAA,CAAW,OAAX,CAAP;;AACA,KAAA,CAAO,UAAA,CAAW,SAAX,CAAP,EAhCoB;;;AAoCpB,KAAA,CAAM,WAAA,CAAY,CAAZ,CAAN,EAAsB,EAAtB;;AACA,KAAA,CAAM,WAAA,CAAY,CAAZ,CAAN,EAAsB,IAAtB;;AACA,KAAA,CAAM,WAAA,CAAY,CAAZ,CAAN,EAAsB,MAAtB,EAtCoB;;;AA0CpB,KAAA,CAAM,QAAA,CAAS,KAAT,CAAN,EAAuB,KAAvB;;AACA,KAAA,CAAM,QAAA,CAAS,OAAT,CAAN,EAAyB,KAAzB;;AACA,KAAA,CAAM,QAAA,CAAS,SAAT,CAAN,EAA2B,KAA3B;;AAEA,KAAA,CAAM,QAAA,CAAS,EAAT,CAAN,EAAoB,EAApB;;AACA,KAAA,CAAM,QAAA,CAAS,CAAC,KAAD,CAAT,CAAN,EAAyB,CAAC,KAAD,CAAzB;;AACA,KAAA,CAAM,QAAA,CAAS,CAAC,OAAD,CAAT,CAAN,EAA2B,CAAC,KAAD,CAA3B;;AACA,KAAA,CAAM,QAAA,CAAS,CAAC,SAAD,CAAT,CAAN,EAA6B,CAAC,KAAD,CAA7B;;AAEA,KAAA,CAAM,QAAA,CAAS,0BAAT,CAAN,EAA4C,CAAA;KAAA,CAA5C,EAnDoB;;;;AA2DpB,KAAA,CAAM,QAAA,CAAS,KAAT,CAAN,EAAuB,KAAvB;;AACA,KAAA,CAAM,QAAA,CAAS,QAAT,CAAN,EAA0B,KAA1B;;AACA,KAAA,CAAM,QAAA,CAAS,WAAT,CAAN,EAA6B,KAA7B;;AAEA,KAAA,CAAM,QAAA,CAAS,EAAT,CAAN,EAAoB,EAApB;;AACA,KAAA,CAAM,QAAA,CAAS,CAAC,KAAD,CAAT,CAAN,EAAyB,CAAC,KAAD,CAAzB;;AACA,KAAA,CAAM,QAAA,CAAS,CAAC,QAAD,CAAT,CAAN,EAA4B,CAAC,KAAD,CAA5B;;AACA,KAAA,CAAM,QAAA,CAAS,CAAC,WAAD,CAAT,CAAN,EAA+B,CAAC,KAAD,CAA/B,EAlEoB;;;;AAuEpB,KAAA,CAAM,QAAA,CAAS,CACd,KADc,EAEd,OAFc,EAGd,KAHc,CAAT,CAAN,EAIK,CACJ,KADI,EAEJ,OAFI,EAGJ,KAHI,CAJL;;AAUA,KAAA,CAAM,QAAA,CAAS,CACd,SADc,EAEd,WAFc,EAGd,SAHc,CAAT,CAAN,EAIK,CACJ,KADI,EAEJ,OAFI,EAGJ,KAHI,CAJL,EAjFoB;;;AA6FpB,CAAC,QAAA,CAAA,CAAA;AACD,MAAA,KAAA,EAAA;EAAC,KAAA,GAAQ;EACR,QAAA,GAAW;SACX,KAAA,CAAM,QAAA,CAAS,KAAT,CAAN,EAAuB,QAAvB;AAHA,CAAD,CAAA,CAAA,EA7FoB;;;AAqGpB,CAAC,QAAA,CAAA,CAAA;AACD,MAAA,KAAA,EAAA;EAAC,KAAA,GAAQ,CACP,WADO,EAEP,YAFO,EAGP,aAHO;EAKR,QAAA,GAAW,CACV,OADU,EAEV,QAFU,EAGV,SAHU;SAKX,KAAA,CAAM,QAAA,CAAS,KAAT,CAAN,EAAuB,QAAvB;AAXA,CAAD,CAAA,CAAA,EArGoB;;;AAqHpB,KAAA,CAAM,SAAA,CAAU,KAAV,CAAN,EAAwB,CAAC,CAAD,EAAI,KAAJ,CAAxB;;AACA,KAAA,CAAM,SAAA,CAAU,OAAV,CAAN,EAA0B,CAAC,CAAD,EAAI,KAAJ,CAA1B;;AACA,KAAA,CAAM,SAAA,CAAU,SAAV,CAAN,EAA4B,CAAC,CAAD,EAAI,KAAJ,CAA5B;;AACA,KAAA,CAAM,SAAA,CAAU,EAAV,CAAN,EAA2B,CAAC,CAAD,EAAI,EAAJ,CAA3B;;AACA,KAAA,CAAM,SAAA,CAAU,QAAV,CAAN,EAA2B,CAAC,CAAD,EAAI,EAAJ,CAA3B;;AACA,KAAA,CAAM,SAAA,CAAU,OAAV,CAAN,EAA2B,CAAC,CAAD,EAAI,EAAJ,CAA3B;;AACA,KAAA,CAAM,SAAA,CAAU,KAAV,CAAN,EAA2B,CAAC,CAAD,EAAI,EAAJ,CAA3B,EA3HoB;;;AA+HpB,KAAA,CAAM,QAAA,CAAS,KAAT,EAAgB,CAAhB,CAAN,EAA0B,KAA1B;;AACA,KAAA,CAAM,QAAA,CAAS,KAAT,EAAgB,CAAhB,CAAN,EAA0B,OAA1B;;AACA,KAAA,CAAM,QAAA,CAAS,KAAT,EAAgB,CAAhB,CAAN,EAA0B,SAA1B;;AACA,KAAA,CAAM,QAAA,CAAS,KAAT,EAAgB,CAAhB,EAAmB,IAAnB,CAAN,EAAgC,KAAhC;;AACA,KAAA,CAAM,QAAA,CAAS,KAAT,EAAgB,CAAhB,EAAmB,IAAnB,CAAN,EAAgC,OAAhC;;AACA,KAAA,CAAM,QAAA,CAAS,KAAT,EAAgB,CAAhB,EAAmB,IAAnB,CAAN,EAAgC,SAAhC,EApIoB;;;AAuIpB,KAAA,CAAM,QAAA,CAAS,YAAT,EAAuB,CAAvB,CAAN,EAAiC,oBAAjC;;AAEA,CAAC,QAAA,CAAA,CAAA;AACD,MAAA,KAAA,EAAA,GAAA;;EAEC,KAAA,GAAQ,CAAA;;;;gBAAA;EAOR,GAAA,GAAM,CAAA;;;;kBAAA;SAON,KAAA,CAAM,QAAA,CAAS,KAAT,EAAgB,CAAhB,CAAN,EAA0B,GAA1B;AAjBA,CAAD,CAAA,CAAA,EAzIoB;;;;;AAgKpB,KAAA,CAAM,QAAA,CAAS,CAAC,KAAD,EAAO,EAAP,EAAU,KAAV,CAAT,EAA2B,CAA3B,CAAN,EACE,CAAC,SAAD,EAAW,EAAX,EAAc,SAAd,CADF;;AAGA,CAAC,QAAA,CAAA,CAAA;AACD,MAAA,IAAA,EAAA;EAAC,MAAA,GAAS,CACR,MADQ,EAER,kBAFQ,EAGR,EAHQ,EAIR,KAJQ,EAKR,kBALQ;EAOT,IAAA,GAAS,CACR,QADQ,EAER,oBAFQ,EAGR,EAHQ,EAIR,OAJQ,EAKR,oBALQ;SAOT,KAAA,CAAM,QAAA,CAAS,MAAT,EAAiB,CAAjB,CAAN,EAA2B,IAA3B;AAfA,CAAD,CAAA,CAAA,EAnKoB;;;AAuLpB,KAAA,CAAM,QAAA,CAAS,CAAC,UAAD,EAAY,EAAZ,EAAe,KAAf,CAAT,EAAgC,CAAhC,CAAN,EACE,CAAC,OAAD,EAAU,OAAV,EAAmB,EAAnB,EAAuB,OAAvB,CADF,EAvLoB;;;AA4LpB,KAAA,CAAM,QAAA,CAAS,qBAAT,EAAgC,CAAhC,CAAN,EAA0C,uBAA1C;;AACA,KAAA,CAAM,QAAA,CAAS,qBAAT,EAAgC,CAAhC,CAAN,EAA0C,yBAA1C,EA7LoB;;;;AAkMpB,KAAA,CAAM,WAAA,CAAY,6BAAZ,CAAN,EAAkD,CAAlD,EAlMoB;;;AAsMpB,CAAC,QAAA,CAAA,CAAA;AACD,MAAA;EAAC,KAAA,GAAQ,CAAA;SAAA;EAKR,KAAA,CAAM,OAAA,CAAQ,KAAR,EAAe,UAAf,EAA2B,WAA3B,CAAN,EAA+C,CAAA;;;SAAA,CAA/C;SAOA,KAAA,CAAM,OAAA,CAAQ,KAAR,EAAe,KAAf,EAAsB,MAAtB,EAA8B,KAA9B,CAAN,EAA4C,CAAA;;;IAAA,CAA5C;AAbA,CAAD,CAAA,CAAA",
  "sourcesContent": [
    "# indent.test.coffee\n\nimport {undef, isInteger} from '@jdeighan/base-utils'\nimport {assert} from '@jdeighan/base-utils/exceptions'\nimport * as lib from '@jdeighan/base-utils/indent'\nObject.assign(global, lib)\nimport {\n\tUnitTester,\n\tequal, like, notequal, succeeds, fails, truthy, falsy,\n\t} from '@jdeighan/base-utils/utest'\n\n# ---------------------------------------------------------------------------\n\nequal getOneIndent(\"abc\"), undef\nequal getOneIndent(\"\"), undef\nequal getOneIndent(\"\\tabc\"), \"\\t\"\nequal getOneIndent(\"\\t\\tabc\"), \"\\t\"\nequal getOneIndent(\" abc\"), \" \"\nequal getOneIndent(\"   abc\"), \"   \"\nfails () -> getOneIndent(\" \\tabc\")\nfails () -> getOneIndent(\"\\t abc\")\n\n# ---------------------------------------------------------------------------\n\nequal indentLevel(\"abc\"), 0\nequal indentLevel(\"\\tabc\"), 1\nequal indentLevel(\"\\t\\tabc\"), 2\n\n# ---------------------------------------------------------------------------\n\ntruthy isUndented(\"abc\")\nfalsy  isUndented(\"\\tabc\")\nfalsy  isUndented(\"\\t\\tabc\")\n\n# ---------------------------------------------------------------------------\n\nequal indentation(0), ''\nequal indentation(1), \"\\t\"\nequal indentation(2), \"\\t\\t\"\n\n# ---------------------------------------------------------------------------\n\nequal undented(\"abc\"), \"abc\"\nequal undented(\"\\tabc\"), \"abc\"\nequal undented(\"\\t\\tabc\"), \"abc\"\n\nequal undented([]), []\nequal undented(['abc']), ['abc']\nequal undented(['\\tabc']), ['abc']\nequal undented(['\\t\\tabc']), ['abc']\n\nequal undented('\\n\\n\\t\\tabc\\n\\t\\t\\t\\tdef'), \"\"\"\n\tabc\n\t\t\tdef\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n# --- test with spaces\n\nequal undented(\"abc\"), \"abc\"\nequal undented(\"   abc\"), \"abc\"\nequal undented(\"      abc\"), \"abc\"\n\nequal undented([]), []\nequal undented(['abc']), ['abc']\nequal undented(['   abc']), ['abc']\nequal undented(['      abc']), ['abc']\n\n# ---------------------------------------------------------------------------\n# --- test with multiple lines\n\nequal undented([\n\t'abc'\n\t'\\txyz'\n\t'mmm'\n\t]), [\n\t'abc'\n\t'\\txyz'\n\t'mmm'\n\t]\n\nequal undented([\n\t'\\t\\tabc'\n\t'\\t\\t\\txyz'\n\t'\\t\\tmmm'\n\t]), [\n\t'abc'\n\t'\\txyz'\n\t'mmm'\n\t]\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tblock = \"\\t\\tfirst\\n\\t\\tsecond\\n\\t\\t\\tthird\\n\"\n\texpected = \"first\\nsecond\\n\\tthird\\n\"\n\tequal undented(block), expected\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tarray = [\n\t\t\"\\t\\tfirst\",\n\t\t\"\\t\\tsecond\",\n\t\t\"\\t\\t\\tthird\"\n\t\t]\n\texpected = [\n\t\t\"first\",\n\t\t\"second\",\n\t\t\"\\tthird\"\n\t\t]\n\tequal undented(array), expected\n\t)()\n\n# ---------------------------------------------------------------------------\n\nequal splitLine(\"abc\"), [0, \"abc\"]\nequal splitLine(\"\\tabc\"), [1, \"abc\"]\nequal splitLine(\"\\t\\tabc\"), [2, \"abc\"]\nequal splitLine(\"\"),       [0, \"\"]\nequal splitLine(\"\\t\\t\\t\"), [0, \"\"]\nequal splitLine(\"\\t \\t\"),  [0, \"\"]\nequal splitLine(\"   \"),    [0, \"\"]\n\n# ---------------------------------------------------------------------------\n\nequal indented(\"abc\", 0), \"abc\"\nequal indented(\"abc\", 1), \"\\tabc\"\nequal indented(\"abc\", 2), \"\\t\\tabc\"\nequal indented(\"abc\", 0, '  '), \"abc\"\nequal indented(\"abc\", 1, '  '), \"  abc\"\nequal indented(\"abc\", 2, '  '), \"    abc\"\n\n# --- empty lines, indented, should just be empty lines\nequal indented(\"abc\\n\\ndef\", 2), \"\\t\\tabc\\n\\n\\t\\tdef\"\n\n(() ->\n\t# --- test indenting multi-line strings\n\n\tblock = \"\"\"\n\t\tmain\n\t\t\\toverflow: auto\n\n\t\tnav\n\t\t\\toverflow: auto\n\t\t\"\"\"\n\texp = \"\"\"\n\t\t\\tmain\n\t\t\\t\\toverflow: auto\n\n\t\t\\tnav\n\t\t\\t\\toverflow: auto\n\t\t\"\"\"\n\tequal indented(block, 1), exp\n\t)()\n\n# --- indented also handles arrays, so test them, too\n\n# --- empty lines, indented, should just be empty lines\nequal indented(['abc','','def'], 2),\n\t\t['\\t\\tabc','','\\t\\tdef']\n\n(() ->\n\tlLines = [\n\t\t'main'\n\t\t'\\toverflow: auto'\n\t\t''\n\t\t'nav'\n\t\t'\\toverflow: auto'\n\t\t]\n\tlExp   = [\n\t\t'\\tmain'\n\t\t'\\t\\toverflow: auto'\n\t\t''\n\t\t'\\tnav'\n\t\t'\\t\\toverflow: auto'\n\t\t]\n\tequal indented(lLines, 1), lExp\n\t)()\n\n# --- make sure ALL internal lines are indented\n\nequal indented(['abc\\ndef','','ghi'], 1),\n\t\t['\\tabc', '\\tdef', '', '\\tghi']\n\n# ---------------------------------------------------------------------------\n\nequal indented(\"export name = undef\", 1), \"\\texport name = undef\"\nequal indented(\"export name = undef\", 2), \"\\t\\texport name = undef\"\n\n# ---------------------------------------------------------------------------\n# make sure indentLevel() works for blocks\n\nequal indentLevel(\"\\t\\tabc\\n\\t\\tdef\\n\\t\\t\\tghi\"), 2\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tblock = \"\"\"\n\t\tx = 42\n\t\tcallme(x)\n\t\t\"\"\"\n\n\tequal enclose(block, '<script>', '</script>'), \"\"\"\n\t\t<script>\n\t\t\tx = 42\n\t\t\tcallme(x)\n\t\t</script>\n\t\t\"\"\"\n\n\tequal enclose(block, 'pre', 'post', '...'), \"\"\"\n\t\tpre\n\t\t...x = 42\n\t\t...callme(x)\n\t\tpost\n\t\t\"\"\"\n\n\t)()"
  ]
}