{
  "version": 3,
  "file": "indent.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\indent.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# indent.test.coffee\r\n\r\nimport {undef, isInteger} from '@jdeighan/base-utils'\r\nimport {assert} from '@jdeighan/base-utils/exceptions'\r\nimport {\r\n\tindentLevel, isUndented, indentation, undented, splitLine,\r\n\tindented, enclose, getOneIndent,\r\n\t} from '@jdeighan/base-utils/indent'\r\nimport {utest} from '@jdeighan/base-utils/utest'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nutest.equal getOneIndent(\"abc\"), undef\r\nutest.equal getOneIndent(\"\"), undef\r\nutest.equal getOneIndent(\"\\tabc\"), \"\\t\"\r\nutest.equal getOneIndent(\"\\t\\tabc\"), \"\\t\"\r\nutest.equal getOneIndent(\" abc\"), \" \"\r\nutest.equal getOneIndent(\"   abc\"), \"   \"\r\nutest.throws () -> getOneIndent(\" \\tabc\")\r\nutest.throws () -> getOneIndent(\"\\t abc\")\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nutest.equal indentLevel(\"abc\"), 0\r\nutest.equal indentLevel(\"\\tabc\"), 1\r\nutest.equal indentLevel(\"\\t\\tabc\"), 2\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nutest.truthy isUndented(\"abc\")\r\nutest.falsy  isUndented(\"\\tabc\")\r\nutest.falsy  isUndented(\"\\t\\tabc\")\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nutest.equal indentation(0), ''\r\nutest.equal indentation(1), \"\\t\"\r\nutest.equal indentation(2), \"\\t\\t\"\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nutest.equal undented(\"abc\"), \"abc\"\r\nutest.equal undented(\"\\tabc\"), \"abc\"\r\nutest.equal undented(\"\\t\\tabc\"), \"abc\"\r\n\r\nutest.equal undented([]), []\r\nutest.equal undented(['abc']), ['abc']\r\nutest.equal undented(['\\tabc']), ['abc']\r\nutest.equal undented(['\\t\\tabc']), ['abc']\r\n\r\nutest.equal undented('\\n\\n\\t\\tabc\\n\\t\\t\\t\\tdef'), \"\"\"\r\n\tabc\r\n\t\t\tdef\r\n\t\"\"\"\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- test with spaces\r\n\r\nutest.equal undented(\"abc\"), \"abc\"\r\nutest.equal undented(\"   abc\"), \"abc\"\r\nutest.equal undented(\"      abc\"), \"abc\"\r\n\r\nutest.equal undented([]), []\r\nutest.equal undented(['abc']), ['abc']\r\nutest.equal undented(['   abc']), ['abc']\r\nutest.equal undented(['      abc']), ['abc']\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- test with multiple lines\r\n\r\nutest.equal undented([\r\n\t'abc'\r\n\t'\\txyz'\r\n\t'mmm'\r\n\t]), [\r\n\t'abc'\r\n\t'\\txyz'\r\n\t'mmm'\r\n\t]\r\n\r\nutest.equal undented([\r\n\t'\\t\\tabc'\r\n\t'\\t\\t\\txyz'\r\n\t'\\t\\tmmm'\r\n\t]), [\r\n\t'abc'\r\n\t'\\txyz'\r\n\t'mmm'\r\n\t]\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() ->\r\n\tblock = \"\\t\\tfirst\\n\\t\\tsecond\\n\\t\\t\\tthird\\n\"\r\n\texpected = \"first\\nsecond\\n\\tthird\\n\"\r\n\tutest.equal undented(block), expected\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() ->\r\n\tarray = [\r\n\t\t\"\\t\\tfirst\",\r\n\t\t\"\\t\\tsecond\",\r\n\t\t\"\\t\\t\\tthird\"\r\n\t\t]\r\n\texpected = [\r\n\t\t\"first\",\r\n\t\t\"second\",\r\n\t\t\"\\tthird\"\r\n\t\t]\r\n\tutest.equal undented(array), expected\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nutest.equal splitLine(\"abc\"), [0, \"abc\"]\r\nutest.equal splitLine(\"\\tabc\"), [1, \"abc\"]\r\nutest.equal splitLine(\"\\t\\tabc\"), [2, \"abc\"]\r\nutest.equal splitLine(\"\"),       [0, \"\"]\r\nutest.equal splitLine(\"\\t\\t\\t\"), [0, \"\"]\r\nutest.equal splitLine(\"\\t \\t\"),  [0, \"\"]\r\nutest.equal splitLine(\"   \"),    [0, \"\"]\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nutest.equal indented(\"abc\", 0), \"abc\"\r\nutest.equal indented(\"abc\", 1), \"\\tabc\"\r\nutest.equal indented(\"abc\", 2), \"\\t\\tabc\"\r\nutest.equal indented(\"abc\", 0, '  '), \"abc\"\r\nutest.equal indented(\"abc\", 1, '  '), \"  abc\"\r\nutest.equal indented(\"abc\", 2, '  '), \"    abc\"\r\n\r\n# --- empty lines, indented, should just be empty lines\r\nutest.equal indented(\"abc\\n\\ndef\", 2), \"\\t\\tabc\\n\\n\\t\\tdef\"\r\n\r\n(() ->\r\n\t# --- test indenting multi-line strings\r\n\r\n\tblock = \"\"\"\r\n\t\tmain\r\n\t\t\\toverflow: auto\r\n\r\n\t\tnav\r\n\t\t\\toverflow: auto\r\n\t\t\"\"\"\r\n\texp = \"\"\"\r\n\t\t\\tmain\r\n\t\t\\t\\toverflow: auto\r\n\r\n\t\t\\tnav\r\n\t\t\\t\\toverflow: auto\r\n\t\t\"\"\"\r\n\tutest.equal indented(block, 1), exp\r\n\t)()\r\n\r\n# --- indented also handles arrays, so test them, too\r\n\r\n# --- empty lines, indented, should just be empty lines\r\nutest.equal indented(['abc','','def'], 2),\r\n\t\t['\\t\\tabc','','\\t\\tdef']\r\n\r\n(() ->\r\n\tlLines = [\r\n\t\t'main'\r\n\t\t'\\toverflow: auto'\r\n\t\t''\r\n\t\t'nav'\r\n\t\t'\\toverflow: auto'\r\n\t\t]\r\n\tlExp   = [\r\n\t\t'\\tmain'\r\n\t\t'\\t\\toverflow: auto'\r\n\t\t''\r\n\t\t'\\tnav'\r\n\t\t'\\t\\toverflow: auto'\r\n\t\t]\r\n\tutest.equal indented(lLines, 1), lExp\r\n\t)()\r\n\r\n# --- make sure ALL internal lines are indented\r\n\r\nutest.equal indented(['abc\\ndef','','ghi'], 1),\r\n\t\t['\\tabc', '\\tdef', '', '\\tghi']\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nutest.equal indented(\"export name = undef\", 1), \"\\texport name = undef\"\r\nutest.equal indented(\"export name = undef\", 2), \"\\t\\texport name = undef\"\r\n\r\n# ---------------------------------------------------------------------------\r\n# make sure indentLevel() works for blocks\r\n\r\nutest.equal indentLevel(\"\\t\\tabc\\n\\t\\tdef\\n\\t\\t\\tghi\"), 2\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() ->\r\n\tblock = \"\"\"\r\n\t\tx = 42\r\n\t\tcallme(x)\r\n\t\t\"\"\"\r\n\r\n\tutest.equal enclose(block, '<script>', '</script>'), \"\"\"\r\n\t\t<script>\r\n\t\t\tx = 42\r\n\t\t\tcallme(x)\r\n\t\t</script>\r\n\t\t\"\"\"\r\n\r\n\tutest.equal enclose(block, 'pre', 'post', '...'), \"\"\"\r\n\t\tpre\r\n\t\t...x = 42\r\n\t\t...callme(x)\r\n\t\tpost\r\n\t\t\"\"\"\r\n\r\n\t)()\r\n"
  ]
}