{
  "version": 3,
  "file": "ll-fs.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\ll-fs.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# ll-fs.test.coffee\n\nimport {undef, LOG, samelist} from '@jdeighan/base-utils'\nimport {utest} from '@jdeighan/base-utils/utest'\nimport {\n\tmyself, mydir, mkpath, mkDir, touch, isFile, isDir,\n\tpathType, rmFile, rmDir, parsePath, rename, clearDir,\n\tdirContents, parallelPath, subPath,\n\t} from '@jdeighan/base-utils/ll-fs'\n\ndir = mydir(import.meta.url)\nsubdir = mkpath(dir, 'test')\n\n# ---------------------------------------------------------------------------\n\nutest.equal mkpath('C:\\\\test\\\\me'), 'c:/test/me'\nutest.equal mkpath('c:/test/me', 'def'), 'c:/test/me/def'\nutest.equal mkpath('c:\\\\Users', 'johnd'), 'c:/Users/johnd'\n\nutest.equal mkpath('C:\\\\test\\\\me'), 'c:/test/me'\nutest.equal mkpath('c:\\\\test\\\\me'), 'c:/test/me'\nutest.equal mkpath('C:/test/me'), 'c:/test/me'\nutest.equal mkpath('c:/test/me'), 'c:/test/me'\n\n# --- Test providing multiple args\nutest.equal mkpath('c:/', 'test', 'me'), 'c:/test/me'\nutest.equal mkpath('c:\\\\', 'test', 'me'), 'c:/test/me'\n\n# --- The following exists in the test folder:\n#        test/\n#           file1.txt\n#           file1.zh\n#           file2.txt\n#           file2.zh\n#           file3.txt\n\nutest.truthy isDir(mkpath(dir, 'test'))\nutest.falsy  isDir(mkpath(dir, 'xxxxx'))\nutest.truthy isFile(mkpath(dir, 'test', 'file1.txt'))\nutest.truthy isFile(mkpath(dir, 'test', 'file1.zh'))\nutest.falsy  isFile(mkpath(dir, 'test', 'file1'))\n\nutest.throws () -> pathType(42)\nutest.throws () -> pathType(42)\nutest.equal pathType(':::::'), 'missing'\n\n# --- Test creating dir, then deleting dir\ndir2 = mkpath(subdir, 'test2')\nutest.falsy isDir(dir2)\nutest.equal pathType(dir2), 'missing'\nmkDir dir2\nutest.truthy isDir(dir2)\nutest.equal pathType(dir2), 'dir'\nif (dir == 'c:/User/johnd/base-utils/test')\n\tutest.equal parsePath(dir2), {\n\t\troot: 'c:/'\n\t\tdir: 'c:/Users/johnd/base-utils/test/test'\n\t\t}\nrmDir dir2\nutest.falsy isDir(dir2)\n\n# --- Test creating file, then deleting dir\nfile2 = mkpath(subdir, 'file99.test.txt')\nutest.falsy isFile(file2)\nutest.equal pathType(file2), 'missing'\ntouch file2\nutest.truthy isFile(file2)\nutest.equal pathType(file2), 'file'\nif (dir == 'c:/Users/johnd/base-utils/test')\n\tutest.like parsePath(dir), {\n\t\tbase: 'test'\n\t\tdir: 'c:/Users/johnd/base-utils'\n\t\text: ''\n\t\tfileName: 'test'\n\t\tfilePath: 'c:/Users/johnd/base-utils/test'\n\t\tname: 'test'\n\t\tpath: 'c:/Users/johnd/base-utils/test'\n\t\tpurpose: undef\n\t\troot: 'c:/'\n\t\tstub: 'test'\n\t\ttype: 'dir'\n\t\t}\n\tutest.like parsePath(file2), {\n\t\tbase: 'file99.test.txt'\n\t\tdir: 'c:/Users/johnd/base-utils/test/test'\n\t\text: '.txt'\n\t\tfileName: 'file99.test.txt'\n\t\tfilePath: 'c:/Users/johnd/base-utils/test/test/file99.test.txt'\n\t\tname: 'file99.test'\n\t\tpath: 'c:/Users/johnd/base-utils/test/test/file99.test.txt'\n\t\tpurpose: 'test'\n\t\troot: 'c:/'\n\t\tstub: 'file99.test'\n\t\ttype: 'file'\n\t\t}\nrmFile file2\nutest.falsy isFile(file2)\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tdirPath = \"./test/tempdir\"\n\tfile1 = mkpath(dirPath, 'file1.txt')\n\tfile2 = mkpath(dirPath, 'file2.txt')\n\tfile3 = mkpath(dirPath, 'file3.txt')\n\n\tutest.falsy  isDir(dirPath)\n\tmkDir dirPath\n\tutest.truthy isDir(dirPath)\n\n\ttouch file1\n\ttouch file2\n\n\tutest.truthy isFile(file1)\n\tutest.truthy isFile(file2)\n\tutest.falsy  isFile(file3)\n\n\tutest.equal pathType(dirPath), 'dir'\n\tutest.equal pathType(file2), 'file'\n\tutest.equal pathType(file3), 'missing'\n\n\tutest.truthy samelist(dirContents(dirPath), ['file1.txt','file2.txt'])\n\trename file2, file3\n\tutest.truthy samelist(dirContents(dirPath), ['file1.txt','file3.txt'])\n\trmFile file1\n\tutest.truthy samelist(dirContents(dirPath), ['file3.txt'])\n\tclearDir dirPath\n\tutest.truthy samelist(dirContents(dirPath), [])\n\n\tutest.truthy isDir(dirPath)\n\trmDir dirPath\n\tutest.falsy  isDir(dirPath)\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test parallelPath\n\npath    = 'c:/Users/johnd/base-utils/src/lib/indent.coffee'\nnewpath = 'c:/Users/johnd/base-utils/src/temp/indent.coffee'\nutest.equal parallelPath(path), newpath\n\n# path   = 'c:/Users/johnd/base-utils/src/lib/indent.coffee'\nnewpath2 = 'c:/Users/johnd/base-utils/src/dummy/indent.coffee'\nutest.equal parallelPath(path, 'dummy'), newpath2\n\n# path   = 'c:/Users/johnd/base-utils/src/lib/indent.coffee'\nnewpath3 = 'c:/Users/johnd/base-utils/src/lib/temp/indent.coffee'\nutest.equal subPath(path), newpath3\n\n# path   = 'c:/Users/johnd/base-utils/src/lib/indent.coffee'\nnewpath4 = 'c:/Users/johnd/base-utils/src/lib/dummy/indent.coffee'\nutest.equal subPath(path, 'dummy'), newpath4\n"
  ]
}