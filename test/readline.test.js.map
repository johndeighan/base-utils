{
  "version": 3,
  "file": "readline.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\readline.test.coffee"
  ],
  "names": [],
  "mappings": "AAAsB;AAAA,IAAA,GAAA,EAAA,OAAA,EAAA;;AAEtB,OAAO,IAAP,MAAA;;AACA,OAAA;EAAQ,KAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,YAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,MAAR;CAAA,MAAA;;AACA,OAAA;EACC,MADD;EACS,KADT;EACgB,SADhB;EAC2B,KAD3B;EACkC,IADlC;EACwC,gBADxC;EAEC,WAFD;EAEc,YAFd;EAE4B,iBAF5B;CAAA,MAAA;;AAKA,GAAA,GAAM,OAAO,CAAC,GAAR,CAAA,EAXgB;;AAYtB,OAAA,GAAU,MAAA,CAAO,GAAP,EAAY,MAAZ;;AACV,QAAA,GAAW,MAAA,CAAO,GAAP,EAAY,MAAZ,EAAoB,cAApB,EAbW;;;;AAkBtB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,IAAA,EAAA,MAAA,EAAA;EAAC,IAAA,GAAO,YAAA,CAAa,QAAb,EAAR;;;;;;;;EASC,MAAA,GAAS;EACT,KAAA,YAAA;IACC,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,WAAL,CAAA,CAAZ;EADD;SAEA,IAAA,CAAK,SAAL,EAAgB,CAAC,CAAD,CAAA,GAAA;WAAO,CAAC,CAAC,SAAF,CAAY,MAAZ,EAAoB,CAAC,KAAD,EAAO,KAAP,EAAa,KAAb,EAAmB,KAAnB,EAAyB,KAAzB,CAApB;EAAP,CAAhB;AAbA,CAAD,CAAA,CAAA,EAlBsB;;;;AAqCtB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,QAAA,EAAA,cAAA,EAAA;EAAC,cAAA,GAAiB,SAAA,CAAA,CAAA;IAChB,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;EAJU;EAOjB,QAAA,GAAW,CAAC,IAAD,EAAO,QAAP,CAAA,GAAA;IACV,IAAI,IAAA,GAAO,CAAX;AACC,aAAO,CAAA,CAAA,CAAG,QAAQ,CAAC,KAAZ,EAAA,CAAA,CAAqB,IAArB,CAAA,EADR;KAAA,MAAA;AAGC,aAAO,MAHR;;EADU;EAMX,MAAA,GAAS,WAAA,CAAY,cAAA,CAAA,CAAZ,EAA8B,QAA9B,EAAwC;IAAC,KAAA,EAAO;EAAR,CAAxC;SACT,IAAA,CAAK,SAAL,EAAgB,CAAC,CAAD,CAAA,GAAA;WAAO,CAAC,CAAC,SAAF,CAAY,MAAZ,EAAoB,CAAC,KAAD,EAAQ,KAAR,CAApB;EAAP,CAAhB;AAfA,CAAD,CAAA,CAAA,EArCsB;;;;AA0DtB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,QAAA,EAAA,MAAA;;;;;;;;EAQC,QAAA,GAAW,CAAC,IAAD,EAAO,QAAP,CAAA,GAAA;IACV,IAAG,CAAC,IAAA,KAAQ,KAAT,CAAA,IAAmB,CAAC,IAAA,KAAQ,KAAT,CAAtB;AACC,aAAO,CAAA,CAAA,CAAG,QAAQ,CAAC,KAAZ,EAAA,CAAA,CAAqB,IAArB,CAAA,EADR;KAAA,MAAA;AAGC,aAAO,MAHR;;EADU;EAMX,MAAA,GAAS,iBAAA,CAAkB,QAAlB,EAA4B,QAA5B,EAAsC;IAAC,KAAA,EAAO;EAAR,CAAtC;SACT,IAAA,CAAK,SAAL,EAAgB,CAAC,CAAD,CAAA,GAAA;WAAO,CAAC,CAAC,SAAF,CAAY,MAAZ,EAAoB,CAAC,SAAD,EAAY,SAAZ,CAApB;EAAP,CAAhB;AAhBA,CAAD,CAAA,CAAA",
  "sourcesContent": [
    "# readline.test.coffee\r\n\r\nimport test from 'ava'\r\nimport {undef} from '@jdeighan/base-utils'\r\nimport {setDebugging} from '@jdeighan/base-utils/debug'\r\nimport {mkpath} from '@jdeighan/base-utils/ll-fs'\r\nimport {\r\n\tisFile, isDir, mkdirSync, slurp, barf, forEachFileInDir,\r\n\tforEachItem, lineIterator, forEachLineInFile,\r\n\t} from '@jdeighan/base-utils/fs'\r\n\r\ndir = process.cwd()     # should be root directory of @jdeighan/base-utils\r\ntestDir = mkpath(dir, 'test')\r\ntestPath = mkpath(dir, 'test', 'readline.txt')\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- test lineIterator()\r\n\r\n(() =>\r\n\titer = lineIterator(testPath)\r\n\t# --- Contents:\r\n\t#        abc\r\n\t#        def\r\n\t#        ghi\r\n\t#        jkl\r\n\t#        mno\r\n\t#\r\n\r\n\tlLines = []\r\n\tfor line from iter\r\n\t\tlLines.push line.toUpperCase()\r\n\ttest \"line 29\", (t) => t.deepEqual(lLines, ['ABC','DEF','GHI','JKL','MNO'])\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- test forEachItem()\r\n\r\n(() =>\r\n\tcountGenerator = () ->\r\n\t\tyield 1\r\n\t\tyield 2\r\n\t\tyield 3\r\n\t\tyield 4\r\n\t\treturn\r\n\r\n\tcallback = (item, hContext) =>\r\n\t\tif (item > 2)\r\n\t\t\treturn \"#{hContext.label} #{item}\"\r\n\t\telse\r\n\t\t\treturn undef\r\n\r\n\tresult = forEachItem countGenerator(), callback, {label: 'X'}\r\n\ttest \"line 51\", (t) => t.deepEqual(result, ['X 3', 'X 4'])\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- test forEachLineInFile()\r\n\r\n(() =>\r\n\t# --- Contents:\r\n\t#        abc\r\n\t#        def\r\n\t#        ghi\r\n\t#        jkl\r\n\t#        mno\r\n\t#\r\n\r\n\tcallback = (item, hContext) =>\r\n\t\tif (item == 'def') || (item == 'jkl')\r\n\t\t\treturn \"#{hContext.label} #{item}\"\r\n\t\telse\r\n\t\t\treturn undef\r\n\r\n\tresult = forEachLineInFile testPath, callback, {label: '-->'}\r\n\ttest \"line 74\", (t) => t.deepEqual(result, ['--> def', '--> jkl'])\r\n\t)()\r\n"
  ]
}