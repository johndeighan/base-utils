{
  "version": 3,
  "file": "readline.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\readline.test.coffee"
  ],
  "names": [],
  "mappings": "AAAsB;AAAA,IAAA,SAAA,EAAA;;AAEtB,OAAA;EAAQ,KAAR;EAAe,OAAf;CAAA,MAAA;;AACA,OAAA;EACC,UADD;EACa,iBADb;CAAA,MAAA;;AAGA,OAAA;EAAQ,CAAR;CAAA,MAAA,6BANsB;;;;AAUtB,SAAA,GAAY;;AACZ,SAAA,GAAY,uBAXU;;;AAetB,CAAC,CAAA,CAAA,GAAA;AAED,MAAA,MAAA,EAAA,IAAA,EAAA;EAAC,MAAA,GAAS;AAET;EAAA,KAAA,WAAA;IACC,MAAM,CAAC,IAAP,CAAY,IAAZ;EADD;SAGA,CAAC,CAAC,KAAF,CAAQ,MAAR,EAAgB,CAAC,KAAD,EAAQ,KAAR,EAAe,EAAf,EAAmB,KAAnB,EAA0B,KAA1B,CAAhB;AAPA,CAAD,CAAA,CAAA,EAfsB;;;;;AA6BtB,CAAC,CAAA,CAAA,GAAA;AAED,MAAA,IAAA,EAAA;EAAC,IAAA,GAAO,CAAC,IAAD,EAAO,QAAP,CAAA,GAAA;IACN,IAAI,IAAA,KAAQ,EAAZ;AACC,aAAO,MADR;KAAA,MAAA;AAGC,aAAO,CAAA,CAAA,CAAG,QAAQ,CAAC,MAAZ,CAAA,CAAA,CAAqB,IAAI,CAAC,WAAL,CAAA,CAArB,CAAA,EAHR;;EADM;EAMP,MAAA,GAAS,iBAAA,CAAkB,SAAlB,EAA6B,IAA7B,EAAmC;IAAC,MAAA,EAAQ;EAAT,CAAnC;SAET,CAAC,CAAC,KAAF,CAAQ,MAAR,EAAgB,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,CAAhB;AAVA,CAAD,CAAA,CAAA,EA7BsB;;;;;AA8CtB,CAAC,CAAA,CAAA,GAAA;AAED,MAAA,IAAA,EAAA;EAAC,IAAA,GAAO,CAAC,IAAD,EAAO,QAAP,CAAA,GAAA;IACN,IAAI,IAAA,KAAQ,EAAZ;AACC,aAAO,MADR;KAAA,MAAA;AAGC,aAAO,CAAA,CAAA,CAAG,QAAQ,CAAC,MAAZ,CAAA,CAAA,CAAqB,IAAI,CAAC,WAAL,CAAA,CAArB,CAAA,EAHR;;EADM;EAMP,MAAA,GAAS,iBAAA,CAAkB,SAAlB,EAA6B,IAA7B,EAAmC;IAAC,MAAA,EAAQ;EAAT,CAAnC;SAET,CAAC,CAAC,KAAF,CAAQ,MAAR,EAAgB,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,CAAhB;AAVA,CAAD,CAAA,CAAA,EA9CsB;;;;AA8DtB,CAAC,CAAA,CAAA,GAAA;AAED,MAAA,IAAA,EAAA;EAAC,IAAA,GAAO,CAAC,IAAD,EAAO,QAAP,CAAA,GAAA;IACN,IAAI,IAAA,KAAQ,EAAZ;MACC,MAAM,OADP;KAAA,MAAA;AAGC,aAAO,CAAA,CAAA,CAAG,QAAQ,CAAC,MAAZ,CAAA,CAAA,CAAqB,IAAI,CAAC,WAAL,CAAA,CAArB,CAAA,EAHR;;EADM;EAMP,MAAA,GAAS,iBAAA,CAAkB,SAAlB,EAA6B,IAA7B,EAAmC;IAAC,MAAA,EAAQ;EAAT,CAAnC;SAET,CAAC,CAAC,KAAF,CAAQ,MAAR,EAAgB,CAAC,OAAD,EAAU,OAAV,CAAhB;AAVA,CAAD,CAAA,CAAA",
  "sourcesContent": [
    "# readline.test.coffee\r\n\r\nimport {undef, defined} from '@jdeighan/base-utils'\r\nimport {\r\n\tallLinesIn, forEachLineInFile,\r\n\t} from '@jdeighan/base-utils/readline'\r\nimport {u} from '@jdeighan/base-utils/utest'\r\n\r\n# --- Similar files, but readline3 has terminating newline,\r\n#        readline4 does not\r\nfilePath3 = './test/readline3.txt'\r\nfilePath4 = './test/readline4.txt'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() =>\r\n\r\n\tlLines = []\r\n\r\n\tfor line from allLinesIn(filePath4)\r\n\t\tlLines.push line\r\n\r\n\tu.equal lLines, ['ghi', 'jkl', '', 'mno', 'pqr']\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Produce capitalized version, with a prefix \"> \"\r\n#        skipping blank lines\r\n\r\n(() =>\r\n\r\n\tfunc = (line, hContext) =>\r\n\t\tif (line == '')\r\n\t\t\treturn undef\r\n\t\telse\r\n\t\t\treturn \"#{hContext.prefix}#{line.toUpperCase()}\"\r\n\r\n\tlLines = forEachLineInFile filePath3, func, {prefix: '> '}\r\n\r\n\tu.equal lLines, ['> GHI', '> JKL', '> MNO', '> PQR']\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Produce capitalized version, with a prefix \"> \"\r\n#        skipping blank lines\r\n\r\n(() =>\r\n\r\n\tfunc = (line, hContext) =>\r\n\t\tif (line == '')\r\n\t\t\treturn undef\r\n\t\telse\r\n\t\t\treturn \"#{hContext.prefix}#{line.toUpperCase()}\"\r\n\r\n\tlLines = forEachLineInFile filePath4, func, {prefix: '> '}\r\n\r\n\tu.equal lLines, ['> GHI', '> JKL', '> MNO', '> PQR']\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- This time, stop processing when a blank line is found\r\n\r\n(() =>\r\n\r\n\tfunc = (line, hContext) =>\r\n\t\tif (line == '')\r\n\t\t\tthrow 'stop'\r\n\t\telse\r\n\t\t\treturn \"#{hContext.prefix}#{line.toUpperCase()}\"\r\n\r\n\tlLines = forEachLineInFile filePath4, func, {prefix: '> '}\r\n\r\n\tu.equal lLines, ['> GHI', '> JKL']\r\n\t)()\r\n"
  ]
}