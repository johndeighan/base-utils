{
  "version": 3,
  "file": "utils.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\utils.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# utils.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, getOptions, LOG, CWS,\r\n\tshuffle, keys, hasKey,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {dbgEnter, dbgReturn, dbg} from '@jdeighan/base-utils/debug'\r\nimport {\r\n\tmkpath, isFile,\r\n\t} from '@jdeighan/base-utils/fs'\r\nimport {FileProcessor} from '@jdeighan/base-utils/FileProcessor'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport splitEn = (enStr) =>\r\n\r\n\tdbgEnter 'splitEn', enStr\r\n\tlWords = []\r\n\tfor str in enStr.split(',')\r\n\t\tlWords.push CWS(str)\r\n\tdbgReturn 'splitEn', lWords\r\n\treturn lWords\r\n\r\n# ---------------------------------------------------------------------------\r\n# e.g. splits \"打扰 dǎ rǎo, 麻烦 má fan\"\r\n# into [\r\n#    {zh: '打扰', pinyin: 'dǎ rǎo'}\r\n#    {zh: '麻烦', pinyin: 'má fan'}\r\n#    ]\r\n\r\nexport splitZh = (zhStr) =>\r\n\r\n\tlWords = []\r\n\tfor str in zhStr.split(',')\r\n\t\tif lParts = str.match(///^\r\n\t\t\t\t\\s*\r\n\t\t\t\t([A-Z\\u4E00-\\u9FFF]+)  # Chinese characters\r\n\t\t\t\t(?:\r\n\t\t\t\t\t\\s*\r\n\t\t\t\t\t[\\!\\?]\r\n\t\t\t\t\t)?\r\n\t\t\t\t\\s+\r\n\t\t\t\t([A-Za-z\\s'āáǎàēéěèīíǐìōóǒòūúǔùǖüǘǚǜ]+)\r\n\t\t\t\t(?:\r\n\t\t\t\t\t\\s*\r\n\t\t\t\t\t[\\!\\?]\r\n\t\t\t\t\t)?\r\n\t\t\t\t\\s*\r\n\t\t\t\t$///)\r\n\t\t\t[_, zh, pinyin] = lParts\r\n\t\t\tlWords.push {\r\n\t\t\t\tzh: CWS(zh)\r\n\t\t\t\tpinyin: CWS(pinyin)\r\n\t\t\t\t}\r\n\t\telse\r\n\t\t\tcroak \"splitZh('#{zhStr}') - bad zh string\"\r\n\treturn lWords\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Should handle lines in:\r\n#        test.zh\r\n#        keepers.zh\r\n#        nouns.zh, etc.\r\n\r\nexport line2hWord = (line) ->\r\n\r\n\tdbgEnter 'line2hWord', line\r\n\tif notdefined(line) || (line.length == 0)\r\n\t\tdbgReturn 'line2hWord', undef\r\n\t\treturn undef\r\n\telse if lMatches = line.match(///^\r\n\t\t\t\\s*\r\n\t\t\t(?:\r\n\t\t\t\t([0-9]+) # one or more digits\r\n\t\t\t\t\\s*\r\n\t\t\t\t)?\r\n\t\t\t(?:\r\n\t\t\t\t(\\*+)    # some number of * chars\r\n\t\t\t\t\\s*\r\n\t\t\t\t)?\r\n\t\t\t(?:         # optional empty checkbox\r\n\t\t\t\t□\r\n\t\t\t\t\\s*\r\n\t\t\t\t)?\r\n\t\t\t\\s*         # skip white space\r\n\t\t\t(.*)        # the rest\r\n\t\t\t$///)\r\n\t\t[_, numStr, astStr, rest] = lMatches\r\n\t\tdbg \"rest = '#{rest}'\"\r\n\r\n\t\t# --- get number of correct tests\r\n\t\tnum = 0\r\n\t\tif defined(numStr)\r\n\t\t\tnum = parseInt(numStr, 10)\r\n\t\tif defined(astStr)\r\n\t\t\tnum += astStr.length\r\n\r\n\t\tpos = rest.indexOf('-')\r\n\t\tdbg \"pos = #{pos}\"\r\n\r\n\t\tzhStr = rest.substring(0, pos)\r\n\t\tenStr = rest.substring(pos+1)\r\n\t\tdbg \"zhStr = '#{zhStr}'\"\r\n\t\tdbg \"enStr = '#{enStr}'\"\r\n\r\n\t\thWord = {\r\n\t\t\tnum\r\n\t\t\tzh:     splitZh(zhStr)\r\n\t\t\ten:     splitEn(enStr)\r\n\t\t\t}\r\n\t\taddKey hWord\r\n\t\tdbgReturn 'line2hWord', hWord\r\n\t\treturn hWord\r\n\telse\r\n\t\tcroak \"Bad line: '#{line}'\"\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport zh_pinyin = (h) ->\r\n\r\n\treturn \"#{h.zh} #{h.pinyin}\"\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport zhStr = (hWord) ->\r\n\r\n\tlParts = for h in hWord.zh\r\n\t\tzh_pinyin(h)\r\n\treturn lParts.join(', ')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport enStr = (hWord) ->\r\n\r\n\treturn hWord.en.join(', ')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport hWord2line = (hWord, hOptions={}) ->\r\n\r\n\t{box, number} = getOptions hOptions, {\r\n\t\tbox: false\r\n\t\tnumber: true\r\n\t\t}\r\n\tstr = \"\"\r\n\tif number\r\n\t\tstr += \"#{hWord.num} \"\r\n\tif box\r\n\t\tstr += \"□ \"\r\n\tstr += \"#{zhStr(hWord)} - #{enStr(hWord)}\\n\"\r\n\treturn str\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport addKey = (hWord) ->\r\n\r\n\tlParts = [hWord.en.join('/')]\r\n\tfor h in hWord.zh\r\n\t\tlParts.push h.zh\r\n\t\tlParts.push h.pinyin\r\n\tkey = lParts.join '/'\r\n\thWord.key = key\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getWords = (hOptions={}) ->\r\n\t# --- path can be a file or a directory\r\n\t#     words are ordered by hWord.num, but\r\n\t#        scrambled for words w/same num\r\n\r\n\tdbgEnter 'getWords', hOptions\r\n\t{path, debug, limit, filter, lExclude\r\n\t\t\t} = getOptions hOptions, {\r\n\t\tpath: './words'\r\n\t\tdebug: false\r\n\t\tfilter: (h) -> return (h.ext == '.zh')\r\n\t\tlExclude: []\r\n\t\t}\r\n\r\n\t# --- { <num>: [hWord, ...] }\r\n\thWords = {}\r\n\r\n\taddWord = (h) =>\r\n\t\tnum = h.num\r\n\t\tif hasKey(hWords, num)\r\n\t\t\thWords[num].push h\r\n\t\telse\r\n\t\t\thWords[num] = [h]\r\n\r\n\tfp = new FileProcessor(path, {debug})\r\n\tfp.filter = filter\r\n\tfp.handleLine = (line, lineNum, hFileInfo) ->\r\n\t\thWord = line2hWord(line)\r\n\t\tif lExclude.includes hWord.key\r\n\t\t\treturn\r\n\t\thWord.filePath = hFileInfo.filePath\r\n\t\thWord.lineNum = lineNum\r\n\t\taddWord hWord\r\n\tfp.go()\r\n\r\n\tlWords = []\r\n\tfor num in keys(hWords)\r\n\t\tshuffle hWords[num]\r\n\t\tlWords.push ...hWords[num]\r\n\r\n\t# --- lWords is an array of all words, ordered by\r\n\t#     num, but scrambled within a num\r\n\r\n\tif defined(limit)\r\n\t\tlWords = lWords.slice(0, limit)\r\n\tdbgReturn 'getWords', lWords\r\n\treturn lWords\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getTestWords = (hOptions={}) ->\r\n\r\n\tlTestWords = getWords getOptions(hOptions, {\r\n\t\tpath: './test.zh'\r\n\t\t})\r\n\ttotalCount = 0\r\n\tfor hWord in lTestWords\r\n\t\ttotalCount += hWord.num\r\n\tassert (totalCount > 5), \"Bad test file\"\r\n\treturn lTestWords\r\n"
  ]
}