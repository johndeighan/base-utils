{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "test/log.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# log.test.coffee\n\nimport {\n\tundef, defined, notdefined, pass, jsType, spaces,\n\t} from '@jdeighan/base-utils'\nimport {getPrefix} from '@jdeighan/base-utils/prefix'\nimport {\n\tlogWidth, sep_dash, sep_eq,\n\tsetLogWidth, resetLogWidth, debugLogging,\n\tsetStringifier, resetStringifier,\n\tstringify, tamlStringify, orderedStringify,\n\tLOG, LOGVALUE, LOGTAML, LOGJSON,\n\tclearAllLogs, getMyLogs, echoLogsByDefault,\n\t} from '@jdeighan/base-utils/log'\nimport {\n\tUnitTester,\n\tequal, like, notequal, truthy, falsy, throws, succeeds,\n\t} from '@jdeighan/base-utils/utest'\n\nechoLogsByDefault false\nfiveSpaces = ' '.repeat(5)\n\n# ---------------------------------------------------------------------------\n\nequal orderedStringify(['a', 42, [1,2]]), \"\"\"\n\t---\n\t- a\n\t- 42\n\t- - 1\n\t  - 2\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\nequal logWidth, 42\n\nsetLogWidth 5\nequal logWidth, 5\nequal sep_dash, '-----'\nresetLogWidth()\n\nsetLogWidth 5\nequal logWidth, 5\nequal sep_eq, '====='\nresetLogWidth()\n\n# ---------------------------------------------------------------------------\n\nequal getPrefix(0), ''\nequal getPrefix(1), spaces(4)\nequal getPrefix(2), spaces(8)\n\n# ---------------------------------------------------------------------------\n\nclearAllLogs('noecho')\nLOG \"abc\"\nequal getMyLogs(), \"\"\"\n\tabc\n\t\"\"\"\n\nclearAllLogs('noecho')\nLOG \"abc\"\nLOG \"def\"\nequal getMyLogs(), \"\"\"\n\tabc\n\tdef\n\t\"\"\"\n\n# NOTE: Because logs are destined for the console,\n#       which doesn't allow defining how to display TAB chars,\n#       indentation defaults to 4 space chars, not TAB chars\n\nclearAllLogs('noecho')\nLOG \"abc\"\nLOG \"def\", getPrefix(1)\nLOG \"ghi\", getPrefix(2)\nequal getMyLogs(), \"\"\"\n\tabc\n\t#{spaces(4)}def\n\t#{spaces(4)}#{spaces(4)}ghi\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\nclearAllLogs('noecho')\nLOGVALUE 'x', undef\nequal getMyLogs(), \"\"\"\n\tx = undef\n\t\"\"\"\n\nclearAllLogs('noecho')\nLOGVALUE 'x', null\nequal getMyLogs(), \"\"\"\n\tx = null\n\t\"\"\"\n\nclearAllLogs('noecho')\nLOGVALUE 'x', 'abc'\nequal getMyLogs(), \"\"\"\n\tx = 'abc'\n\t\"\"\"\n\nclearAllLogs('noecho')\nLOGVALUE 'x', 'abc def'\nequal getMyLogs(), \"\"\"\n\tx = 'abc˳def'\n\t\"\"\"\n\nclearAllLogs('noecho')\nLOGVALUE 'x', '\"abc\"'\nequal getMyLogs(), \"\"\"\n\tx = '\"abc\"'\n\t\"\"\"\n\nclearAllLogs('noecho')\nLOGVALUE 'x', \"'abc'\"\nequal getMyLogs(), \"\"\"\n\tx = \"'abc'\"\n\t\"\"\"\n\nclearAllLogs('noecho')\nLOGVALUE 'x', \"'\\\"abc\\\"'\"\nequal getMyLogs(), \"\"\"\n\tx = <'\"abc\"'>\n\t\"\"\"\n\n# --- long string\n\nclearAllLogs('noecho')\nLOGVALUE 'x', 'a'.repeat(80)\nequal getMyLogs(), \"\"\"\n\tx = \\\"\\\"\\\"\n\t\t#{'a'.repeat(80)}\n\t\t\\\"\\\"\\\"\n\t\"\"\"\n\n# --- multi line string\n\nclearAllLogs('noecho')\nLOGVALUE 'x', 'abc\\ndef'\nequal getMyLogs(), \"\"\"\n\tx = 'abc▼def'\n\t\"\"\"\n\n# --- hash (OL doesn't fit)\n\nclearAllLogs('noecho')\nsetLogWidth 5\nLOGVALUE 'h', {xyz: 42, abc: 99}\nresetLogWidth()\nequal getMyLogs(), \"\"\"\n\th =\n\t\t---\n\t\tabc: 99\n\t\txyz: 42\n\t\"\"\"\n\n# --- hash (OL fits)\n\nclearAllLogs('noecho')\nLOGVALUE 'h', {xyz: 42, abc: 99}\nequal getMyLogs(), \"\"\"\n\th = {\"xyz\":42,\"abc\":99}\n\t\"\"\"\n\n# --- array  (OL doesn't fit)\n\nclearAllLogs('noecho')\nsetLogWidth 5\nLOGVALUE 'l', ['xyz', 42, false, undef]\nresetLogWidth()\nequal getMyLogs(), \"\"\"\n\tl =\n\t\t---\n\t\t- xyz\n\t\t- 42\n\t\t- false\n\t\t- undef\n\t\"\"\"\n\n# --- array (OL fits)\n\nclearAllLogs('noecho')\nLOGVALUE 'l', ['xyz', 42, false, undef]\nequal getMyLogs(), \"\"\"\n\tl = [\"xyz\",42,false,null]\n\t\"\"\"\n\n# --- object\n\nclass Node1\n\tconstructor: (@str, @level) ->\n\t\t@name = 'node1'\nnode1 = new Node1('abc', 2)\n\nclearAllLogs('noecho')\nLOGVALUE 'Node1', node1\nequal getMyLogs(), \"\"\"\n\tNode1 =\n\t\t---\n\t\tlevel: 2\n\t\tname: node1\n\t\tstr: abc\n\t\"\"\"\n\n# --- object with toString method\n\nclass Node2\n\n\tconstructor: (@str, @level) ->\n\t\t@name = 'node2'\n\n\ttoLogString: () ->\n\t\treturn \"\"\"\n\t\t\tHERE IT IS\n\t\t\tstr is #{@str}\n\t\t\tname is #{@name}\n\t\t\tlevel is #{@level}\n\t\t\tTHAT'S ALL FOLKS!\n\t\t\t\"\"\"\n\nnode2 = new Node2('abc', 2)\n[type, subtype] = jsType(node2)\n\nclearAllLogs('noecho')\nLOGVALUE 'Node2', node2\nequal getMyLogs(), \"\"\"\n\tNode2 =\n\t\tHERE IT IS\n\t\tstr is abc\n\t\tname is node2\n\t\tlevel is 2\n\t\tTHAT'S ALL FOLKS!\n\t\"\"\"\n\nclearAllLogs('noecho')\n\nhProc = {\n\tcode:   (block) -> return \"#{block};\"\n\thtml:   (block) -> return block.replace('<p>', '<p> ').replace('</p>', ' </p>')\n\tScript: (block) -> return elem('script', undef, block, \"\\t\")\n\t}\n\nLOGVALUE 'hProc', hProc\n\nequal getMyLogs(), \"\"\"\n\thProc =\n\t\t---\n\t\tScript: \"[Function: Script]\"\n\t\tcode: \"[Function: code]\"\n\t\thtml: \"[Function: html]\"\n\t\"\"\"\n\nclearAllLogs('noecho')\nsetLogWidth 5\nLOGTAML 'lItems', ['xyz', 42, false, undef]\nresetLogWidth()\nequal getMyLogs(), \"\"\"\n\tlItems = <<<\n\t#{spaces(3)}---\n\t#{spaces(3)}- xyz\n\t#{spaces(3)}- 42\n\t#{spaces(3)}- false\n\t#{spaces(3)}- undef\n\t\"\"\"\n\nclearAllLogs('noecho')\nsetLogWidth 5\nLOGJSON 'lItems', ['xyz', 42, false, undef]\nresetLogWidth()\nequal getMyLogs(), \"\"\"\n\tlItems =\n\t[\n\t#{spaces(3)}\"xyz\",\n\t#{spaces(3)}42,\n\t#{spaces(3)}false,\n\t#{spaces(3)}null\n\t]\n\t\"\"\""
  ]
}