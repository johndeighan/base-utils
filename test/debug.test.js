// Generated by CoffeeScript 2.7.0
// debug.test.coffee
var TEST, callGen, func, func2, gen, hTestNumbers, main;

import test from 'ava';

import {
  assert,
  croak,
  haltOnError
} from '@jdeighan/base-utils/exceptions';

import {
  undef,
  defined,
  notdefined
} from '@jdeighan/base-utils/utils';

import {
  LOG,
  LOGVALUE,
  LOGSTRING,
  clearAllLogs,
  getMyLog
} from '@jdeighan/base-utils/log';

import {
  CallStack
} from '@jdeighan/base-utils/stack';

import {
  setCallStack,
  callStack,
  setDebugging,
  debugDebug,
  getType,
  dumpDebugLoggers,
  dbgEnter,
  dbgReturn,
  dbgYield,
  dbgResume,
  dbg,
  getDebugLog
} from '@jdeighan/base-utils/debug';

haltOnError(false);

// ---------------------------------------------------------------------------
// --- Define some functions to use in testing
main = function() {
  var i, j, len, ref;
  dbgEnter('main');
  ref = [13, 15];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    func(i);
    LOG(i + 1);
  }
  dbgReturn('main');
};

func = function(i) {
  dbgEnter('func', i);
  func2(i);
  dbgReturn('func');
};

func2 = function(i) {
  dbgEnter('func2', i);
  LOG(2 * i);
  dbgReturn('func2');
};

callGen = function() {
  var i, ref;
  dbgEnter('callGen');
  ref = gen();
  for (i of ref) {
    dbg(`GOT ${i}`);
    LOG(i);
  }
  dbgReturn('callGen');
};

gen = function*() {
  dbgEnter('gen');
  dbgYield('gen', 1);
  yield 1;
  dbgResume('gen');
  dbgYield('gen', 2);
  yield 2;
  dbgResume('gen');
  dbgReturn('gen');
};

// ---------------------------------------------------------------------------
hTestNumbers = {};

TEST = function(lineNum, options, func, expectedDbg, expectedLog) {
  var dbgStr, logStr;
  // --- Make sure test numbers are unique
  while (hTestNumbers[lineNum]) {
    lineNum += 1000;
  }
  hTestNumbers[lineNum] = true;
  if (defined(options)) {
    setDebugging(options);
  } else {
    setDebugging(false);
  }
  setCallStack('debugCalls');
  clearAllLogs();
  func();
  dbgStr = getDebugLog();
  logStr = getMyLog();
  test(`line ${lineNum}-DEBUG`, (t) => {
    return t.is(dbgStr, expectedDbg);
  });
  if (defined(expectedLog)) {
    test(`line ${lineNum}-LOG`, (t) => {
      return t.is(logStr, expectedLog);
    });
  }
  test(`line ${lineNum}-final`, (t) => {
    return t.truthy(callStack.isEmpty());
  });
};

// ---------------------------------------------------------------------------
(function() {
  return TEST(107, undef, main, undef, `26
14
30
16`);
})();

// ---------------------------------------------------------------------------
(function() {
  return TEST(119, 'main', main, `enter main
└─> return from main`, `26
14
30
16`);
})();

// ---------------------------------------------------------------------------
(function() {
  return TEST(134, 'main func2', main, `enter main
│   enter func2 13
│   └─> return from func2
│   enter func2 15
│   └─> return from func2
└─> return from main`, `26
14
30
16`);
})();

// ---------------------------------------------------------------------------
(function() {
  return TEST(153, 'func2', main, `enter func2 13
└─> return from func2
enter func2 15
└─> return from func2`, `26
14
30
16`);
})();

// ---------------------------------------------------------------------------
(function() {
  return TEST(170, true, callGen, `enter callGen
│   enter gen
│   ├── yield 1
│   GOT 1
│   ├── yield 2
│   GOT 2
│   └─> return from gen
└─> return from callGen`, `1
2`);
})();
