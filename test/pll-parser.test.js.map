{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "test/pll-parser.test.coffee"
  ],
  "names": [],
  "mappings": "AAAwB;AAExB,OAAA;EACC,KADD;EACQ,OADR;EACiB,EADjB;EACqB,iBADrB;EAEC,QAFD;EAEW,OAFX;CAAA,MAAA;;AAIA,OAAA;EAAQ,MAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,GAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,YAAR;CAAA,MAAA;;AACA,OAAA;EACC,MADD;EACS,gBADT;EAC2B,SAD3B;CAAA,MAAA;;AAGA,OAAA;EAAQ,KAAR;CAAA,MAAA;;AACA,OAAA;EACC,cADD;EACiB,iBADjB;EAEC,KAFD;EAEQ,MAFR;EAEgB,QAFhB;CAAA,MAAA,6BAbwB;;;AAoBxB,cAAA,CAAe,CAAC,IAAD,CAAA,GAAA;AAAU,SAAO,KAAA,CAAM,IAAN;AAAjB,CAAf;;AACA,iBAAA,CAAkB,CAAC,GAAD,CAAA,GAAA;AAClB,MAAA,CAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA;EAAC,MAAA,CAAO,QAAA,CAAS,GAAT,CAAP,EAAsB,CAAA,cAAA,CAAA,CAAiB,EAAA,CAAG,GAAH,CAAjB,CAAA,CAAtB;EACA,OAAA,GAAU;AACV;EAAA,KAAA,qCAAA;;IACC,IAAI,IAAA,KAAQ,IAAZ;MACC,OAAO,CAAC,IAAR,CAAa;QAAC,IAAA,EAAM;MAAP,CAAb,EADD;KAAA,MAEK,IAAI,IAAA,KAAQ,IAAZ;MACJ,OAAO,CAAC,IAAR,CAAa;QAAC,IAAA,EAAM;MAAP,CAAb,EADI;KAAA,MAAA;MAGJ,OAAO,CAAC,IAAR,CAAa;QAAC,IAAA,EAAM,MAAP;QAAe,IAAA,EAAM;MAArB,CAAb,EAHI;;EAHN;AAOA,SAAO;AAVU,CAAlB,EArBwB;;;AAmCxB,QAAA,CAAS,CAAA,CAAA,GAAA;SAAM,KAAA,CAAM,KAAN;AAAN,CAAT;;AACA,QAAA,CAAS,CAAA,CAAA,GAAA;SAAM,KAAA,CAAM,cAAN;AAAN,CAAT;;AACA,QAAA,CAAS,CAAA,CAAA,GAAA;SAAM,KAAA,CAAM,gBAAN;AAAN,CAAT;;AACA,MAAA,CAAO,CAAA,CAAA,GAAA;SAAM,KAAA,CAAM,YAAN;AAAN,CAAP;;AACA,MAAA,CAAO,CAAA,CAAA,GAAA;SAAM,KAAA,CAAM,QAAN;AAAN,CAAP,EAvCwB;;;AA2CxB,KAAA,CAAM,CAAA;;MAAA,CAAN,EAIM,CAAA;;;;MAAA,CAJN,EA3CwB;;;AAyDxB,KAAA,CAAM,CAAA;;;MAAA,CAAN,EAKM,CAAA;;;;MAAA,CALN;;AAaA,KAAA,CAAM,CAAA;;;MAAA,CAAN,EAKM,CAAA;;;;MAAA,CALN;;AAaA,KAAA,CAAM,CAAA;;;;;;MAAA,CAAN,EAQM,CAAA;;;;;;;;MAAA,CARN",
  "sourcesContent": [
    "# pll-parser.test.coffee\n\nimport {\n\tundef, defined, OL, sortArrayOfHashes,\n\tisString, toArray,\n\t} from '@jdeighan/base-utils'\nimport {assert} from '@jdeighan/base-utils/exceptions'\nimport {LOG} from '@jdeighan/base-utils/log'\nimport {setDebugging} from '@jdeighan/base-utils/debug'\nimport {\n\tmkpath, allFilesMatching, globFiles,\n\t} from '@jdeighan/base-utils/fs'\nimport {parse} from '@jdeighan/base-utils/pll-parser'\nimport {\n\ttransformValue, transformExpected,\n\tequal, throws, succeeds,\n\t} from '@jdeighan/base-utils/utest'\n\n# ---------------------------------------------------------------------------\n\ntransformValue (item) => return parse(item)\ntransformExpected (str) =>\n\tassert isString(str), \"Not a string: #{OL(str)}\"\n\tlTokens = []\n\tfor line in toArray(str)\n\t\tif (line == '>>')\n\t\t\tlTokens.push {type: 'indent'}\n\t\telse if (line == '<<')\n\t\t\tlTokens.push {type: 'undent'}\n\t\telse\n\t\t\tlTokens.push {type: 'text', text: line}\n\treturn lTokens\n\n# ---------------------------------------------------------------------------\n\nsucceeds () => parse(\"abc\")\nsucceeds () => parse(\"abc\\n\\t\\tdef\");\nsucceeds () => parse(\"abc\\r\\n\\t\\tdef\");\nthrows () => parse(\"abc\\t\\tdef\");\nthrows () => parse(\"\\t \\t \")\n\n# ---------------------------------------------------------------------------\n\nequal \"\"\"\n\tline 1\n\t\tline 2\n\tline 3\n\t\"\"\", \"\"\"\n\tline 1\n\t>>\n\tline 2\n\t<<\n\tline 3\n\t\"\"\"\n\n# --- blank lines are ignored\n\nequal \"\"\"\n\tline 1\n\t\tline 2\n\n\tline 4\n\t\"\"\", \"\"\"\n\tline 1\n\t>>\n\tline 2\n\t<<\n\tline 4\n\t\"\"\"\n\nequal \"\"\"\n\tline 1\n\t\tline 2\n\t\t\t\tand more\n\tline 4\n\t\"\"\", \"\"\"\n\tline 1\n\t>>\n\tline 2 and more\n\t<<\n\tline 4\n\t\"\"\"\n\nequal \"\"\"\n\tline 1\n\t\tline 2\n\t\t\t\tand more\n\tline 4\n\t\tline 5\n\t\t\t\tand more\n\tline 7\n\t\"\"\", \"\"\"\n\tline 1\n\t>>\n\tline 2 and more\n\t<<\n\tline 4\n\t>>\n\tline 5 and more\n\t<<\n\tline 7\n\t\"\"\""
  ]
}