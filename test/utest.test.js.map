{
  "version": 3,
  "file": "utest.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\utest.test.coffee"
  ],
  "names": [],
  "mappings": "AAAmB;AAEnB,OAAA;EAAQ,QAAR;EAAkB,EAAlB;CAAA,MAAA;;AACA,OAAA;EAAQ,MAAR;CAAA,MAAA;;AACA,OAAA;EACC,CADD;EACI,UADJ;EACgB,KADhB;EACuB,IADvB;EAC6B,QAD7B;EACuC,MADvC;EAC+C,KAD/C;EAEC,QAFD;EAEW,OAFX;EAEoB,MAFpB;EAE4B,QAF5B;CAAA,MAAA,6BAJmB;;;AAWnB,CAAC,CAAC,KAAF,CAAQ,CAAA,GAAE,CAAV,EAAa,CAAb;;AACA,CAAC,CAAC,IAAF,CAAO;EAAC,CAAA,EAAE,CAAH;EAAM,CAAA,EAAE,CAAR;EAAW,CAAA,EAAE;AAAb,CAAP,EAAwB;EAAC,CAAA,EAAE,CAAH;EAAM,CAAA,EAAE;AAAR,CAAxB;;AACA,CAAC,CAAC,QAAF,CAAW,CAAA,GAAE,CAAb,EAAgB,CAAhB;;AACA,CAAC,CAAC,MAAF,CAAS,EAAT;;AACA,CAAC,CAAC,KAAF,CAAQ,KAAR;;AACA,CAAC,CAAC,QAAF,CAAW,yBAAX,EAAsC,MAAtC;;AACA,CAAC,CAAC,QAAF,CAAW,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAAX,EAA0B,GAA1B;;AACA,CAAC,CAAC,OAAF,CAAU,kBAAV,EAA8B,KAA9B;;AACA,CAAC,CAAC,MAAF,CAAS,CAAA,CAAA,GAAA;EAAM,MAAM,IAAI,KAAJ,CAAU,KAAV;AAAZ,CAAT;;AACA,CAAC,CAAC,QAAF,CAAW,CAAA,CAAA,GAAA;AAAM,SAAO;AAAb,CAAX;;AACA,CAAC,CAAC,IAAF,CAAO,OAAP,EAAgB,KAAhB,EArBmB;;AAsBnB,CAAC,CAAC,IAAF,CAAO,OAAP,EAAgB,QAAhB,EAtBmB;;;AA0BnB,KAAA,CAAM,CAAA,GAAE,CAAR,EAAW,CAAX;;AACA,IAAA,CAAK;EAAC,CAAA,EAAE,CAAH;EAAM,CAAA,EAAE,CAAR;EAAW,CAAA,EAAE;AAAb,CAAL,EAAsB;EAAC,CAAA,EAAE,CAAH;EAAM,CAAA,EAAE;AAAR,CAAtB;;AACA,QAAA,CAAS,CAAA,GAAE,CAAX,EAAc,CAAd;;AACA,MAAA,CAAO,EAAP;;AACA,KAAA,CAAM,KAAN;;AACA,QAAA,CAAS,yBAAT,EAAoC,MAApC;;AACA,QAAA,CAAS,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAAT,EAAwB,GAAxB;;AACA,OAAA,CAAQ,kBAAR,EAA4B,KAA5B;;AACA,MAAA,CAAO,CAAA,CAAA,GAAA;EAAM,MAAM,IAAI,KAAJ,CAAU,KAAV;AAAZ,CAAP;;AACA,QAAA,CAAS,CAAA,CAAA,GAAA;AAAM,SAAO;AAAb,CAAT;;AACA,IAAA,CAAK,OAAL,EAAc,KAAd,EApCmB;;AAqCnB,IAAA,CAAK,OAAL,EAAc,QAAd,EArCmB;;;AAyCnB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA;EAAC,MAAA,GAAS,IAAI,UAAJ,CAAA;EACT,MAAM,CAAC,cAAP,GAAwB,CAAC,GAAD,CAAA,GAAA;IACvB,MAAA,CAAO,QAAA,CAAS,GAAT,CAAP,EAAsB,CAAA,OAAA,CAAA,CAAU,GAAV,CAAA,CAAtB;AACA,WAAO,GAAG,CAAC,WAAJ,CAAA;EAFgB;SAIxB,MAAM,CAAC,KAAP,CAAa,KAAb,EAAoB,KAApB;AANA,CAAD,CAAA,CAAA",
  "sourcesContent": [
    "# utest.test.coffee\n\nimport {isString, OL} from '@jdeighan/base-utils'\nimport {assert} from '@jdeighan/base-utils/exceptions'\nimport {\n\tu, UnitTester, equal, like, notequal, truthy, falsy,\n\tincludes, matches, throws, succeeds,\n\t} from '@jdeighan/base-utils/utest'\n\n# ---------------------------------------------------------------------------\n\nu.equal 2+2, 4\nu.like {a:1, b:2, c:3}, {a:1, c:3}\nu.notequal 2+2, 5\nu.truthy 42\nu.falsy false\nu.includes \"this is a long sentence\", \"long\"\nu.includes ['a','b','c'], 'b'\nu.matches \"another 42 lines\", /\\d+/\nu.throws () => throw new Error(\"bad\")\nu.succeeds () => return 'me'\nu.like \"abc\\n\", \"abc\"         # strings are right trimmed\nu.like \"abc\\n\", \"abc   \"\n\n# ---------------------------------------------------------------------------\n\nequal 2+2, 4\nlike {a:1, b:2, c:3}, {a:1, c:3}\nnotequal 2+2, 5\ntruthy 42\nfalsy false\nincludes \"this is a long sentence\", \"long\"\nincludes ['a','b','c'], 'b'\nmatches \"another 42 lines\", /\\d+/\nthrows () => throw new Error(\"bad\")\nsucceeds () => return 'me'\nlike \"abc\\n\", \"abc\"           # strings are right trimmed\nlike \"abc\\n\", \"abc   \"\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tutest2 = new UnitTester()\n\tutest2.transformValue = (val) =>\n\t\tassert isString(val), \"val is #{val}\"\n\t\treturn val.toUpperCase()\n\n\tutest2.equal 'abc', 'ABC'\n\t)()\n"
  ]
}