{
  "version": 3,
  "file": "utest.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\utest.test.coffee"
  ],
  "names": [],
  "mappings": "AAAmB;AAEnB,OAAA;EAAQ,QAAR;EAAkB,EAAlB;CAAA,MAAA;;AACA,OAAA;EAAQ,MAAR;CAAA,MAAA;;AACA,OAAA;EACC,KADD;EACQ,UADR;EAEC,KAFD;EAEQ,IAFR;EAEc,QAFd;EAEwB,MAFxB;EAEgC,KAFhC;EAEuC,MAFvC;EAE+C,QAF/C;CAAA,MAAA,6BAJmB;;;AAWnB,KAAK,CAAC,KAAN,CAAY,CAAA,GAAE,CAAd,EAAiB,CAAjB;;AACA,KAAK,CAAC,IAAN,CAAW;EAAC,CAAA,EAAE,CAAH;EAAM,CAAA,EAAE,CAAR;EAAW,CAAA,EAAE;AAAb,CAAX,EAA4B;EAAC,CAAA,EAAE,CAAH;EAAM,CAAA,EAAE;AAAR,CAA5B;;AACA,KAAK,CAAC,QAAN,CAAe,CAAA,GAAE,CAAjB,EAAoB,CAApB;;AACA,KAAK,CAAC,MAAN,CAAa,EAAb;;AACA,KAAK,CAAC,KAAN,CAAY,KAAZ;;AACA,KAAK,CAAC,MAAN,CAAa,CAAA,CAAA,GAAA;EAAM,MAAM,IAAI,KAAJ,CAAU,KAAV;AAAZ,CAAb;;AACA,KAAK,CAAC,QAAN,CAAe,CAAA,CAAA,GAAA;AAAM,SAAO;AAAb,CAAf,EAjBmB;;;AAqBnB,KAAA,CAAM,CAAA,GAAE,CAAR,EAAW,CAAX;;AACA,IAAA,CAAK;EAAC,CAAA,EAAE,CAAH;EAAM,CAAA,EAAE,CAAR;EAAW,CAAA,EAAE;AAAb,CAAL,EAAsB;EAAC,CAAA,EAAE,CAAH;EAAM,CAAA,EAAE;AAAR,CAAtB;;AACA,QAAA,CAAS,CAAA,GAAE,CAAX,EAAc,CAAd;;AACA,MAAA,CAAO,EAAP;;AACA,KAAA,CAAM,KAAN;;AACA,MAAA,CAAO,CAAA,CAAA,GAAA;EAAM,MAAM,IAAI,KAAJ,CAAU,KAAV;AAAZ,CAAP;;AACA,QAAA,CAAS,CAAA,CAAA,GAAA;AAAM,SAAO;AAAb,CAAT,EA3BmB;;;AA+BnB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA;EAAC,MAAA,GAAS,IAAI,UAAJ,CAAA;EACT,MAAM,CAAC,cAAP,GAAwB,CAAC,GAAD,CAAA,GAAA;IACvB,MAAA,CAAO,QAAA,CAAS,GAAT,CAAP,EAAsB,CAAA,OAAA,CAAA,CAAU,GAAV,CAAA,CAAtB;AACA,WAAO,GAAG,CAAC,WAAJ,CAAA;EAFgB;SAIxB,MAAM,CAAC,KAAP,CAAa,KAAb,EAAoB,KAApB;AANA,CAAD,CAAA,CAAA",
  "sourcesContent": [
    "# utest.test.coffee\n\nimport {isString, OL} from '@jdeighan/base-utils'\nimport {assert} from '@jdeighan/base-utils/exceptions'\nimport {\n\tutest, UnitTester,\n\tequal, like, notequal, truthy, falsy, throws, succeeds,\n\t} from '@jdeighan/base-utils/utest'\n\n# ---------------------------------------------------------------------------\n\nutest.equal 2+2, 4\nutest.like {a:1, b:2, c:3}, {a:1, c:3}\nutest.notequal 2+2, 5\nutest.truthy 42\nutest.falsy false\nutest.throws () => throw new Error(\"bad\")\nutest.succeeds () => return 'me'\n\n# ---------------------------------------------------------------------------\n\nequal 2+2, 4\nlike {a:1, b:2, c:3}, {a:1, c:3}\nnotequal 2+2, 5\ntruthy 42\nfalsy false\nthrows () => throw new Error(\"bad\")\nsucceeds () => return 'me'\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tutest2 = new UnitTester()\n\tutest2.transformValue = (val) =>\n\t\tassert isString(val), \"val is #{val}\"\n\t\treturn val.toUpperCase()\n\n\tutest2.equal 'abc', 'ABC'\n\t)()\n"
  ]
}