{
  "version": 3,
  "file": "taml.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\taml.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# taml.test.coffee\n\nimport {\n\tundef, defined, notdefined, pass, escapeStr, OL, spaces,\n\t} from '@jdeighan/base-utils'\nimport {\n\tisTAML, toTAML, fromTAML,\n\tllSplit, splitTaml, tamlFix, fixValStr,\n\t} from '@jdeighan/base-utils/taml'\nimport {utest} from '@jdeighan/base-utils/utest'\n\n# ---------------------------------------------------------------------------\n\nutest.equal llSplit(\"a: 53\"), [\"a: \",\"53\"]\nutest.equal llSplit(\"a: 53\"), [\"a: \",\"53\"]\nutest.equal llSplit(\"a  :   53\"), [\"a: \",\"53\"]\n\nutest.equal llSplit(\"- abc\"), [\"- \",\"abc\"]\nutest.equal llSplit(\"-   abc\"), [\"- \",\"abc\"]\n\nutest.equal llSplit(\"abc\"), undef\nutest.equal llSplit(\"24\"), undef\nutest.equal llSplit(\"'abc'\"), undef\n\n# ---------------------------------------------------------------------------\n# Leave these alone:\n#    empty string\n#    []\n#    {}\n#    number\n#    \"<str>\"\n#    '<str>'\n#    true\n#    false\n\nutest.equal fixValStr(''), ''\nutest.equal fixValStr('[]'), '[]'\nutest.equal fixValStr('{}'), '{}'\nutest.equal fixValStr('42'), '42'\nutest.equal fixValStr('\"abc\"'), '\"abc\"'\nutest.equal fixValStr(\"'abc'\"), \"'abc'\"\nutest.equal fixValStr('true'), 'true'\nutest.equal fixValStr('false'), 'false'\n\n# --- quote everything else\n\nutest.equal fixValStr(\"abc\"), \"'abc'\"\nutest.equal fixValStr(\"it's\"), \"'it''s'\"\n\n# ---------------------------------------------------------------------------\n\nutest.equal splitTaml('a: - abc'), ['a: ','- ',\"'abc'\"]\nutest.equal splitTaml('-  a:   53'), ['- ','a: ','53']\nutest.equal splitTaml('\"abc\"'), ['\"abc\"']\nutest.equal splitTaml('abc'), [\"'abc'\"]\n\n# ---------------------------------------------------------------------------\n\nutest.equal toTAML([]),         '---\\n[]'\nutest.equal toTAML({}),         '---\\n{}'\nutest.equal toTAML([1,2]),      '---\\n- 1\\n- 2'\n\nutest.equal toTAML(['1','2']), \"\"\"\n\t---\n\t- \"1\"\n\t- \"2\"\n\t\"\"\"\n\nutest.equal toTAML({a:1,b:2}), \"\"\"\n\t---\n\ta: 1\n\tb: 2\n\t\"\"\"\n\nutest.equal toTAML({a:1,b:2}, '!useDashes'), \"\"\"\n\ta: 1\n\tb: 2\n\t\"\"\"\n\nutest.equal toTAML({a:1,b:2}, 'indent=3'), \"\"\"\n\t\\t\\t\\t---\n\t\\t\\t\\ta: 1\n\t\\t\\t\\tb: 2\n\t\"\"\"\n\nutest.equal toTAML({a:1,b:2}, 'indent=3 !useTabs'), \"\"\"\n\t#{spaces(6)}---\n\t#{spaces(6)}a: 1\n\t#{spaces(6)}b: 2\n\t\"\"\"\n\nh = {\n\th: [\n\t\t{a: 1}\n\t\t{b: 2}\n\t\t]\n\t}\nutest.equal toTAML(h), '---\\nh:\\n\\t- a: 1\\n\\t- b: 2'\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tstr = \"\"\"\n\t---\n\t- index: 0\n\t\tstate: learning\n\t- index: 1\n\t\tstate: learning\n\t- index: 2\n\t\tstate: learning\n\t\"\"\"\n\n\tutest.equal fromTAML(str), [\n\t\t{ index: 0, state: 'learning'}\n\t\t{ index: 1, state: 'learning'}\n\t\t{ index: 2, state: 'learning'}\n\t\t]\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tstr = \"\"\"\n\t---\n\t-\n\t\tlabel: Help\n\t\turl: /help\n\t-\n\t\tlabel: Books\n\t\turl: /books\n\t\"\"\"\n\n\tutest.equal fromTAML(str), [\n\t\t{ label: 'Help', url: '/help'}\n\t\t{ label: 'Books', url: '/books'}\n\t\t]\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tstr = \"\"\"\n\t---\n\t-\n\t\tlabel: Help\n\t\turl: /help\n\t-\n\t\tlabel: Books\n\t\turl: /books\n\t\"\"\"\n\n\tutest.equal fromTAML(str), [\n\t\t{ label: 'Help', url: '/help'}\n\t\t{ label: 'Books', url: '/books'}\n\t\t]\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tstr = \"\"\"\n\t\t---\n\t\tFile:\n\t\t\tlWalkTrees:\n\t\t\t\t- program\n\t\tWhileStatement:\n\t\t\tlWalkTrees:\n\t\t\t\t- test\n\t\t\t\t- body\n\t\t\"\"\"\n\n\tutest.equal fromTAML(str), {\n\t\tFile: {\n\t\t\tlWalkTrees: ['program']\n\t\t\t}\n\t\tWhileStatement: {\n\t\t\tlWalkTrees: ['test','body']\n\t\t\t}\n\t\t}\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tstr = \"\"\"\n\t\t---\n\t\ttype: function\n\t\tfuncName: main\n\t\tsource: C:/Users/johnd/base-utils/test/v8-stack.test.js\n\t\t\"\"\"\n\n\tutest.equal fromTAML(str), {\n\t\ttype: 'function'\n\t\tfuncName: 'main'\n\t\tsource: 'C:/Users/johnd/base-utils/test/v8-stack.test.js'\n\t\t}\n\t)()\n"
  ]
}