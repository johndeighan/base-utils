{
  "version": 3,
  "file": "taml.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\taml.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# taml.test.coffee\n\nimport {\n\tundef, defined, notdefined, pass, escapeStr, OL, spaces,\n\t} from '@jdeighan/base-utils'\nimport {\n\tisTAML, toTAML, fromTAML,\n\tllSplit, splitTaml, tamlFix, fixValStr,\n\t} from '@jdeighan/base-utils/taml'\nimport {\n\tUnitTester,\n\tequal, like, notequal, succeeds, throws, truthy, falsy,\n\t} from '@jdeighan/base-utils/utest'\n\n# ---------------------------------------------------------------------------\n\nequal llSplit(\"a: 53\"), [\"a: \",\"53\"]\nequal llSplit(\"a: 53\"), [\"a: \",\"53\"]\nequal llSplit(\"a  :   53\"), [\"a: \",\"53\"]\n\nequal llSplit(\"- abc\"), [\"- \",\"abc\"]\nequal llSplit(\"-   abc\"), [\"- \",\"abc\"]\n\nequal llSplit(\"abc\"), undef\nequal llSplit(\"24\"), undef\nequal llSplit(\"'abc'\"), undef\n\n# ---------------------------------------------------------------------------\n# Leave these alone:\n#    empty string\n#    []\n#    {}\n#    number\n#    \"<str>\"\n#    '<str>'\n#    true\n#    false\n\nequal fixValStr(''), ''\nequal fixValStr('[]'), '[]'\nequal fixValStr('{}'), '{}'\nequal fixValStr('42'), '42'\nequal fixValStr('\"abc\"'), '\"abc\"'\nequal fixValStr(\"'abc'\"), \"'abc'\"\nequal fixValStr('true'), 'true'\nequal fixValStr('false'), 'false'\n\n# --- quote everything else\n\nequal fixValStr(\"abc\"), \"'abc'\"\nequal fixValStr(\"it's\"), \"'it''s'\"\n\n# ---------------------------------------------------------------------------\n\nequal splitTaml('a: - abc'), ['a: ','- ',\"'abc'\"]\nequal splitTaml('-  a:   53'), ['- ','a: ','53']\nequal splitTaml('\"abc\"'), ['\"abc\"']\nequal splitTaml('abc'), [\"'abc'\"]\n\n# ---------------------------------------------------------------------------\n\nequal toTAML([]),         '---\\n[]'\nequal toTAML({}),         '---\\n{}'\nequal toTAML([1,2]),      '---\\n- 1\\n- 2'\n\nequal toTAML(['1','2']), \"\"\"\n\t---\n\t- \"1\"\n\t- \"2\"\n\t\"\"\"\n\nequal toTAML({a:1,b:2}), \"\"\"\n\t---\n\ta: 1\n\tb: 2\n\t\"\"\"\n\nequal toTAML({a:1,b:2}, '!useDashes'), \"\"\"\n\ta: 1\n\tb: 2\n\t\"\"\"\n\nequal toTAML({a:1,b:2}, 'indent=3'), \"\"\"\n\t\\t\\t\\t---\n\t\\t\\t\\ta: 1\n\t\\t\\t\\tb: 2\n\t\"\"\"\n\nequal toTAML({a:1,b:2}, 'indent=3 !useTabs'), \"\"\"\n\t#{spaces(6)}---\n\t#{spaces(6)}a: 1\n\t#{spaces(6)}b: 2\n\t\"\"\"\n\nh = {\n\th: [\n\t\t{a: 1}\n\t\t{b: 2}\n\t\t]\n\t}\nequal toTAML(h), '---\\nh:\\n\\t- a: 1\\n\\t- b: 2'\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tstr = \"\"\"\n\t---\n\t- index: 0\n\t\tstate: learning\n\t- index: 1\n\t\tstate: learning\n\t- index: 2\n\t\tstate: learning\n\t\"\"\"\n\n\tequal fromTAML(str), [\n\t\t{ index: 0, state: 'learning'}\n\t\t{ index: 1, state: 'learning'}\n\t\t{ index: 2, state: 'learning'}\n\t\t]\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tstr = \"\"\"\n\t---\n\t-\n\t\tlabel: Help\n\t\turl: /help\n\t-\n\t\tlabel: Books\n\t\turl: /books\n\t\"\"\"\n\n\tequal fromTAML(str), [\n\t\t{ label: 'Help', url: '/help'}\n\t\t{ label: 'Books', url: '/books'}\n\t\t]\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tstr = \"\"\"\n\t---\n\t-\n\t\tlabel: Help\n\t\turl: /help\n\t-\n\t\tlabel: Books\n\t\turl: /books\n\t\"\"\"\n\n\tequal fromTAML(str), [\n\t\t{ label: 'Help', url: '/help'}\n\t\t{ label: 'Books', url: '/books'}\n\t\t]\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tstr = \"\"\"\n\t\t---\n\t\tFile:\n\t\t\tlWalkTrees:\n\t\t\t\t- program\n\t\tWhileStatement:\n\t\t\tlWalkTrees:\n\t\t\t\t- test\n\t\t\t\t- body\n\t\t\"\"\"\n\n\tequal fromTAML(str), {\n\t\tFile: {\n\t\t\tlWalkTrees: ['program']\n\t\t\t}\n\t\tWhileStatement: {\n\t\t\tlWalkTrees: ['test','body']\n\t\t\t}\n\t\t}\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tstr = \"\"\"\n\t\t---\n\t\ttype: function\n\t\tfuncName: main\n\t\tsource: C:/Users/johnd/base-utils/test/v8-stack.test.js\n\t\t\"\"\"\n\n\tequal fromTAML(str), {\n\t\ttype: 'function'\n\t\tfuncName: 'main'\n\t\tsource: 'C:/Users/johnd/base-utils/test/v8-stack.test.js'\n\t\t}\n\t)()\n"
  ]
}