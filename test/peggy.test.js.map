{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "<anonymous>"
  ],
  "names": [],
  "mappings": "AAAmB;AAEnB,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,QAD7B;EACuC,OADvC;EACgD,MADhD;CAAA,MAAA;;AAGA,OAAA;EAAQ,YAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,MAAR;CAAA,MAAA;;AACA,OAAO,CAAA,OAAP,MAAA;;AACA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,GAAtB;;AACA,OAAA;EACC,CADD;EACI,KADJ;EACW,QADX;EACqB,KADrB;CAAA,MAAA;;AAIA,CAAC,CAAC,cAAF,GAAmB,QAAA,CAAC,SAAD,CAAA;AACnB,MAAA,GAAA,EAAA;AAAC;;IAEC,MAAA,GAAS,WAAA,CAAY,OAAA,CAAQ,SAAR,CAAZ,EAAgC,QAAhC,EAA0C,CAAA,CAA1C;IACT,MAAA,CAAO,OAAA,CAAQ,MAAR,CAAP,EAAwB,cAAxB;AACA,WAAO,MAAA,CAAO,MAAP,EAJR;GAKA,aAAA;IAAM;IACL,OAAO,CAAC,GAAR,CAAY,CAAA,OAAA,CAAA,CAAU,GAAG,CAAC,OAAd,CAAA,CAAZ;AACA,WAAO,CAAA,OAAA,CAAA,CAAU,GAAG,CAAC,OAAd,CAAA,EAFR;;AANkB;;AAUnB,CAAC,CAAC,iBAAF,GAAsB,QAAA,CAAC,MAAD,CAAA;AACrB,SAAO,MAAA,CAAO,MAAM,CAAC,UAAP,CAAkB,IAAlB,EAAwB,IAAxB,CAAP;AADc,EAvBH;;;AA4BnB,KAAA,CAAM,CAAA;;AAAA,CAAN,EAIM,CAAA;;;;EAAA,CAJN,EA5BmB;;;AA0CnB,KAAA,CAAM,CAAA;;;;;aAAA,CAAN,EAOM,CAAA;;;;;;;;;EAAA,CAPN,EA1CmB;;;AAgEnB,KAAA,CAAM,CAAA;;;AAAA,CAAN,EAKM,CAAA;;;;EAAA,CALN,EAhEmB;;;AA+EnB,KAAA,CAAM,CAAA;;;;AAAA,CAAN,EAMM,CAAA;;;;EAAA,CANN,EA/EmB;;;AA+FnB,KAAA,CAAM,CAAA;;;;;;;;;;AAAA,CAAN,EAYM,CAAA;;;;;;;;;;;;;;;EAAA,CAZN,EA/FmB;;;AAgInB,KAAA,CAAM,CAAA;;;;;;;;;;aAAA,CAAN,EAYM,CAAA;;;;;;;;;;;;;;EAAA,CAZN,EAhImB;;;AAgKnB,KAAA,CAAM,CAAA;;;;;;;kBAAA,CAAN,EASM,CAAA;;;;;;;;;;;;;;;;CAAA,CATN",
  "sourcesContent": [
    "# peggy.test.coffee\n\nimport {\n\tundef, defined, notdefined, isString, toArray, CWSALL,\n\t} from '@jdeighan/base-utils'\nimport {setDebugging} from '@jdeighan/base-utils/debug'\nimport {assert} from '@jdeighan/base-utils/exceptions'\nimport * as lib from '@jdeighan/base-utils/peggy'\nObject.assign(global, lib)\nimport {\n\tu, equal, succeeds, fails,\n\t} from '@jdeighan/base-utils/utest'\n\nu.transformValue = (peggyCode) ->\n\ttry\n\t\t# --- convertToJS() requires an array\n\t\tjsCode = convertToJS toArray(peggyCode), 'coffee', {}\n\t\tassert defined(jsCode), \"empty jsCode\"\n\t\treturn CWSALL(jsCode)\n\tcatch err\n\t\tconsole.log \"ERROR: #{err.message}\"\n\t\treturn \"ERROR: #{err.message}\"\n\nu.transformExpected = (jsCode) ->\n\treturn CWSALL(jsCode.replaceAll(\"\\t\", \"  \"))\n\n# ---------------------------------------------------------------------------\n\nequal \"\"\"\n\tINITIALIZATION\n\t\timport {undef} from '@jdeighan/base-utils'\n\n\t\"\"\", \"\"\"\n\t{{\n\timport {\n\t  undef\n\t} from '@jdeighan/base-utils';\n\t}}\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\nequal \"\"\"\n\tprimitive\n\t\t\".undef.\"\n\t\t\treturn undef\n\n\t\t\".null.\"\n\t\t\treturn null\n\t\"\"\", \"\"\"\n\tprimitive\n\t  = \".undef.\"\n\t\t{\n\t\treturn undef;\n\t\t}\n\n\t  / \".null.\"\n\t\t{\n\t\treturn null;\n\t\t}\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\nequal \"\"\"\n\tbare_str\n\t\tlChars:[^\\\\n]+\n\t\t\treturn CWS(mkword(lChars))\n\n\t\"\"\", \"\"\"\n\tbare_str\n\t  = lChars:[^\\\\n]+\n\t\t{\n\t\treturn CWS(mkword(lChars));\n\t\t}\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\nequal \"\"\"\n\tbare_str\n\t\tlChars:[^\\\\n]+\n\t\tws\n\t\t\treturn CWS(mkword(lChars))\n\n\t\"\"\", \"\"\"\n\tbare_str\n\t  = lChars:[^\\\\n]+ ws\n\t\t{\n\t\treturn CWS(mkword(lChars));\n\t\t}\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\nequal \"\"\"\n\tprimitive\n\t\t\".undef.\"\n\t\t\treturn undef\n\n\t\t\".null.\"\n\t\t\treturn null\n\n\tbare_str\n\t\tlChars:[^\\\\n]+\n\t\t\treturn CWS(mkword(lChars))\n\n\t\"\"\", \"\"\"\n\tprimitive\n\t  = \".undef.\"\n\t\t{\n\t\treturn undef;\n\t\t}\n\n\t  / \".null.\"\n\t\t{\n\t\treturn null;\n\t\t}\n\n\tbare_str\n\t  = lChars:[^\\\\n]+\n\t\t{\n\t\treturn CWS(mkword(lChars));\n\t\t}\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\nequal \"\"\"\n\tINITIALIZATION\n\n\t\timport {undef} from '@jdeighan/base-utils'\n\n\tprimitive\n\n\t\t\".undef.\"\n\t\t\treturn undef\n\n\t\t\".null.\"\n\t\t\treturn null\n\t\"\"\", \"\"\"\n\t{{\n\timport {\n\t  undef\n\t} from '@jdeighan/base-utils';\n\t}}\n\tprimitive\n\t  = \".undef.\"\n\t\t{\n\t\treturn undef;\n\t\t}\n\n\t  / \".null.\"\n\t\t{\n\t\treturn null;\n\t\t}\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\nequal \"\"\"\n\tINITIALIZATION\n\t\timport {undef, defined} from '@jdeighan/base-utils'\n\t\timport {LOG, LOGVALUE} from '@jdeighan/base-utils/log'\n\n\tEACH_PARSE\n\t\t# --- add terminating newline\n\t\tif notdefined(options.startRule)\n\t\t\tinput += newline\n\t\"\"\", \"\"\"\n\t{{\n\timport {\n\t  undef,\n\t  defined\n\t} from '@jdeighan/base-utils';\n\n\timport {\n\t  LOG,\n\t  LOGVALUE\n\t} from '@jdeighan/base-utils/log';\n\t}}\n\t{\n\t// --- add terminating newline\n\tif (notdefined(options.startRule)) {\n\t  input += newline;\n\t}\n\t}\n\t\"\"\""
  ]
}