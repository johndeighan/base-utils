{
  "version": 3,
  "file": "FileProcessor.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\FileProcessor.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# FileProcessor.test.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, LOG, rtrim, toArray,\r\n\t} from '@jdeighan/base-utils'\r\nimport {setDebugging} from '@jdeighan/base-utils/debug'\r\nimport {\r\n\tslurp, subPath, isDir, dirContents,\r\n\t} from '@jdeighan/base-utils/fs'\r\nimport {\r\n\tFileProcessor, LineProcessor,\r\n\t} from '@jdeighan/base-utils/FileProcessor'\r\nimport {\r\n\tline2hWord, hWord2line,\r\n\t} from './utils.js'   # relative to this dir?\r\nimport {\r\n\tUnitTester,\r\n\tequal, like, notequal, truthy, falsy, throws, succeeds,\r\n\t} from '@jdeighan/base-utils/utest'\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Build array of paths to files matching a glob pattern\r\n#     Explanation:\r\n#        we override the `handleFile()` method by simply\r\n#        assigning to the key. For each file, we return an\r\n#        empty hash. If we returned undef, it would be ignored.\r\n#        Although the hash we return is empty, `FileProcessor`\r\n#        will add the key `filePath` containing the full path\r\n#        to the file. But, our unit test simply checks how\r\n#        many hashes there are in `lUserData`.\r\n\r\n(() =>\r\n\t# --- There are 2 *.zh files in `./test/fp-test`\r\n\r\n\tfp = new FileProcessor './test/fp-test/*.zh'\r\n\tfp.handleFile = (hFile) ->\r\n\t\treturn {}\r\n\tfp.readAll()\r\n\r\n\tlUserData = fp.getUserData()\r\n\tequal lUserData.length, 2\r\n\t)()\r\n\r\n# --- We can also pass option 'cwd' in hGlobOptions\r\n\r\n(() =>\r\n\t# --- There are 2 *.zh files in `./test/fp-test`\r\n\r\n\tfp = new FileProcessor '*.zh', {\r\n\t\thGlobOptions: {cwd: './test/fp-test'}\r\n\t\t}\r\n\tfp.handleFile = (hFile) ->\r\n\t\treturn {}\r\n\tfp.readAll()\r\n\r\n\tlUserData = fp.getUserData()\r\n\tequal lUserData.length, 2\r\n\t)()\r\n\r\n(() =>\r\n\t# --- There are 3 *.txt files in `./test/fp-test`\r\n\r\n\tfp = new FileProcessor './test/fp-test/*.txt'\r\n\tfp.handleFile = (hFile) ->\r\n\t\treturn {}\r\n\tfp.readAll()\r\n\r\n\tlUserData = fp.getUserData()\r\n\tequal lUserData.length, 3\r\n\t)()\r\n\r\n(() =>\r\n\t# --- There are 26 total files in `./test/words`\r\n\r\n\tfp = new FileProcessor './test/words/*'\r\n\tfp.handleFile = (hFile) ->\r\n\t\t{type} = hFile\r\n\t\tif (type == 'file')\r\n\t\t\treturn {}\r\n\t\telse\r\n\t\t\treturn undef\r\n\tfp.readAll()\r\n\r\n\tlUserData = fp.getUserData()\r\n\tequal lUserData.length, 26\r\n\t)()\r\n\r\n(() =>\r\n\t# --- There are 25 *.zh files in `./test/words`\r\n\r\n\tfp = new FileProcessor './test/words/*.zh'\r\n\tfp.handleFile = (hFile) ->\r\n\t\treturn {}\r\n\tfp.readAll()\r\n\r\n\tlUserData = fp.getUserData()\r\n\tequal lUserData.length, 25\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Keep track of the contents of each *.zh file\r\n#     Explanation:\r\n#        we override the `handleFile()` method by simply\r\n#        assigning to the key. For each file, we return a\r\n#        hash that includes the file contents. The unit test\r\n#        then tests if lUserData includes that content.\r\n#        rtrim() will trim trailing whitespace, including \\n\r\n\r\n(() =>\r\n\tfp = new FileProcessor './test/fp-test/*.zh'\r\n\tfp.handleFile = (hFile) ->\r\n\t\treturn {\r\n\t\t\tzh: rtrim(slurp(hFile.filePath))\r\n\t\t\t}\r\n\tfp.readAll()\r\n\r\n\tlUserData = fp.getSortedUserData()\r\n\tequal lUserData.length, 2\r\n\tlike lUserData[0], {zh: '你好'}\r\n\tlike lUserData[1], {zh: '再见'}\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Count total number of words in all `*.zh` files\r\n#        in `words` dir\r\n#     Explanation:\r\n#        we override the `handleFile()` to increment the\r\n#        value of @numWords, but return undef\r\n\r\n(() =>\r\n\tfp = new FileProcessor './test/words/*.zh'\r\n\tfp.handleFile = (hFile) ->\r\n\t\tcontent = rtrim(slurp(hFile.filePath))\r\n\t\tcount = toArray(content).length\r\n\t\tif defined(@numWords)\r\n\t\t\t@numWords += count\r\n\t\telse\r\n\t\t\t@numWords = count\r\n\t\treturn undef\r\n\tfp.readAll()\r\n\r\n\tequal fp.numWords, 2048\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Count total number of words in all `*.zh` files in `words` dir\r\n#     by overriding transformFile() to pass integers to handleFile()\r\n\r\n(() =>\r\n\tfp = new FileProcessor './test/words/*.zh'\r\n\tfp.transformFile = (hFile) ->\r\n\t\tcontent = rtrim(slurp(hFile.filePath))\r\n\t\treturn toArray(content).length\r\n\r\n\tfp.handleFile = (count) ->\r\n\t\tif defined(@numWords)\r\n\t\t\t@numWords += count\r\n\t\telse\r\n\t\t\t@numWords = count\r\n\t\treturn undef\r\n\tfp.readAll()\r\n\r\n\tequal fp.numWords, 2048\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Count total number of words in all `*.zh` files\r\n#        in `words` dir - using a LineProcessor\r\n#     Explanation:\r\n#        we override the `handleLine()`, which is called\r\n#        for each line in any file, to increment the\r\n#        value of @numWords, but return undef\r\n\r\n(() =>\r\n\tfp = new LineProcessor './test/words/*.zh'\r\n\tfp.handleLine = (line) ->\r\n\t\tif defined(@numWords)\r\n\t\t\t@numWords += 1\r\n\t\telse\r\n\t\t\t@numWords = 1\r\n\t\treturn undef     # write nothing out\r\n\tfp.readAll()\r\n\r\n\tequal fp.numWords, 2048\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Write out new files in `./test/words/temp` that contain\r\n#        just the Chinese words in `*.zh` files\r\n\r\n(() =>\r\n\tfp = new LineProcessor './test/words/*.zh'\r\n\tfp.handleLine = (line) ->\r\n\t\tif defined(@numWords)\r\n\t\t\t@numWords += 1\r\n\t\telse\r\n\t\t\t@numWords = 1\r\n\t\treturn {hWord: line2hWord(line)}\r\n\tfp.writeLine = (h) ->\r\n\t\t{hWord} = h         # extract previously written hWord\r\n\t\tword = hWord.zh[0].zh\r\n\t\treturn word\r\n\tfp.readAll()\r\n\tfp.writeAll()\r\n\r\n\tequal fp.numWords, 2048\r\n\tequal dirContents('./test/words/temp').length, 25\r\n\tequal dirContents('./test/words/temp', '*.zh').length, 25\r\n\tequal dirContents('./test/words/temp', '*', 'filesOnly').length, 25\r\n\tequal dirContents('./test/words/temp', '*', 'dirsOnly').length, 0\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Write out new files in `./test/words/temp` that contain\r\n#        the same lines in the original file, but with\r\n#        the number incremented by 5\r\n\r\n(() =>\r\n\tfp = new LineProcessor './test/words/*.zh'\r\n\tfp.handleLine = (line) ->\r\n\t\treturn {hWord: line2hWord(line)}\r\n\tfp.writeFileTo = (hUserData) ->\r\n\t\treturn subPath hUserData.filePath, 'temp2'\r\n\tfp.writeLine = (hLine) ->\r\n\t\t{hWord} = hLine   # extract previously written hWord\r\n\t\thWord.num += 5\r\n\t\treturn hWord2line(hWord)\r\n\tfp.readAll()\r\n\tfp.writeAll()\r\n\r\n\ttruthy isDir('./test/words/temp2')\r\n\ttruthy slurp('./test/words/adjectives.zh').startsWith('11 ')\r\n\ttruthy slurp('./test/words/temp2/adjectives.zh').startsWith('16 ')\r\n\tequal dirContents('./test/words/temp2').length, 25\r\n\tequal dirContents('./test/words/temp2', '*.zh').length, 25\r\n\tequal dirContents('./test/words/temp2', '*', 'filesOnly').length, 25\r\n\tequal dirContents('./test/words/temp2', '*', 'dirsOnly').length, 0\r\n\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Write out new files in `./test/words/temp` that contain\r\n#        the same lines in the original file, but with\r\n#        the number incremented by 5\r\n#     Override transformLine() to do this, override handleLin() to\r\n#        return its first arg\r\n\r\n(() =>\r\n\tfp = new LineProcessor './test/words/*.zh'\r\n\tfp.transformLine = (line) =>\r\n\t\treturn {hWord: line2hWord(line)}\r\n\tfp.handleLine = (h) ->\r\n\t\treturn h\r\n\tfp.writeFileTo = (hUserData) ->\r\n\t\treturn subPath hUserData.filePath, 'temp2'\r\n\tfp.writeLine = (hLine) ->\r\n\t\t{hWord} = hLine   # extract previously written hWord\r\n\t\thWord.num += 5\r\n\t\treturn hWord2line(hWord)\r\n\tfp.readAll()\r\n\tfp.writeAll()\r\n\r\n\ttruthy isDir('./test/words/temp2')\r\n\ttruthy slurp('./test/words/adjectives.zh').startsWith('11 ')\r\n\ttruthy slurp('./test/words/temp2/adjectives.zh').startsWith('16 ')\r\n\tequal dirContents('./test/words/temp2').length, 25\r\n\tequal dirContents('./test/words/temp2', '*.zh').length, 25\r\n\tequal dirContents('./test/words/temp2', '*', 'filesOnly').length, 25\r\n\tequal dirContents('./test/words/temp2', '*', 'dirsOnly').length, 0\r\n\r\n\t)()\r\n"
  ]
}