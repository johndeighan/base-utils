{
  "version": 3,
  "file": "FileProcessor.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\FileProcessor.test.coffee"
  ],
  "names": [],
  "mappings": "AAA2B;AAE3B,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,GAD7B;EACkC,KADlC;EACyC,OADzC;CAAA,MAAA;;AAGA,OAAA;EAAQ,YAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,KAAR;EAAe,OAAf;EAAwB,KAAxB;CAAA,MAAA;;AACA,OAAA;EACC,aADD;EACgB,aADhB;CAAA,MAAA;;AAGA,OAAA;EACC,UADD;EACa,UADb;CAAA,MAAA;;AAGA,OAAA;EAAQ,KAAR;CAAA,MAAA,6BAb2B;;;;;;;;;;;;;;AA4B3B,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,EAAA,EAAA;EAAC,EAAA,GAAK,IAAI,aAAJ,CAAkB,aAAlB,EAAiC,MAAjC;EACL,EAAE,CAAC,UAAH,GAAgB,QAAA,CAAC,QAAD,CAAA;AACf,WAAO,CAAA;EADQ;EAEhB,EAAE,CAAC,OAAH,CAAA;EAEA,SAAA,GAAY,EAAE,CAAC,WAAH,CAAA;SACZ,KAAK,CAAC,KAAN,CAAY,SAAS,CAAC,MAAtB,EAA8B,CAA9B;AAPA,CAAD,CAAA,CAAA;;AAUA,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,EAAA,EAAA;EAAC,EAAA,GAAK,IAAI,aAAJ,CAAkB,aAAlB,EAAiC,OAAjC;EACL,EAAE,CAAC,UAAH,GAAgB,QAAA,CAAC,QAAD,CAAA;AACf,WAAO,CAAA;EADQ;EAEhB,EAAE,CAAC,OAAH,CAAA;EAEA,SAAA,GAAY,EAAE,CAAC,WAAH,CAAA;SACZ,KAAK,CAAC,KAAN,CAAY,SAAS,CAAC,MAAtB,EAA8B,CAA9B;AAPA,CAAD,CAAA,CAAA;;AAUA,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,EAAA,EAAA;EAAC,EAAA,GAAK,IAAI,aAAJ,CAAkB,cAAlB,EAAkC,GAAlC;EACL,EAAE,CAAC,UAAH,GAAgB,QAAA,CAAC,QAAD,CAAA;AACf,WAAO,CAAA;EADQ;EAEhB,EAAE,CAAC,OAAH,CAAA;EAEA,SAAA,GAAY,EAAE,CAAC,WAAH,CAAA;SACZ,KAAK,CAAC,KAAN,CAAY,SAAS,CAAC,MAAtB,EAA8B,EAA9B;AAPA,CAAD,CAAA,CAAA;;AAUA,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,EAAA,EAAA;EAAC,EAAA,GAAK,IAAI,aAAJ,CAAkB,cAAlB,EAAkC,MAAlC;EACL,EAAE,CAAC,UAAH,GAAgB,QAAA,CAAC,QAAD,CAAA;AACf,WAAO,CAAA;EADQ;EAEhB,EAAE,CAAC,OAAH,CAAA;EAEA,SAAA,GAAY,EAAE,CAAC,WAAH,CAAA;SACZ,KAAK,CAAC,KAAN,CAAY,SAAS,CAAC,MAAtB,EAA8B,EAA9B;AAPA,CAAD,CAAA,CAAA,EA1D2B;;;;;;;;;;AA6E3B,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,EAAA,EAAA;EAAC,EAAA,GAAK,IAAI,aAAJ,CAAkB,aAAlB,EAAiC,MAAjC;EACL,EAAE,CAAC,UAAH,GAAgB,QAAA,CAAC,QAAD,CAAA;AACf,WAAO;MAAC,EAAA,EAAI,KAAA,CAAM,KAAA,CAAM,QAAN,CAAN;IAAL;EADQ;EAEhB,EAAE,CAAC,OAAH,CAAA;EAEA,SAAA,GAAY,EAAE,CAAC,iBAAH,CAAA;EACZ,KAAK,CAAC,KAAN,CAAY,SAAS,CAAC,MAAtB,EAA8B,CAA9B;EACA,KAAK,CAAC,IAAN,CAAW,SAAS,CAAC,CAAD,CAApB,EAAyB;IAAC,EAAA,EAAI;EAAL,CAAzB;SACA,KAAK,CAAC,IAAN,CAAW,SAAS,CAAC,CAAD,CAApB,EAAyB;IAAC,EAAA,EAAI;EAAL,CAAzB;AATA,CAAD,CAAA,CAAA,EA7E2B;;;;;;;;AAgG3B,CAAC,CAAA,CAAA,GAAA;AACD,MAAA;EAAC,EAAA,GAAK,IAAI,aAAJ,CAAkB,cAAlB,EAAkC,MAAlC;EACL,EAAE,CAAC,UAAH,GAAgB,QAAA,CAAC,QAAD,CAAA;AACjB,QAAA,OAAA,EAAA;IAAE,OAAA,GAAU,KAAA,CAAM,KAAA,CAAM,QAAN,CAAN;IACV,KAAA,GAAQ,OAAA,CAAQ,OAAR,CAAgB,CAAC;IACzB,IAAG,OAAA,CAAQ,IAAC,CAAA,QAAT,CAAH;MACC,IAAC,CAAA,QAAD,IAAa,MADd;KAAA,MAAA;MAGC,IAAC,CAAA,QAAD,GAAY,MAHb;;AAIA,WAAO;EAPQ;EAQhB,EAAE,CAAC,OAAH,CAAA;SAEA,KAAK,CAAC,KAAN,CAAY,EAAE,CAAC,QAAf,EAAyB,IAAzB;AAZA,CAAD,CAAA,CAAA,EAhG2B;;;;;;;;;AAuH3B,CAAC,CAAA,CAAA,GAAA;AACD,MAAA;EAAC,EAAA,GAAK,IAAI,aAAJ,CAAkB,cAAlB,EAAkC,MAAlC;EACL,EAAE,CAAC,UAAH,GAAgB,QAAA,CAAC,IAAD,CAAA;IACf,IAAG,OAAA,CAAQ,IAAC,CAAA,QAAT,CAAH;MACC,IAAC,CAAA,QAAD,IAAa,EADd;KAAA,MAAA;MAGC,IAAC,CAAA,QAAD,GAAY,EAHb;;AAIA,WAAO;EALQ;EAMhB,EAAE,CAAC,OAAH,CAAA;SAEA,KAAK,CAAC,KAAN,CAAY,EAAE,CAAC,QAAf,EAAyB,IAAzB;AAVA,CAAD,CAAA,CAAA,EAvH2B;;;;;AAwI3B,CAAC,CAAA,CAAA,GAAA;AACD,MAAA;EAAC,EAAA,GAAK,IAAI,aAAJ,CAAkB,cAAlB,EAAkC,MAAlC;EACL,EAAE,CAAC,UAAH,GAAgB,QAAA,CAAC,IAAD,CAAA;IACf,IAAG,OAAA,CAAQ,IAAC,CAAA,QAAT,CAAH;MACC,IAAC,CAAA,QAAD,IAAa,EADd;KAAA,MAAA;MAGC,IAAC,CAAA,QAAD,GAAY,EAHb;;AAIA,WAAO;MAAC,KAAA,EAAO,UAAA,CAAW,IAAX;IAAR;EALQ;EAMhB,EAAE,CAAC,SAAH,GAAe,QAAA,CAAC,KAAD,CAAA;AAChB,QAAA,KAAA,EAAA;IAAE,CAAA,CAAC,KAAD,CAAA,GAAU,KAAV,EAAF;IACE,IAAA,GAAO,KAAK,CAAC,EAAE,CAAC,CAAD,CAAG,CAAC;AACnB,WAAO;EAHO;EAIf,EAAE,CAAC,OAAH,CAAA;EACA,EAAE,CAAC,QAAH,CAAA;SAEA,KAAK,CAAC,KAAN,CAAY,EAAE,CAAC,QAAf,EAAyB,IAAzB;AAfA,CAAD,CAAA,CAAA,EAxI2B;;;;;;AA+J3B,CAAC,CAAA,CAAA,GAAA;AACD,MAAA;EAAC,EAAA,GAAK,IAAI,aAAJ,CAAkB,cAAlB,EAAkC,MAAlC;EACL,EAAE,CAAC,UAAH,GAAgB,QAAA,CAAC,IAAD,CAAA;AACf,WAAO;MAAC,KAAA,EAAO,UAAA,CAAW,IAAX;IAAR;EADQ;EAEhB,EAAE,CAAC,WAAH,GAAiB,QAAA,CAAC,SAAD,CAAA;AAChB,WAAO,OAAA,CAAQ,SAAS,CAAC,QAAlB,EAA4B,OAA5B;EADS;EAEjB,EAAE,CAAC,SAAH,GAAe,QAAA,CAAC,KAAD,CAAA;AAChB,QAAA;IAAE,CAAA,CAAC,KAAD,CAAA,GAAU,KAAV,EAAF;IACE,KAAK,CAAC,GAAN,IAAa;AACb,WAAO,UAAA,CAAW,KAAX;EAHO;EAIf,EAAE,CAAC,OAAH,CAAA;EACA,EAAE,CAAC,QAAH,CAAA;EAEA,KAAK,CAAC,MAAN,CAAa,KAAA,CAAM,oBAAN,CAAb;EACA,KAAK,CAAC,MAAN,CAAa,KAAA,CAAM,4BAAN,CAAmC,CAAC,UAApC,CAA+C,KAA/C,CAAb;SACA,KAAK,CAAC,MAAN,CAAa,KAAA,CAAM,kCAAN,CAAyC,CAAC,UAA1C,CAAqD,KAArD,CAAb;AAfA,CAAD,CAAA,CAAA",
  "sourcesContent": [
    "# FileProcessor.test.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, LOG, rtrim, toArray,\r\n\t} from '@jdeighan/base-utils'\r\nimport {setDebugging} from '@jdeighan/base-utils/debug'\r\nimport {slurp, subPath, isDir} from '@jdeighan/base-utils/fs'\r\nimport {\r\n\tFileProcessor, LineProcessor,\r\n\t} from '@jdeighan/base-utils/FileProcessor'\r\nimport {\r\n\tline2hWord, hWord2line,\r\n\t} from './utils.js'   # relative to this dir?\r\nimport {utest} from '@jdeighan/base-utils/utest'\r\n\r\n# setDebugging 'readAll'\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Build array of paths to files matching a glob pattern\r\n#     Explanation:\r\n#        we override the `handleFile()` method by simply\r\n#        assigning to the key. For each file, we return an\r\n#        empty hash. If we returned undef, it would be ignored.\r\n#        Although the hash we return is empty, `FileProcessor`\r\n#        will add the key `filePath` containing the full path\r\n#        to the file. But, our unit test simply checks how\r\n#        many hashes there are in `lUserData`.\r\n\r\n(() =>\r\n\tfp = new FileProcessor './test/test', '*.zh'\r\n\tfp.handleFile = (filePath) ->\r\n\t\treturn {}\r\n\tfp.readAll()\r\n\r\n\tlUserData = fp.getUserData()\r\n\tutest.equal lUserData.length, 2\r\n\t)()\r\n\r\n(() =>\r\n\tfp = new FileProcessor './test/test', '*.txt'\r\n\tfp.handleFile = (filePath) ->\r\n\t\treturn {}\r\n\tfp.readAll()\r\n\r\n\tlUserData = fp.getUserData()\r\n\tutest.equal lUserData.length, 3\r\n\t)()\r\n\r\n(() =>\r\n\tfp = new FileProcessor './test/words', '*'\r\n\tfp.handleFile = (filePath) ->\r\n\t\treturn {}\r\n\tfp.readAll()\r\n\r\n\tlUserData = fp.getUserData()\r\n\tutest.equal lUserData.length, 26\r\n\t)()\r\n\r\n(() =>\r\n\tfp = new FileProcessor './test/words', '*.zh'\r\n\tfp.handleFile = (filePath) ->\r\n\t\treturn {}\r\n\tfp.readAll()\r\n\r\n\tlUserData = fp.getUserData()\r\n\tutest.equal lUserData.length, 25\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Keep track of the contents of each *.zh file\r\n#     Explanation:\r\n#        we override the `handleFile()` method by simply\r\n#        assigning to the key. For each file, we return a\r\n#        hash that includes the file contents. The unit test\r\n#        then tests if lUserData includes that content.\r\n#        rtrim() will trim trailing whitespace, including \\n\r\n\r\n(() =>\r\n\tfp = new FileProcessor './test/test', '*.zh'\r\n\tfp.handleFile = (filePath) ->\r\n\t\treturn {zh: rtrim(slurp(filePath))}\r\n\tfp.readAll()\r\n\r\n\tlUserData = fp.getSortedUserData()\r\n\tutest.equal lUserData.length, 2\r\n\tutest.like lUserData[0], {zh: '你好'}\r\n\tutest.like lUserData[1], {zh: '再见'}\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Count total number of words in all `*.zh` files\r\n#        in `words` dir\r\n#     Explanation:\r\n#        we override the `handleFile()` to increment the\r\n#        value of @numWords, but return undef\r\n\r\n(() =>\r\n\tfp = new FileProcessor './test/words', '*.zh'\r\n\tfp.handleFile = (filePath) ->\r\n\t\tcontent = rtrim(slurp(filePath))\r\n\t\tcount = toArray(content).length\r\n\t\tif defined(@numWords)\r\n\t\t\t@numWords += count\r\n\t\telse\r\n\t\t\t@numWords = count\r\n\t\treturn undef\r\n\tfp.readAll()\r\n\r\n\tutest.equal fp.numWords, 2048\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Count total number of words in all `*.zh` files\r\n#        in `words` dir - using a LineProcessor\r\n#     Explanation:\r\n#        we override the `handleLine()`, which is called\r\n#        for each line in any file, to increment the\r\n#        value of @numWords, but return undef\r\n\r\n(() =>\r\n\tfp = new LineProcessor './test/words', '*.zh'\r\n\tfp.handleLine = (line) ->\r\n\t\tif defined(@numWords)\r\n\t\t\t@numWords += 1\r\n\t\telse\r\n\t\t\t@numWords = 1\r\n\t\treturn undef\r\n\tfp.readAll()\r\n\r\n\tutest.equal fp.numWords, 2048\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Write out new files in `./test/words/temp` that contain\r\n#        just the Chinese words in `*.zh` files\r\n\r\n(() =>\r\n\tfp = new LineProcessor './test/words', '*.zh'\r\n\tfp.handleLine = (line) ->\r\n\t\tif defined(@numWords)\r\n\t\t\t@numWords += 1\r\n\t\telse\r\n\t\t\t@numWords = 1\r\n\t\treturn {hWord: line2hWord(line)}\r\n\tfp.writeLine = (hLine) ->\r\n\t\t{hWord} = hLine   # extract previously written hWord\r\n\t\tword = hWord.zh[0].zh\r\n\t\treturn word\r\n\tfp.readAll()\r\n\tfp.writeAll()\r\n\r\n\tutest.equal fp.numWords, 2048\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Write out new files in `./test/words/temp` that contain\r\n#        the same lines in the original file, but with\r\n#        the number incremented by 5\r\n\r\n(() =>\r\n\tfp = new LineProcessor './test/words', '*.zh'\r\n\tfp.handleLine = (line) ->\r\n\t\treturn {hWord: line2hWord(line)}\r\n\tfp.writeFileTo = (hUserData) ->\r\n\t\treturn subPath hUserData.filePath, 'temp2'\r\n\tfp.writeLine = (hLine) ->\r\n\t\t{hWord} = hLine   # extract previously written hWord\r\n\t\thWord.num += 5\r\n\t\treturn hWord2line(hWord)\r\n\tfp.readAll()\r\n\tfp.writeAll()\r\n\r\n\tutest.truthy isDir('./test/words/temp2')\r\n\tutest.truthy slurp('./test/words/adjectives.zh').startsWith('11 ')\r\n\tutest.truthy slurp('./test/words/temp2/adjectives.zh').startsWith('16 ')\r\n\r\n\t)()\r\n"
  ]
}