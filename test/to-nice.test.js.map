{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "test/to-nice.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# to-nice.test.coffee\n\nimport {undef} from '@jdeighan/base-utils'\nimport {\n\tUnitTester, equal, like, notequal,\n\ttruthy, falsy, fails, succeeds,\n\t} from '@jdeighan/base-utils/utest'\nimport * as lib from '@jdeighan/base-utils/to-nice'\nObject.assign(global, lib)\n\n# ---------------------------------------------------------------------------\n# --- test needsQuotes\n\nfalsy  needsQuotes(\"abc\")\nfalsy  needsQuotes(\"\\\"Hi\\\", Alice's sheep said.\")\ntruthy needsQuotes(\"- item\")\ntruthy needsQuotes(\"   - item\")\ntruthy needsQuotes(\"name:\")\ntruthy needsQuotes(\"   name:\")\ntruthy needsQuotes(\"name : John\")\n\n# --- whitespace is always made explicit\n\nequal formatString(\"a word\"), \"a˳word\"\nequal formatString(\"\\t\\tword\"), \"→  →  word\"\nequal formatString(\"first\\nsecond\"), \"first▼second\"\nequal formatString(\"first\\r\\nsecond\\r\\n\"), \"first◄▼second◄▼\"\n\nequal formatString(\"abc\"), \"abc\"\nequal formatString(\"mary's lamb\"), 'mary\\'s˳lamb'\nequal formatString(\"mary's \\\"stuff\\\"\"), 'mary\\'s˳\"stuff\"'\n\n# --- If it looks like an array element, add quotes\nequal formatString(\"- item\"), \"«-˳item»\"\nequal formatString(\"   - item\"), \"«˳˳˳-˳item»\"\nequal formatString(\"-    item\"), \"«-˳˳˳˳item»\"\n\n# ---------------------------------------------------------------------------\n# --- test indentBlock\n\nequal indentBlock(\"\"\"\n\tthis\n\tthat\n\t\"\"\", 2, '>'),\n\t\"\"\"\n\t>>this\n\t>>that\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n# --- repeat formatString() tests using toNICE()\n\n(() =>\n\t# --- define a function:\n\taFunc = () =>\n\t\treturn 42\n\n\t# --- transform value using toNICE() automatically\n\tu = new UnitTester()\n\tu.transformValue = (str) => return toNICE(str)\n\n\tu.equal \"a word\", \"a˳word\"\n\tu.equal \"\\t\\tword\", \"→  →  word\"\n\tu.equal \"first\\nsecond\", \"first▼second\"\n\tu.equal \"abc\", \"abc\"\n\tu.equal \"mary's lamb\", 'mary\\'s˳lamb'\n\tu.equal \"mary's \\\"stuff\\\"\", 'mary\\'s˳\"stuff\"'\n\n\tu.equal undef, \".undef.\"\n\tu.equal null, \".null.\"\n\tu.equal NaN, '.NaN.'\n\tu.equal 42, \"42\"\n\tu.equal true, '.true.'\n\tu.equal false, '.false.'\n\tu.equal (() => 42), '[Function]'\n\tu.equal aFunc, '[Function aFunc]'\n\n\tfunc2 = (x) =>\n\t\treturn\n\tu.equal func2, \"[Function func2]\"\n\n\tu.equal ['a','b'], \"\"\"\n\t\t- a\n\t\t- b\n\t\t\"\"\"\n\tu.equal [1,2], \"\"\"\n\t\t- 1\n\t\t- 2\n\t\t\"\"\"\n\tu.equal ['1','2'], \"\"\"\n\t\t- «1»\n\t\t- «2»\n\t\t\"\"\"\n\tu.equal {a: 1, b: 2}, \"\"\"\n\t\ta: 1\n\t\tb: 2\n\t\t\"\"\"\n\tu.equal {a: 'a', b: 'b'}, \"\"\"\n\t\ta: a\n\t\tb: b\n\t\t\"\"\"\n\n\tu.equal [ {a:1}, 'abc'], \"\"\"\n\t\t-\n\t\t\ta: 1\n\t\t- abc\n\t\t\"\"\"\n\n\tu.equal {a: [1,2], b: 'abc'}, \"\"\"\n\t\ta:\n\t\t\t- 1\n\t\t\t- 2\n\t\tb: abc\n\t\t\"\"\"\n\n\tu.equal {a:1, b:'abc', f: func2}, \"\"\"\n\t\ta: 1\n\t\tb: abc\n\t\tf: [Function func2]\n\t\t\"\"\"\n\n\tu.equal {\n\t\tkey: 'wood'\n\t\tvalue: [\n\t\t\t\"a word\"\n\t\t\t{a:1, b:2}\n\t\t\tundef,\n\t\t\t[1,2,\"mary's lamb\",\"mary's \\\"stuff\\\"\"]\n\t\t\t]\n\t\titems: [\"\\ta\", 2, \"\\t\\tb\\n\"]\n\t\t}, \"\"\"\n\t\tkey: wood\n\t\tvalue:\n\t\t\t- a˳word\n\t\t\t-\n\t\t\t\ta: 1\n\t\t\t\tb: 2\n\t\t\t- .undef.\n\t\t\t-\n\t\t\t\t- 1\n\t\t\t\t- 2\n\t\t\t\t- mary\\'s˳lamb\n\t\t\t\t- mary\\'s˳\"stuff\"\n\t\titems:\n\t\t\t- →  a\n\t\t\t- 2\n\t\t\t- →  →  b▼\n\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test toNICE() with options\n\n(() =>\n\t# --- Create a hash\n\th = {}\n\th.mFirst = 'xyz'\n\th.aSecond = 'mno'\n\th.xThird = 'abc'\n\n\t# --- Without sorting, keys should come in insert order\n\tequal toNICE(h), \"\"\"\n\t\tmFirst: xyz\n\t\taSecond: mno\n\t\txThird: abc\n\t\t\"\"\"\n\n\t# --- delimit with label\n\tequal toNICE(h, 'delimit label=BLOCK width=20'), \"\"\"\n\t\t-----  BLOCK  ------\n\t\tmFirst: xyz\n\t\taSecond: mno\n\t\txThird: abc\n\t\t--------------------\n\t\t\"\"\"\n\n\t# --- sort keys alphabetically\n\tequal toNICE(h, {sortKeys: true}), \"\"\"\n\t\taSecond: mno\n\t\tmFirst: xyz\n\t\txThird: abc\n\t\t\"\"\"\n\n\t# --- sort keys in a specific order\n\tequal toNICE(h, {sortKeys: ['xThird']}), \"\"\"\n\t\txThird: abc\n\t\taSecond: mno\n\t\tmFirst: xyz\n\t\t\"\"\"\n\t)()"
  ]
}