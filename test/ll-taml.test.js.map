{
  "version": 3,
  "file": "ll-taml.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\ll-taml.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# ll-taml.test.coffee\n\nimport test from 'ava'\n\nimport {\n\tundef, defined, notdefined, pass, escapeStr, OL,\n\t} from '@jdeighan/base-utils'\nimport {\n\tisTAML, toTAML, fromTAML,\n\tllSplit, splitTaml, tamlFix, fixValStr,\n\t} from '@jdeighan/base-utils/ll-taml'\n\n# ---------------------------------------------------------------------------\n\ntest \"line 15\", (t) => t.deepEqual llSplit(\"a: 53\"), [\"a: \",\"53\"]\ntest \"line 16\", (t) => t.deepEqual llSplit(\"a: 53\"), [\"a: \",\"53\"]\ntest \"line 17\", (t) => t.deepEqual llSplit(\"a  :   53\"), [\"a: \",\"53\"]\n\ntest \"line 19\", (t) => t.deepEqual llSplit(\"- abc\"), [\"- \",\"abc\"]\ntest \"line 20\", (t) => t.deepEqual llSplit(\"-   abc\"), [\"- \",\"abc\"]\n\ntest \"line 22\", (t) => t.is llSplit(\"abc\"), undef\ntest \"line 23\", (t) => t.is llSplit(\"24\"), undef\ntest \"line 24\", (t) => t.is llSplit(\"'abc'\"), undef\n\n# ---------------------------------------------------------------------------\n# Leave these alone:\n#    empty string\n#    []\n#    {}\n#    number\n#    \"<str>\"\n#    '<str>'\n#    true\n#    false\n\ntest \"line 37\", (t) => t.is fixValStr(''), ''\ntest \"line 38\", (t) => t.is fixValStr('[]'), '[]'\ntest \"line 39\", (t) => t.is fixValStr('{}'), '{}'\ntest \"line 40\", (t) => t.is fixValStr('42'), '42'\ntest \"line 41\", (t) => t.is fixValStr('\"abc\"'), '\"abc\"'\ntest \"line 42\", (t) => t.is fixValStr(\"'abc'\"), \"'abc'\"\ntest \"line 43\", (t) => t.is fixValStr('true'), 'true'\ntest \"line 44\", (t) => t.is fixValStr('false'), 'false'\n\n# --- quote everything else\n\ntest \"line 48\", (t) => t.is fixValStr(\"abc\"), \"'abc'\"\ntest \"line 49\", (t) => t.is fixValStr(\"it's\"), \"'it''s'\"\n\n# ---------------------------------------------------------------------------\n\ntest \"line 53\", (t) => t.deepEqual splitTaml('a: - abc'), ['a: ','- ',\"'abc'\"]\ntest \"line 54\", (t) => t.deepEqual splitTaml('-  a:   53'), ['- ','a: ','53']\ntest \"line 55\", (t) => t.deepEqual splitTaml('\"abc\"'), ['\"abc\"']\ntest \"line 56\", (t) => t.deepEqual splitTaml('abc'), [\"'abc'\"]\n\n# ---------------------------------------------------------------------------\n\ntest \"line 60\", (t) => t.is toTAML([]),            '---\\n[]'\ntest \"line 61\", (t) => t.is toTAML({}),            '---\\n{}'\ntest \"line 62\", (t) => t.is toTAML([1,2]),         '---\\n- 1\\n- 2'\ntest \"line 63\", (t) => t.is toTAML(['1','2']),     '---\\n- \"1\"\\n- \"2\"'\ntest \"line 64\", (t) => t.is toTAML({a:1,b:2}),     '---\\na: 1\\nb: 2'\n\nh = {\n\th: [\n\t\t{a: 1}\n\t\t{b: 2}\n\t\t]\n\t}\ntest \"line 72\", (t) => t.is toTAML(h), '---\\nh:\\n\\t- a: 1\\n\\t- b: 2'\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tstr = \"\"\"\n\t---\n\t- index: 0\n\t\tstate: learning\n\t- index: 1\n\t\tstate: learning\n\t- index: 2\n\t\tstate: learning\n\t\"\"\"\n\n\ttest \"line 87\", (t) => t.deepEqual fromTAML(str), [\n\t\t{ index: 0, state: 'learning'}\n\t\t{ index: 1, state: 'learning'}\n\t\t{ index: 2, state: 'learning'}\n\t\t]\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tstr = \"\"\"\n\t\t---\n\t\t- en: sad\n\t\t\tindex: 5\n\t\t\ttype: adjective\n\t\t\tzh: []\n\t\t\"\"\"\n\n\ttest \"line 105\", (t) => t.deepEqual fromTAML(str), [\n\t\t{ en: 'sad', index: 5, type: 'adjective', zh: []}\n\t\t]\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tstr = \"\"\"\n\t\t---\n\t\ttype: function\n\t\tfuncName: main\n\t\tsource: C:/Users/johnd/base-utils/test/v8-stack.test.js\n\t\t\"\"\"\n\n\ttest \"line 120\", (t) => t.deepEqual fromTAML(str), {\n\t\ttype: 'function'\n\t\tfuncName: 'main'\n\t\tsource: 'C:/Users/johnd/base-utils/test/v8-stack.test.js'\n\t\t}\n\t)()\n"
  ]
}