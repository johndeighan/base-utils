// Generated by CoffeeScript 2.7.0
// fs.coffee
import fs from 'fs';

import CoffeeScript from 'coffeescript';

import {
  nonEmpty
} from '@jdeighan/base-utils';

// ---------------------------------------------------------------------------
export var isFile = (fullpath) => {
  try {
    return fs.lstatSync(fullpath).isFile();
  } catch (error) {
    return false;
  }
};

// ---------------------------------------------------------------------------
export var isDir = (fullpath) => {
  try {
    return fs.lstatSync(fullpath).isDirectory();
  } catch (error) {
    return false;
  }
};

// ---------------------------------------------------------------------------
export var mkdirSync = (dirpath) => {
  var err;
  try {
    fs.mkdirSync(dirpath);
  } catch (error) {
    err = error;
    if (err.code === 'EEXIST') {
      console.log('Directory exists. Please choose another name');
    } else {
      console.log(err);
    }
    process.exit(1);
  }
};

// ---------------------------------------------------------------------------
//   slurp - read a file into a string
export var slurp = (filepath) => {
  filepath = filepath.replace(/\//g, "\\");
  return fs.readFileSync(filepath, 'utf8').toString();
};

// ---------------------------------------------------------------------------
//   barf - write a string to a file
export var barf = (filepath, contents) => {
  fs.writeFileSync(filepath, contents);
};

// ---------------------------------------------------------------------------
export var forEachFileInDir = (dir, func) => {
  var ent, i, len, ref;
  ref = fs.readdirSync(dir, {
    withFileTypes: true
  });
  // --- callback will get parms (filename, dir)
  //     NOT RECURSIVE
  for (i = 0, len = ref.length; i < len; i++) {
    ent = ref[i];
    if (ent.isFile()) {
      func(ent.name, dir);
    }
  }
};

// ---------------------------------------------------------------------------
export var mkpath = (...lParts) => {
  var _, drive, lMatches, rest, str;
  lParts = lParts.filter((x) => {
    return nonEmpty(x);
  });
  str = lParts.join('/');
  str = str.replaceAll('\\', '/');
  if (lMatches = str.match(/^([A-Z])\:(.*)$/)) {
    [_, drive, rest] = lMatches;
    return `${drive.toLowerCase()}:${rest}`;
  } else {
    return str;
  }
};

// ---------------------------------------------------------------------------
export var brew = function(coffeeCode, hOptions) {
  var jsCode;
  // --- Valid options:
  //        shebang: <bool>   - add the shebang line
  jsCode = CoffeeScript.compile(coffeeCode, {
    bare: true,
    header: false
  });
  if (hOptions.shebang) {
    return "#!/usr/bin/env node\n" + jsCode.trim();
  } else {
    return jsCode.trim();
  }
};
