{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src/bootstrap-utils.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# bootstrap-utils.coffee\n\nimport assertLib from 'node:assert'\nimport {execSync} from 'node:child_process'\nimport fs from 'node:fs'\nimport {globSync} from 'glob'\nimport NReadLines from 'n-readlines'\nimport YAML from 'yaml'\nimport CoffeeScript from 'coffeescript'\n\n`const undef = void 0`\n\n# ---------------------------------------------------------------------------\n# low-level version of assert()\n\nexport assert = (cond, msg) =>\n\n\tassertLib.ok cond, msg\n\treturn true\n\n# ---------------------------------------------------------------------------\n# These are duplicates of standard functions\n# However, when starting with a clean stalte, we can't be sure\n#    that the standard libraries have been compiled, so\n#    we start with these\n\nexport brewFile = (filePath) =>\n\n\tjsPath = withExt(filePath, '.js')\n\tmapPath = withExt(filePath, '.js.map')\n\tif newerDestFilesExist(filePath, jsPath, mapPath)\n\t\treturn\n\n\t# --- define getLine() to read line by line\n\tnReader = new NReadLines(filePath)\n\tgetLine = () =>\n\t\tbuffer = nReader.next()\n\t\tif (buffer == false)\n\t\t\tnReader = undef   # prevent further reads\n\t\t\treturn undef\n\t\tresult = buffer.toString().replaceAll('\\r', '')\n\t\tif (result == '__END__')\n\t\t\treturn undef\n\t\treturn result\n\n\tfirstLine = getLine()\n\n\tshebang = undef\n\n\t# --- fetch any metadata\n\tif (firstLine == '---')\n\t\tlYaml = []\n\t\tline = getLine()\n\t\twhile (line != '---')\n\t\t\tlYaml.push line\n\t\t\tline = getLine()\n\t\thMetaData = YAML.parse lYaml.join(\"\\n\")\n\t\tshebang = hMetaData.shebang\n\t\tif (shebang == true)\n\t\t\tshebang = \"#!/usr/bin/env node\"\n\n\tif (firstLine == '---')\n\t\tlLines = []\n\telse\n\t\tlLines = [firstLine]\n\n\tline = getLine()\n\twhile (line != undef) && (line != '__END__')\n\t\tlLines.push line\n\t\tline = getLine()\n\n\tcoffeeCode = lLines.join(\"\\n\")\n\t{js, v3SourceMap} = CoffeeScript.compile coffeeCode, {\n\t\tbare: true\n\t\theader: false\n\t\tsourceMap: true\n\t\tfilename: filePath\n\t\t}\n\tif (shebang == undef)\n\t\tfs.writeFileSync(jsPath, js)\n\telse\n\t\tfs.writeFileSync(jsPath, shebang + \"\\n\" + js)\n\tfs.writeFileSync(mapPath, v3SourceMap)\n\n\tconsole.log filePath.replaceAll('\\\\', '/')\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport fileExt = (filePath) =>\n\n\tif lMatches = filePath.match(/\\.[^\\.]+$/)\n\t\treturn lMatches[0]\n\telse\n\t\treturn ''\n\n# ---------------------------------------------------------------------------\n\nexport withExt = (filePath, newExt) =>\n\n\tif newExt.indexOf('.') != 0\n\t\tnewExt = '.' + newExt\n\n\tif lMatches = filePath.match(/^(.*)\\.[^\\.]+$/)\n\t\t[_, pre] = lMatches\n\t\treturn pre + newExt\n\tthrow new Error(\"Bad path: '#{filePath}'\")\n\n# ---------------------------------------------------------------------------\n\nexport newerDestFilesExist = (srcPath, lDestPaths...) =>\n\n\tfor destPath in lDestPaths\n\t\tif ! fs.existsSync(destPath)\n\t\t\treturn false\n\t\tsrcModTime = fs.statSync(srcPath).mtimeMs\n\t\tdestModTime = fs.statSync(destPath).mtimeMs\n\t\tif (destModTime < srcModTime)\n\t\t\treturn false\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport execCmd = (cmdLine) =>\n\n\texecSync cmdLine, {\n\t\tencoding: 'utf8'\n\t\twindowsHide: true\n\t\t}\n\treturn\n\n# ---------------------------------------------------------------------------\n# --- convert \\ to /\n#     convert \"C:...\" to \"c:...\"\n\nexport normalize = (filePath) =>\n\n\tfilePath = filePath.replaceAll '\\\\', '/'\n\tif (filePath.charAt(1) == ':')\n\t\treturn filePath.charAt(0).toLowerCase() + filePath.substring(1)\n\telse\n\t\treturn filePath\n\n# ---------------------------------------------------------------------------\n\nexport isFakeFile = (filePath) =>\n\n\treturn false\n\n# ---------------------------------------------------------------------------\n\nexport createFakeFiles = () =>\n\n\tfor filePath in globSync('./src/{bin,lib}/*.peggy')\n\t\tdestPath = withExt(filePath, '.js')\n\t\tif ! fs.existsSync(destPath)\n\t\t\tconsole.log normalize(destPath) + ' (fake)'\n\t\t\tfs.writeFileSync(destPath, \"\"\"\n\t\t\t\t// fake\n\t\t\t\texport function parse(str) {\n\t\t\t\t\tthrow new Error(\"Attempt to use fake peggy file #{destPath}\");\n\t\t\t\t\t}\n\t\t\t\t\"\"\")\n\treturn"
  ]
}