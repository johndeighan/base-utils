// Generated by CoffeeScript 2.7.0
  // exceptions.coffee
var doHaltOnError, doLog, getCallers, isString, sep_dash, sep_eq, untabify,
  indexOf = [].indexOf;

import yaml from 'js-yaml';

sep_dash = '-'.repeat(42);

sep_eq = '='.repeat(42);

const undef = undefined;

isString = (x) => {
  return (typeof x === 'string') || (x instanceof String);
};

untabify = function(str) {
  return str.replace(/\t/g, ' '.repeat(3));
};

doHaltOnError = false;

doLog = true;

// ---------------------------------------------------------------------------
export var haltOnError = function(flag = true) {
  var save;
  // --- return existing setting
  save = doHaltOnError;
  doHaltOnError = flag;
  return save;
};

// ---------------------------------------------------------------------------
export var logErrors = function(flag = true) {
  var save;
  save = doLog;
  doLog = flag;
  return save;
};

// ---------------------------------------------------------------------------
// --- export only to allow unit tests
export var toTAML = function(obj) {
  var str;
  str = yaml.dump(obj, {
    skipInvalid: true,
    indent: 3,
    sortKeys: true,
    lineWidth: -1
  });
  return "---\n" + str;
};

// ---------------------------------------------------------------------------
// This is useful for debugging
export var LOG = function(...lArgs) {
  var item, label;
  if (!doLog) {
    return;
  }
  switch (lArgs.length) {
    case 0:
      console.log("");
      break;
    case 1:
      console.log(lArgs[0]);
      break;
    case 2:
      // --- There's both a label and an item
      [label, item] = lArgs;
      if (item === undef) {
        console.log(`${label} = undef`);
      } else if (item === null) {
        console.log(`${label} = null`);
      } else {
        console.log(sep_dash);
        console.log(`${label}:`);
        if (isString(item)) {
          console.log(untabify(item));
        } else {
          console.log(toTAML(item));
        }
        console.log(sep_dash);
      }
      break;
    default:
      console.log(`TOO MANY ARGS for LOG(): ${lArgs.length}`);
  }
  return true; // to allow use in boolean expressions
};


// --- Use this instead to make it easier to remove all instances
export var DEBUG = LOG; // synonym


// ---------------------------------------------------------------------------
getCallers = function(stackTrace, lExclude = []) {
  var _, caller, iter, lCallers, lMatches;
  iter = stackTrace.matchAll(/at\s+(?:async\s+)?([^\s(]+)/g);
  if (!iter) {
    return ["<unknown>"];
  }
  lCallers = [];
  for (lMatches of iter) {
    [_, caller] = lMatches;
    if (caller.indexOf('file://') === 0) {
      break;
    }
    if (indexOf.call(lExclude, caller) < 0) {
      lCallers.push(caller);
    }
  }
  return lCallers;
};

// ---------------------------------------------------------------------------
//   assert - mimic nodejs's assert
//   return true so we can use it in boolean expressions
export var assert = function(cond, msg) {
  var caller, i, lCallers, len, stackTrace;
  if (!cond) {
    if (doLog) {
      stackTrace = new Error().stack;
      lCallers = getCallers(stackTrace, ['assert']);
      console.log('--------------------');
      console.log('JavaScript CALL STACK:');
      for (i = 0, len = lCallers.length; i < len; i++) {
        caller = lCallers[i];
        console.log(`   ${caller}`);
      }
      console.log('--------------------');
      console.log(`ERROR: ${msg} (in ${lCallers[0]}())`);
    }
    croak(msg);
  }
  return true;
};

// ---------------------------------------------------------------------------
//   croak - throws an error after possibly printing useful info
//           err can be a string or an Error object
export var croak = function(err, label = undef, obj = undef) {
  var curmsg, newmsg;
  if (isString(err)) {
    curmsg = err;
  } else {
    curmsg = err.message;
  }
  if (isEmpty(label)) {
    newmsg = `ERROR (croak): ${curmsg}`;
  } else {
    newmsg = `ERROR (croak): ${curmsg}
${label}:
${toTAML(obj)}`;
  }
  if (doHaltOnError) {
    LOG(newmsg);
    return process.exit();
  } else {
    // --- re-throw the error
    throw new Error(newmsg);
  }
};
