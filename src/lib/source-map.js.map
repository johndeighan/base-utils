{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\source-map.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# source-map.coffee\n\nimport {readFileSync, existsSync} from 'node:fs'\nimport {SourceMapConsumer} from 'source-map'\n\nimport {\n\tundef, pass, defined, notdefined, alldefined,\n\tassert, croak,\n\tisEmpty, nonEmpty, deepCopy,\n\tgetOptions, isInteger, isString, isHash,\n\tfileExt,\n\t} from '@jdeighan/base-utils'\nimport {\n\tisFile, mkpath, parsePath,\n\t} from '@jdeighan/base-utils/ll-fs'\n\n# --- cache to hold previously fetched file contents\nhSourceMaps = {}    # { filepath => hMap, ... }\n\n# ---------------------------------------------------------------------------\n# This lib uses the library source-map-js\n# ---------------------------------------------------------------------------\n\nexport getMap = (mapFilePath) =>\n\t# --- returns a hash\n\n\t# --- get from cache if available\n\tif hSourceMaps.hasOwnProperty(mapFilePath)\n\t\treturn hSourceMaps[mapFilePath]\n\telse\n\t\trawMap = readFileSync mapFilePath, 'utf8'\n\t\treturn hSourceMaps[mapFilePath] = JSON.parse(rawMap)\n\n# ---------------------------------------------------------------------------\n# --- Valid keys:\n#\n#   - version: Which version of the source map spec this map is following.\n#   - sources: An array of URLs to the original source files.\n#   - names: An array of identifiers which can be referrenced by individual mappings.\n#   - sourceRoot: Optional. The URL root from which all sources are relative.\n#   - sourcesContent: Optional. An array of contents of the original source files.\n#   - mappings: A string of base64 VLQs which contain the actual mappings.\n#   - file: Optional. The generated file this source map is associated with.\n\nexport dumpMap = (hMap) =>\n\n\thJson = {\n\t\tversion: hMap.version\n\t\tsources: hMap.sources\n\t\tnames: hMap.names\n\t\tsourceRoot: hMap.sourceRoot\n\t\tsourcesContent: defined(hMap.sourcesContent)\n\t\tmappings: defined(hMap.mappings)\n\t\tfile: hMap.file\n\t\t}\n\tconsole.log JSON.stringify(hJson, null, 3)\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport mapLineNum = (jsPath, line, column=0, hOptions={}) =>\n\n\t{debug} = getOptions hOptions, {\n\t\tdebug: false\n\t\t}\n\n\tif debug\n\t\tconsole.log \"DEBUGGING mapLineNum(#{line},#{column})\"\n\t\tconsole.log \"   #{jsPath}\"\n\tassert isInteger(line), \"line #{line} not an integer\"\n\ttry\n\t\thMapped = mapSourcePos jsPath, line, column, {debug}\n\t\treturn hMapped.line\n\tcatch err\n\t\tif debug\n\t\t\tconsole.log \"mapSourcePos failed, returning original line\"\n\t\t\tconsole.log err.message\n\t\treturn line\n\n# ---------------------------------------------------------------------------\n\nexport mapSourcePos = (jsPath, line, column, hOptions={}) =>\n\t# --- Valid options:\n\t#        debug\n\t# --- Can map only if:\n\t#        1. ext is .js\n\t#        2. <jsPath>.map exists\n\t#\n\t#     returns {source, line, column, name}\n\t#     will return original jsPath, line and column\n\t#        if no map file, or unable to map\n\n\t{debug} = getOptions hOptions, {\n\t\tdebug: false\n\t\t}\n\n\tif debug\n\t\tconsole.log \"DEBUGGING mapSourcePos(#{line},#{column})\"\n\t\tconsole.log \"   #{jsPath}\"\n\n\tjsPath = mkpath jsPath\n\tmapFilePath = jsPath + '.map'\n\n\tassert isFile(jsPath), \"no such file #{jsPath}\"\n\tassert isFile(mapFilePath), \"no such file #{mapFilePath}\"\n\tassert fileExt(jsPath) == '.js', \"Not a JS file\"\n\tassert isInteger(line, {min: 0}), \"line #{line} not an integer\"\n\tassert isInteger(column, {min: 0}), \"column #{column} not an integer\"\n\n\t# --- get from cache if available\n\thMap = getMap mapFilePath\n\tassert defined(hMap), \"getMap() returned undef\"\n\tif debug\n\t\tdumpMap hMap\n\n\tsmc = new SourceMapConsumer(hMap)\n\tif debug\n\t\tconsole.log smc.sources\n\n\t# --- hMapped is {source, line, column, name}\n\thMapped = smc.originalPositionFor({line, column})\n\tif debug\n\t\tconsole.log hMapped\n\tassert isHash(hMapped), \"originalPositionFor(#{line},#{column}) returned non-hash\"\n\t{source, line, column, name} = hMapped\n\tassert isInteger(line), \"originalPositionFor(#{line},#{column}) returned line = #{line}\"\n\treturn hMapped"
  ]
}