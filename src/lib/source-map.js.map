{
  "version": 3,
  "file": "source-map.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\source-map.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# source-map.coffee\r\n\r\nimport {readFileSync, existsSync} from 'node:fs'\r\nimport {SourceMapConsumer} from 'source-map-js'\r\n\r\nimport {\r\n\tundef, pass, defined, notdefined, alldefined, ll_assert,\r\n\tisEmpty, nonEmpty, deepCopy,\r\n\tgetOptions, isInteger, isString,\r\n\t} from '@jdeighan/base-utils'\r\nimport {\r\n\tisFile, fileExt, mkpath, parsePath,\r\n\t} from '@jdeighan/base-utils/ll-fs'\r\n\r\n# --- cache to hold previously fetched file contents\r\nhSourceMaps = {}    # { filepath => hMap, ... }\r\n\r\n# ---------------------------------------------------------------------------\r\n# This lib uses the library source-map-js\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getMap = (mapFilePath) =>\r\n\r\n\t# --- get from cache if available\r\n\tif hSourceMaps.hasOwnProperty(mapFilePath)\r\n\t\treturn hSourceMaps[mapFilePath]\r\n\telse\r\n\t\trawMap = readFileSync mapFilePath, 'utf8'\r\n\t\thMap = hSourceMaps[mapFilePath] = JSON.parse(rawMap)\r\n\t\treturn hMap\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Valid keys:\r\n#\r\n#   - version: Which version of the source map spec this map is following.\r\n#   - sources: An array of URLs to the original source files.\r\n#   - names: An array of identifiers which can be referrenced by individual mappings.\r\n#   - sourceRoot: Optional. The URL root from which all sources are relative.\r\n#   - sourcesContent: Optional. An array of contents of the original source files.\r\n#   - mappings: A string of base64 VLQs which contain the actual mappings.\r\n#   - file: Optional. The generated file this source map is associated with.\r\n\r\nexport dumpMap = (hMap) =>\r\n\r\n\thJson = {\r\n\t\tversion: hMap.version\r\n\t\tsources: hMap.sources\r\n\t\tnames: hMap.names\r\n\t\tsourceRoot: hMap.sourceRoot\r\n\t\tsourcesContent: defined(hMap.sourcesContent)\r\n\t\tmappings: defined(hMap.mappings)\r\n\t\tfile: hMap.file\r\n\t\t}\r\n\tconsole.log JSON.stringify(hJson, null, 3)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mapLineNum = (jsPath, line) =>\r\n\r\n\t# --- Temporarily, since it's broken,\r\n\t#     we simply return the original line number\r\n\treturn line\r\n\r\n#\thMapped = mapSourcePos(jsPath, line, 0)\r\n#\treturn hMapped.line\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mapSourcePos = (jsPath, line, column, hOptions={}) =>\r\n\t# --- Can map only if:\r\n\t#        1. ext is .js\r\n\t#        2. <jsPath>.map exists\r\n\t#\r\n\t#     returns {source, line, column, name}\r\n\r\n\t{debug} = getOptions hOptions, {\r\n\t\tdebug: false\r\n\t\t}\r\n\r\n\tjsPath = mkpath jsPath\r\n\tll_assert isFile(jsPath), \"no such file #{jsPath}\"\r\n\tif (fileExt(jsPath) != '.js')\r\n\t\tif debug\r\n\t\t\tconsole.log \"#{jsPath} is not a JS file\"\r\n\t\treturn undef\r\n\r\n\tll_assert isInteger(line, {min: 0}), \"line #{line} not an integer\"\r\n\tll_assert isInteger(column, {min: 0}), \"column #{column} not an integer\"\r\n\r\n\tmapFilePath = jsPath + '.map'\r\n\tif isFile(mapFilePath)\r\n\t\tif debug\r\n\t\t\tconsole.log \"map file #{mapFilePath} found\"\r\n\telse\r\n\t\tif debug\r\n\t\t\tconsole.log \"map file #{mapFilePath} not found\"\r\n\t\treturn undef\r\n\r\n\t# --- get from cache if available\r\n\thMap = getMap mapFilePath\r\n\r\n\tll_assert defined(hMap), \"Unable to get map from #{mapFilePath}\"\r\n\tif debug\r\n\t\tdumpMap hMap\r\n\r\n\tsmc = new SourceMapConsumer(hMap)\r\n\tif debug\r\n\t\tconsole.log smc.sources\r\n\r\n\t# --- hMapped is {source, line, column, name}\r\n\thMapped = smc.originalPositionFor({line, column})\r\n\tif debug\r\n\t\tconsole.log hMapped\r\n\treturn hMapped\r\n"
  ]
}