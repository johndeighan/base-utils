{
  "version": 3,
  "file": "debug.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\debug.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# debug.coffee\r\n\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {\r\n\tpass, undef, defined, notdefined, OL, OLS,\r\n\tisIdentifier, isFunctionName, isArrayOfStrings,\r\n\tisString, isFunction, isArray, isHash, isBoolean, isInteger,\r\n\tisEmpty, nonEmpty, arrayToBlock, getOptions,\r\n\twords, oneof, jsType, blockToArray,\r\n\t} from '@jdeighan/base-utils'\r\nimport {getPrefix} from '@jdeighan/base-utils/prefix'\r\nimport {\r\n\tLOG, LOGVALUE, stringFits, debugLogging,\r\n\tclearMyLogs, getMyLogs, echoMyLogs,\r\n\t} from '@jdeighan/base-utils/log'\r\nimport {toTAML} from '@jdeighan/base-utils/taml'\r\nimport {CallStack} from '@jdeighan/base-utils/stack'\r\n\r\nexport {debugLogging}\r\n\r\nexport callStack = new CallStack()\r\n\r\n# --- Comes from call to setDebugging()\r\nlFuncList = []      # array of {funcName, plus}\r\n\r\nlogAll = false      # if true, always log\r\ninternalDebugging = false\r\n\r\n# --- Custom loggers, if defined\r\nlogEnter     = undef\r\nlogReturn    = undef\r\nlogYield     = undef\r\nlogResume    = undef\r\nlogString    = undef\r\nlogValue     = undef\r\n\r\nexport doDbg = true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport disableDbg = () ->\r\n\r\n\tdoDbg = false\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport clearDebugLog = () =>\r\n\r\n\treturn clearMyLogs()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getDebugLog = () =>\r\n\r\n\treturn getMyLogs()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport debugDebug = (debugFlag=true) =>\r\n\r\n\tinternalDebugging = debugFlag\r\n\tif debugFlag\r\n\t\tconsole.log \"turn on internal debugging in debug.coffee\"\r\n\telse\r\n\t\tconsole.log \"turn off internal debugging in debug.coffee\"\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport dumpDebugLoggers = (label=undef) =>\r\n\r\n\tlLines = []\r\n\tif nonEmpty(label)\r\n\t\tlLines.push \"LOGGERS (#{label})\"\r\n\telse\r\n\t\tlLines.push \"LOGGERS\"\r\n\tlLines.push \"   enter      - #{logType(logEnter, stdLogEnter)}\"\r\n\tlLines.push \"   return     - #{logType(logReturn, stdLogReturn)}\"\r\n\tlLines.push \"   yield      - #{logType(logYield, stdLogYield)}\"\r\n\tlLines.push \"   resume     - #{logType(logResume, stdLogResume)}\"\r\n\tlLines.push \"   string     - #{logType(logString, stdLogString)}\"\r\n\tlLines.push \"   value      - #{logType(logValue, stdLogValue)}\"\r\n\tconsole.log arrayToBlock(lLines)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nlogType = (cur, std) =>\r\n\r\n\tif (cur == std)\r\n\t\treturn 'std'\r\n\telse if defined(cur)\r\n\t\treturn 'custom'\r\n\telse\r\n\t\treturn 'undef'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport resetDebugging = () =>\r\n\r\n\t# --- reset everything\r\n\tcallStack.reset()\r\n\tlFuncList = []\r\n\tlogAll = false\r\n\tlogEnter  = stdLogEnter\r\n\tlogReturn = stdLogReturn\r\n\tlogYield  = stdLogYield\r\n\tlogResume = stdLogResume\r\n\tlogString = stdLogString\r\n\tlogValue  = stdLogValue\r\n\tclearMyLogs()\r\n\techoMyLogs false\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport setDebugging = (debugWhat=undef, hOptions={}) =>\r\n\t# --- debugWhat can be:\r\n\t#        1. a boolean\r\n\t#        2. a string\r\n\t#        3. an array of strings\r\n\t# --- Valid options:\r\n\t#        'noecho' - don't echo logs to console\r\n\t#        'enter', 'returnFrom',\r\n\t#           'yield', 'resume',\r\n\t#           'string', 'value'\r\n\t#         - to set custom loggers\r\n\r\n\tif internalDebugging\r\n\t\tconsole.log \"setDebugging #{OL(debugWhat)}, #{OL(hOptions)}\"\r\n\r\n\tresetDebugging()\r\n\r\n\tcustomSet = false     # were any custom loggers set?\r\n\r\n\t# --- First, process any options\r\n\thOptions = getOptions(hOptions)\r\n\tif hOptions.noecho\r\n\t\techoMyLogs false\r\n\t\tif internalDebugging\r\n\t\t\tconsole.log \"TURN OFF ECHO\"\r\n\telse\r\n\t\techoMyLogs true\r\n\t\tif internalDebugging\r\n\t\t\tconsole.log \"TURN ON ECHO\"\r\n\tfor key in words('enter returnFrom yield resume string value')\r\n\t\tif defined(hOptions[key])\r\n\t\t\tsetCustomDebugLogger key, hOptions[key]\r\n\t\t\tcustomSet = true\r\n\r\n\t# --- process debugWhat if defined\r\n\t[type, subtype] = jsType(debugWhat)\r\n\tswitch type\r\n\t\twhen undef\r\n\t\t\tpass()\r\n\t\twhen 'boolean'\r\n\t\t\tif internalDebugging\r\n\t\t\t\tconsole.log \"set logAll to #{OL(debugWhat)}\"\r\n\t\t\tlogAll = debugWhat\r\n\t\twhen 'string', 'array'\r\n\t\t\tif internalDebugging\r\n\t\t\t\tconsole.log \"debugWhat is #{OL(debugWhat)}\"\r\n\t\t\tlFuncList = getFuncList(debugWhat)\r\n\t\telse\r\n\t\t\tcroak \"Bad arg 1: #{OL(debugWhat)}\"\r\n\r\n\tif internalDebugging\r\n\t\tdumpFuncList()\r\n\t\tif customSet\r\n\t\t\tdumpDebugLoggers()\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport dumpFuncList = () =>\r\n\r\n\tconsole.log 'lFuncList: --------------------------------'\r\n\tconsole.log toTAML(lFuncList)\r\n\tconsole.log '-------------------------------------------'\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport setCustomDebugLogger = (type, func) =>\r\n\r\n\tassert isFunction(func), \"Not a function\"\r\n\tif internalDebugging\r\n\t\tconsole.log \"set custom logger #{OL(type)}\"\r\n\tswitch type\r\n\t\twhen 'enter'\r\n\t\t\tlogEnter = func\r\n\t\twhen 'returnFrom'\r\n\t\t\tlogReturn = func\r\n\t\twhen 'yield'\r\n\t\t\tlogYield = func\r\n\t\twhen 'resume'\r\n\t\t\tlogResume = func\r\n\t\twhen 'string'\r\n\t\t\tlogString = func\r\n\t\twhen 'value'\r\n\t\t\tlogValue = func\r\n\t\telse\r\n\t\t\tthrow new Error(\"Unknown type: #{OL(type)}\")\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getFuncList = (funcs) =>\r\n\t# --- funcs can be a string or an array of strings\r\n\r\n\tlFuncs = []    # return value\r\n\r\n\t# --- Allow passing in an array of strings\r\n\tif isArray(funcs)\r\n\t\tassert isArrayOfStrings(funcs), \"not an array of strings\"\r\n\t\tfor str in funcs\r\n\t\t\tlItems = getFuncList(str)   # recursive call\r\n\t\t\tlFuncs.push lItems...\r\n\t\treturn lFuncs\r\n\r\n\tassert isString(funcs), \"not a string\"\r\n\tfor word in words(funcs)\r\n\t\tif (word == 'debug')\r\n\t\t\tinternalDebugging = true\r\n\t\t[fullName, modifier] = parseFunc(word)\r\n\t\tassert defined(fullName), \"Bad debug object: #{OL(word)}\"\r\n\t\tlFuncs.push {\r\n\t\t\tfullName\r\n\t\t\tplus: (modifier == '+')\r\n\t\t\t}\r\n\treturn lFuncs\r\n\r\n# ---------------------------------------------------------------------------\r\n# Stack is only modified in these 8 functions (it is reset in setDebugging())\r\n# ---------------------------------------------------------------------------\r\n\r\nexport dbgEnter = (funcName, lValues...) =>\r\n\r\n\tdoLog = doDebugFunc(funcName)\r\n\tif internalDebugging\r\n\t\tif (lValues.length == 0)\r\n\t\t\tconsole.log \"dbgEnter #{OL(funcName)}\"\r\n\t\telse\r\n\t\t\tconsole.log \"dbgEnter #{OL(funcName)}, #{OLS(lValues)}\"\r\n\t\tconsole.log \"   - doLog = #{OL(doLog)}\"\r\n\r\n\tif doLog\r\n\t\tlevel = callStack.logLevel\r\n\t\tif ! logEnter level, funcName, lValues\r\n\t\t\tstdLogEnter level, funcName, lValues\r\n\r\n\tcallStack.enter funcName, lValues, doLog\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport doDebugFunc = (funcName) =>\r\n\r\n\treturn logAll || funcMatch(funcName)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport funcMatch = (funcName) =>\r\n\t# --- funcName came from a call to dbgEnter()\r\n\t#     it might be of form <object>.<method>\r\n\t# --- We KNOW that funcName is active!\r\n\r\n\tif internalDebugging\r\n\t\tconsole.log \"CHECK funcMatch(#{OL(funcName)})\"\r\n\t\tconsole.log lFuncList\r\n\t\tcallStack.dump 1\r\n\r\n\tlParts = isFunctionName(funcName)\r\n\tassert defined(lParts), \"not a valid function name: #{OL(funcName)}\"\r\n\r\n\tfor h in lFuncList\r\n\t\tif (h.fullName == funcName)\r\n\t\t\tif internalDebugging\r\n\t\t\t\tconsole.log \"   - TRUE - #{OL(funcName)} is in lFuncList\"\r\n\t\t\treturn true\r\n\t\tif h.plus && callStack.isActive(h.fullName)\r\n\t\t\tif internalDebugging\r\n\t\t\t\tconsole.log \"   - TRUE - #{OL(h.fullName)} is active\"\r\n\t\t\treturn true\r\n\r\n\tif (lParts.length == 2)   # came from dbgEnter()\r\n\t\tmethodName = lParts[1]\r\n\t\tfor h in lFuncList\r\n\t\t\tif (h.fullName == methodName)\r\n\t\t\t\tif internalDebugging\r\n\t\t\t\t\tconsole.log \"   - TRUE - #{OL(methodName)} is in lFuncList\"\r\n\t\t\t\treturn true\r\n\tif internalDebugging\r\n\t\tconsole.log \"   - FALSE\"\r\n\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport dbgReturn = (lArgs...) =>\r\n\r\n\tif (lArgs.length > 1)\r\n\t\treturn dbgReturnVal lArgs...\r\n\tfuncName = lArgs[0]\r\n\tassert isFunctionName(funcName), \"not a valid function name\"\r\n\tdoLog = logAll || callStack.isLogging()\r\n\tif internalDebugging\r\n\t\tconsole.log \"dbgReturn #{OL(funcName)}\"\r\n\t\tconsole.log \"   - doLog = #{OL(doLog)}\"\r\n\tif doLog\r\n\t\tlevel = callStack.logLevel\r\n\t\tif ! logReturn level, funcName\r\n\t\t\tstdLogReturn level, funcName\r\n\r\n\tcallStack.returnFrom funcName\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\ndbgReturnVal = (funcName, val) =>\r\n\r\n\tassert isFunctionName(funcName), \"not a valid function name\"\r\n\tdoLog = logAll || callStack.isLogging()\r\n\tif internalDebugging\r\n\t\tconsole.log \"dbgReturn #{OL(funcName)}, #{OL(val)}\"\r\n\t\tconsole.log \"   - doLog = #{OL(doLog)}\"\r\n\tif doLog\r\n\t\tlevel = callStack.logLevel\r\n\t\tif ! logReturn level, funcName, val\r\n\t\t\tstdLogReturn level, funcName, val\r\n\r\n\tcallStack.returnFrom funcName, val\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport dbgYield = (lArgs...) =>\r\n\r\n\tnArgs = lArgs.length\r\n\tassert (nArgs==1) || (nArgs==2), \"Bad num args: #{nArgs}\"\r\n\t[funcName, val] = lArgs\r\n\tif (nArgs==1)\r\n\t\treturn dbgYieldFrom(funcName)\r\n\r\n\tassert isFunctionName(funcName), \"not a function name\"\r\n\tdoLog = logAll || callStack.isLogging()\r\n\tif internalDebugging\r\n\t\tconsole.log \"dbgYield #{OL(funcName)} #{OL(val)}\"\r\n\t\tconsole.log \"   - doLog = #{OL(doLog)}\"\r\n\tif doLog\r\n\t\tlevel = callStack.logLevel\r\n\t\tif ! logYield level, funcName, val\r\n\t\t\tstdLogYield level, funcName, val\r\n\r\n\tcallStack.yield funcName, val\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\ndbgYieldFrom = (funcName) =>\r\n\r\n\tassert isFunctionName(funcName), \"not a function name\"\r\n\tdoLog = logAll || callStack.isLogging()\r\n\tif internalDebugging\r\n\t\tconsole.log \"dbgYieldFrom #{OL(funcName)}\"\r\n\t\tconsole.log \"   - doLog = #{OL(doLog)}\"\r\n\tif doLog\r\n\t\tlevel = callStack.logLevel\r\n\t\tif ! logYieldFrom level, funcName\r\n\t\t\tstdLogYieldFrom level, funcName\r\n\r\n\tcallStack.yield funcName\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport dbgResume = (funcName) =>\r\n\r\n\tassert isFunctionName(funcName), \"not a valid function name\"\r\n\tcallStack.resume funcName\r\n\tdoLog = logAll || callStack.isLogging()\r\n\tif internalDebugging\r\n\t\tconsole.log \"dbgResume #{OL(funcName)}\"\r\n\t\tconsole.log \"   - doLog = #{OL(doLog)}\"\r\n\tif doLog\r\n\t\tlevel = callStack.logLevel\r\n\t\tif ! logResume funcName, level-1\r\n\t\t\tstdLogResume funcName, level-1\r\n\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport dbg = (lArgs...) =>\r\n\r\n\tif ! doDbg\r\n\t\treturn\r\n\tif lArgs.length == 1\r\n\t\treturn dbgString lArgs[0]\r\n\telse\r\n\t\treturn dbgValue lArgs[0], lArgs[1]\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport dbgValue = (label, val) =>\r\n\r\n\tassert isString(label), \"not a string\"\r\n\r\n\tdoLog = logAll || callStack.isLogging()\r\n\tif internalDebugging\r\n\t\tconsole.log \"dbgValue #{OL(label)}, #{OL(val)}\"\r\n\t\tconsole.log \"   - doLog = #{OL(doLog)}\"\r\n\tif doLog\r\n\t\tlevel = callStack.logLevel\r\n\t\tif ! logValue level, label, val\r\n\t\t\tstdLogValue level, label, val\r\n\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- str can be a multi-line string\r\n\r\nexport dbgString = (str) =>\r\n\r\n\tassert isString(str), \"not a string\"\r\n\tdoLog = logAll || callStack.isLogging()\r\n\tif internalDebugging\r\n\t\tconsole.log \"dbgString(#{OL(str)})\"\r\n\t\tconsole.log \"   - doLog = #{OL(doLog)}\"\r\n\tif doLog\r\n\t\tlevel = callStack.logLevel\r\n\t\tif ! logString level, str\r\n\t\t\tstdLogString level, str\r\n\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n# ---------------------------------------------------------------------------\r\n#    Only these 8 functions ever call LOG or LOGVALUE\r\n\r\nexport stdLogEnter = (level, funcName, lArgs) =>\r\n\r\n\tassert isFunctionName(funcName), \"bad function name\"\r\n\tassert isArray(lArgs), \"not an array\"\r\n\tassert isInteger(level), \"level not an integer\"\r\n\r\n\tlabelPre = getPrefix(level, 'plain')\r\n\tif (lArgs.length == 0)\r\n\t\tLOG \"enter #{funcName}\", labelPre\r\n\telse\r\n\t\tstr = \"enter #{funcName} #{OLS(lArgs)}\"\r\n\t\tif stringFits(\"#{labelPre}#{str}\")\r\n\t\t\tLOG str, labelPre\r\n\t\telse\r\n\t\t\tidPre = getPrefix(level+1, 'plain')\r\n\t\t\titemPre = getPrefix(level+2, 'noLastVbar')\r\n\t\t\tLOG \"enter #{funcName}\", labelPre\r\n\t\t\tfor arg,i in lArgs\r\n\t\t\t\tLOGVALUE \"arg[#{i}]\", arg, idPre, itemPre\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport stdLogReturn = (lArgs...) =>\r\n\r\n\t[level, funcName, val] = lArgs\r\n\tif (lArgs.length == 3)\r\n\t\treturn stdLogReturnVal level, funcName, val\r\n\tassert isFunctionName(funcName), \"bad function name\"\r\n\tassert isInteger(level), \"level not an integer\"\r\n\r\n\tlabelPre = getPrefix(level, 'withArrow')\r\n\tLOG \"return from #{funcName}\", labelPre\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nstdLogReturnVal = (level, funcName, val) =>\r\n\r\n\tassert isFunctionName(funcName), \"bad function name\"\r\n\tassert isInteger(level), \"level not an integer\"\r\n\r\n\tlabelPre = getPrefix(level, 'withArrow')\r\n\tstr = \"return #{OL(val)} from #{funcName}\"\r\n\tif stringFits(str)\r\n\t\tLOG str, labelPre\r\n\telse\r\n\t\tpre = getPrefix(level, 'noLastVbar')\r\n\t\tLOG \"return from #{funcName}\", labelPre\r\n\t\tLOGVALUE \"val\", val, pre, pre\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport stdLogYield = (lArgs...) =>\r\n\r\n\t[level, funcName, val] = lArgs\r\n\tif (lArgs.length == 2)\r\n\t\treturn stdLogYieldFrom level, funcName\r\n\tlabelPre = getPrefix(level, 'withYield')\r\n\tvalStr = OL(val)\r\n\tstr = \"yield #{valStr}\"\r\n\tif stringFits(str)\r\n\t\tLOG str, labelPre\r\n\telse\r\n\t\tpre = getPrefix(level, 'plain')\r\n\t\tLOG \"yield\", labelPre\r\n\t\tLOGVALUE undef, val, pre, pre\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport stdLogYieldFrom = (level, funcName) =>\r\n\r\n\tlabelPre = getPrefix(level, 'withFlat')\r\n\tLOG \"yieldFrom\", labelPre\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport stdLogResume = (funcName, level) =>\r\n\r\n\tassert isInteger(level), \"level not an integer\"\r\n\tlabelPre = getPrefix(level+1, 'withResume')\r\n\tLOG \"resume\", labelPre\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport stdLogString = (level, str) =>\r\n\r\n\tassert isString(str), \"not a string\"\r\n\tassert isInteger(level), \"level not an integer\"\r\n\r\n\tlabelPre = getPrefix(level, 'plain')\r\n\tfor part in blockToArray(str)\r\n\t\tLOG part, labelPre\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport stdLogValue = (level, label, val) =>\r\n\r\n\tassert isInteger(level), \"level not an integer\"\r\n\r\n\tlabelPre = getPrefix(level, 'plain')\r\n\tLOGVALUE label, val, labelPre\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getType = (label, lValues=[]) =>\r\n\t# --- returns [type, funcName]\r\n\t#     <type> is one of:\r\n\t#        'enter'      - funcName is set\r\n\t#        'returnFrom' - funcName is set\r\n\t#        'yield'      - funcName is set\r\n\t#        'resume'     - funcName is set\r\n\t#        'string'     - funcName is undef\r\n\t#        'value'      - funcName is undef\r\n\r\n\tif lMatches = label.match(///^\r\n\t\t\t( enter | yield | resume )\r\n\t\t\t\\s+\r\n\t\t\t(\r\n\t\t\t\t[A-Za-z_][A-Za-z0-9_]*\r\n\t\t\t\t(?:\r\n\t\t\t\t\t\\.\r\n\t\t\t\t\t[A-Za-z_][A-Za-z0-9_]*\r\n\t\t\t\t\t)?\r\n\t\t\t\t)\r\n\t\t\t(?: \\( \\) )?\r\n\t\t\t$///)\r\n\t\treturn [lMatches[1], lMatches[2]]\r\n\r\n\tif lMatches = label.match(///^\r\n\t\t\treturn\r\n\t\t\t\\s+\r\n\t\t\tfrom\r\n\t\t\t\\s+\r\n\t\t\t(\r\n\t\t\t\t[A-Za-z_][A-Za-z0-9_]*\r\n\t\t\t\t(?:\r\n\t\t\t\t\t\\.\r\n\t\t\t\t\t[A-Za-z_][A-Za-z0-9_]*\r\n\t\t\t\t\t)?\r\n\t\t\t\t)\r\n\t\t\t(?: \\( \\) )?\r\n\t\t\t$///)\r\n\t\treturn ['returnFrom', lMatches[1]]\r\n\r\n\t# --- if none of the above returned, then...\r\n\tif (lValues.length == 1)\r\n\t\treturn ['value', undef]\r\n\telse if (lValues.length == 0)\r\n\t\treturn ['string', undef]\r\n\telse\r\n\t\tthrow new Error(\"More than 1 object not allowed here\")\r\n\r\n# ........................................................................\r\n\r\nexport parseFunc = (str) =>\r\n\t# --- returns [fullName, modifier]\r\n\r\n\tif lMatches = str.match(///^\r\n\t\t\t(\r\n\t\t\t\t[A-Za-z_][A-Za-z0-9_]*\r\n\t\t\t\t(?:\r\n\t\t\t\t\t\\.\r\n\t\t\t\t\t[A-Za-z_][A-Za-z0-9_]*\r\n\t\t\t\t\t)?\r\n\t\t\t\t)\r\n\t\t\t(\\+)?\r\n\t\t\t$///)\r\n\t\t[_, fullName, modifier] = lMatches\r\n\t\treturn [fullName, modifier]\r\n\telse\r\n\t\treturn [undef, undef]\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nresetDebugging()\r\n"
  ]
}