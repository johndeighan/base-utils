{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\debug.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# debug.coffee\n\nimport {\n\tpass, undef, defined, notdefined, OL, OLS,\n\tisIdentifier, isFunctionName, isArrayOfStrings,\n\tisString, isFunction, isArray, isHash, isBoolean, isInteger,\n\tisEmpty, nonEmpty, arrayToBlock, getOptions,\n\twords, oneof, jsType, blockToArray,\n\t} from '@jdeighan/base-utils'\nimport {parsePath} from '@jdeighan/base-utils/ll-fs'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {getPrefix} from '@jdeighan/base-utils/prefix'\nimport {\n\tLOG, LOGVALUE, stringFits, debugLogging,\n\tclearMyLogs, getMyLogs, echoLogs,\n\t} from '@jdeighan/base-utils/log'\nimport {toNICE} from '@jdeighan/base-utils/to-nice'\nimport {CallStack} from '@jdeighan/base-utils/stack'\n\nexport {debugLogging}\n\nexport debugStack = new CallStack()\n\n# --- Comes from call to setDebugging()\nlFuncList = []      # array of {funcName, plus}\n\nexport debugAll = false      # if true, always log\nexport internalDebugging = false\n\n# --- Custom loggers, if defined\nlogEnter     = undef\nlogReturn    = undef\nlogYield     = undef\nlogResume    = undef\nlogString    = undef\nlogValue     = undef\n\nexport doDbg = true     # overall flag - if false, no debugging\n\n# ---------------------------------------------------------------------------\n\nexport disableDbg = () ->\n\n\tdoDbg = false\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport clearDebugLog = () =>\n\n\treturn clearMyLogs()\n\n# ---------------------------------------------------------------------------\n\nexport getDebugLog = () =>\n\n\treturn getMyLogs()\n\n# ---------------------------------------------------------------------------\n\nexport debugDebug = (debugFlag=true) =>\n\n\tinternalDebugging = debugFlag\n\tif debugFlag\n\t\tconsole.log \"turn on internal debugging in debug.coffee\"\n\telse\n\t\tconsole.log \"turn off internal debugging in debug.coffee\"\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport dumpDebugLoggers = (label=undef) =>\n\n\tlLines = []\n\tif nonEmpty(label)\n\t\tlLines.push \"LOGGERS (#{label})\"\n\telse\n\t\tlLines.push \"LOGGERS\"\n\tlLines.push \"   enter      - #{logType(logEnter, stdLogEnter)}\"\n\tlLines.push \"   return     - #{logType(logReturn, stdLogReturn)}\"\n\tlLines.push \"   yield      - #{logType(logYield, stdLogYield)}\"\n\tlLines.push \"   resume     - #{logType(logResume, stdLogResume)}\"\n\tlLines.push \"   string     - #{logType(logString, stdLogString)}\"\n\tlLines.push \"   value      - #{logType(logValue, stdLogValue)}\"\n\tconsole.log arrayToBlock(lLines)\n\n# ---------------------------------------------------------------------------\n\nlogType = (cur, std) =>\n\n\tif (cur == std)\n\t\treturn 'std'\n\telse if defined(cur)\n\t\treturn 'custom'\n\telse\n\t\treturn 'undef'\n\n# ---------------------------------------------------------------------------\n\nexport resetDebugging = () =>\n\n\t# --- reset everything\n\tdebugStack.reset()\n\tlFuncList = []\n\tdebugAll = false\n\tlogEnter  = stdLogEnter\n\tlogReturn = stdLogReturn\n\tlogYield  = stdLogYield\n\tlogResume = stdLogResume\n\tlogString = stdLogString\n\tlogValue  = stdLogValue\n\tclearMyLogs()\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport setDebugging = (debugWhat=undef, hOptions={}) =>\n\t# --- debugWhat can be:\n\t#        1. a boolean (false=disable, true=debug all)\n\t#        2. a string\n\t#        3. an array of strings\n\t# --- Valid options:\n\t#        'noecho' - don't echo logs to console\n\t#        'enter', 'returnFrom',\n\t#           'yield', 'resume',\n\t#           'string', 'value'\n\t#         - to set custom loggers\n\n\tif internalDebugging\n\t\tconsole.log \"setDebugging #{OL(debugWhat)}, #{OL(hOptions)}\"\n\n\tassert defined(debugWhat), \"arg 1 must be defined\"\n\tresetDebugging()\n\n\tcustomSet = false     # were any custom loggers set?\n\n\t# --- First, process any options\n\thOptions = getOptions(hOptions)\n\tif hOptions.noecho\n\t\techoLogs false\n\t\tif internalDebugging\n\t\t\tconsole.log \"TURN OFF ECHO\"\n\telse\n\t\techoLogs true\n\t\tif internalDebugging\n\t\t\tconsole.log \"TURN ON ECHO\"\n\tfor key in words('enter returnFrom yield resume string value')\n\t\tif defined(hOptions[key])\n\t\t\tsetCustomDebugLogger key, hOptions[key]\n\t\t\tcustomSet = true\n\n\t# --- process debugWhat if defined\n\t[type, subtype] = jsType(debugWhat)\n\tswitch type\n\t\twhen undef\n\t\t\tpass()\n\t\twhen 'boolean'\n\t\t\tif internalDebugging\n\t\t\t\tconsole.log \"set debugAll to #{OL(debugWhat)}\"\n\t\t\tdebugAll = debugWhat\n\t\twhen 'string', 'array'\n\t\t\tif internalDebugging\n\t\t\t\tconsole.log \"debugWhat is #{OL(debugWhat)}\"\n\t\t\tlFuncList = getFuncList(debugWhat)\n\t\telse\n\t\t\tcroak \"Bad arg 1: #{OL(debugWhat)}\"\n\n\tif internalDebugging\n\t\tdumpFuncList()\n\t\tif customSet\n\t\t\tdumpDebugLoggers()\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport dumpFuncList = () =>\n\n\tconsole.log 'lFuncList: --------------------------------'\n\tconsole.log toNICE(lFuncList)\n\tconsole.log '-------------------------------------------'\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport setCustomDebugLogger = (type, func) =>\n\n\tassert isFunction(func), \"Not a function\"\n\tif internalDebugging\n\t\tconsole.log \"set custom logger #{OL(type)}\"\n\tswitch type\n\t\twhen 'enter'\n\t\t\tlogEnter = func\n\t\twhen 'returnFrom'\n\t\t\tlogReturn = func\n\t\twhen 'yield'\n\t\t\tlogYield = func\n\t\twhen 'resume'\n\t\t\tlogResume = func\n\t\twhen 'string'\n\t\t\tlogString = func\n\t\twhen 'value'\n\t\t\tlogValue = func\n\t\telse\n\t\t\tthrow new Error(\"Unknown type: #{OL(type)}\")\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport getFuncList = (funcs) =>\n\t# --- funcs can be a string or an array of strings\n\n\tlFuncs = []    # return value\n\n\t# --- Allow passing in an array of strings\n\tif isArray(funcs)\n\t\tassert isArrayOfStrings(funcs), \"not an array of strings\"\n\t\tfor str in funcs\n\t\t\tlItems = getFuncList(str)   # recursive call\n\t\t\tlFuncs.push lItems...\n\t\treturn lFuncs\n\n\tassert isString(funcs), \"not a string\"\n\tfor word in words(funcs)\n\t\tif (word == 'debug')\n\t\t\tinternalDebugging = true\n\t\t[fullName, modifier] = parseFunc(word)\n\t\tassert defined(fullName), \"Bad debug object: #{OL(word)}\"\n\t\tlFuncs.push {\n\t\t\tfullName\n\t\t\tplus: (modifier == '+')\n\t\t\t}\n\treturn lFuncs\n\n# ---------------------------------------------------------------------------\n# Stack is only modified in these 8 functions (it is reset in setDebugging())\n# ---------------------------------------------------------------------------\n\nexport dbgEnter = (funcName, lValues...) =>\n\n\tdoLog = doDebugFunc(funcName)\n\tif internalDebugging\n\t\tif (lValues.length == 0)\n\t\t\tconsole.log \"dbgEnter #{OL(funcName)}\"\n\t\telse\n\t\t\tconsole.log \"dbgEnter #{OL(funcName)}, #{OLS(lValues)}\"\n\t\tconsole.log \"   - doLog = #{OL(doLog)}\"\n\n\tif doLog\n\t\tlevel = debugStack.logLevel\n\t\tif ! logEnter level, funcName, lValues\n\t\t\tstdLogEnter level, funcName, lValues\n\n\tdebugStack.enter funcName, lValues, doLog\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport doDebugFunc = (funcName) =>\n\n\treturn debugAll || funcMatch(funcName)\n\n# ---------------------------------------------------------------------------\n\nexport funcMatch = (funcName) =>\n\t# --- funcName came from a call to dbgEnter()\n\t#     it might be of form <object>.<method>\n\t# --- We KNOW that funcName is active!\n\n\tif internalDebugging\n\t\tconsole.log \"CHECK funcMatch(#{OL(funcName)})\"\n\t\tconsole.log lFuncList\n\t\tdebugStack.dump 1\n\n\tlParts = isFunctionName(funcName)\n\tassert defined(lParts), \"not a valid function name: #{OL(funcName)}\"\n\n\tfor h in lFuncList\n\t\tif (h.fullName == funcName)\n\t\t\tif internalDebugging\n\t\t\t\tconsole.log \"   - TRUE - #{OL(funcName)} is in lFuncList\"\n\t\t\treturn true\n\t\tif h.plus && debugStack.isActive(h.fullName)\n\t\t\tif internalDebugging\n\t\t\t\tconsole.log \"   - TRUE - #{OL(h.fullName)} is active\"\n\t\t\treturn true\n\n\tif (lParts.length == 2)   # came from dbgEnter()\n\t\tmethodName = lParts[1]\n\t\tfor h in lFuncList\n\t\t\tif (h.fullName == methodName)\n\t\t\t\tif internalDebugging\n\t\t\t\t\tconsole.log \"   - TRUE - #{OL(methodName)} is in lFuncList\"\n\t\t\t\treturn true\n\tif internalDebugging\n\t\tconsole.log \"   - FALSE\"\n\treturn false\n\n# ---------------------------------------------------------------------------\n\nexport dbgReturn = (lArgs...) =>\n\n\tif (lArgs.length > 1)\n\t\treturn dbgReturnVal lArgs...\n\tfuncName = lArgs[0]\n\tassert isFunctionName(funcName), \"not a valid function name\"\n\tdoLog = debugAll || debugStack.isLogging()\n\tif internalDebugging\n\t\tconsole.log \"dbgReturn #{OL(funcName)}\"\n\t\tconsole.log \"   - doLog = #{OL(doLog)}\"\n\tif doLog\n\t\tlevel = debugStack.logLevel\n\t\tif ! logReturn level, funcName\n\t\t\tstdLogReturn level, funcName\n\n\tdebugStack.returnFrom funcName\n\treturn true\n\n# ---------------------------------------------------------------------------\n\ndbgReturnVal = (funcName, val) =>\n\n\tassert isFunctionName(funcName), \"not a valid function name\"\n\tdoLog = debugAll || debugStack.isLogging()\n\tif internalDebugging\n\t\tconsole.log \"dbgReturn #{OL(funcName)}, #{OL(val)}\"\n\t\tconsole.log \"   - doLog = #{OL(doLog)}\"\n\tif doLog\n\t\tlevel = debugStack.logLevel\n\t\tif ! logReturn level, funcName, val\n\t\t\tstdLogReturn level, funcName, val\n\n\tdebugStack.returnFrom funcName, val\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport dbgYield = (lArgs...) =>\n\n\tnArgs = lArgs.length\n\tassert (nArgs==1) || (nArgs==2), \"Bad num args: #{nArgs}\"\n\t[funcName, val] = lArgs\n\tif (nArgs==1)\n\t\treturn dbgYieldFrom(funcName)\n\n\tassert isFunctionName(funcName), \"not a function name: #{OL(funcName)}\"\n\tdoLog = debugAll || debugStack.isLogging()\n\tif internalDebugging\n\t\tconsole.log \"dbgYield #{OL(funcName)} #{OL(val)}\"\n\t\tconsole.log \"   - doLog = #{OL(doLog)}\"\n\tif doLog\n\t\tlevel = debugStack.logLevel\n\t\tif ! logYield level, funcName, val\n\t\t\tstdLogYield level, funcName, val\n\n\tdebugStack.yield funcName, val\n\treturn true\n\n# ---------------------------------------------------------------------------\n\ndbgYieldFrom = (funcName) =>\n\n\tassert isFunctionName(funcName), \"not a function name: #{OL(funcName)}\"\n\tdoLog = debugAll || debugStack.isLogging()\n\tif internalDebugging\n\t\tconsole.log \"dbgYieldFrom #{OL(funcName)}\"\n\t\tconsole.log \"   - doLog = #{OL(doLog)}\"\n\tif doLog\n\t\tlevel = debugStack.logLevel\n\t\tif ! logYieldFrom level, funcName\n\t\t\tstdLogYieldFrom level, funcName\n\n\tdebugStack.yield funcName\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport dbgResume = (funcName) =>\n\n\tassert isFunctionName(funcName), \"not a valid function name\"\n\tdebugStack.resume funcName\n\tdoLog = debugAll || debugStack.isLogging()\n\tif internalDebugging\n\t\tconsole.log \"dbgResume #{OL(funcName)}\"\n\t\tconsole.log \"   - doLog = #{OL(doLog)}\"\n\tif doLog\n\t\tlevel = debugStack.logLevel\n\t\tif ! logResume funcName, level-1\n\t\t\tstdLogResume funcName, level-1\n\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport dbgCall = (func) =>\n\n\tassert isFunction(func), \"not a function\"\n\tdoLog = debugAll || debugStack.isLogging()\n\tif doLog\n\t\treturn func()\n\telse\n\t\treturn\n\n# ---------------------------------------------------------------------------\n\nexport dbg = (lArgs...) =>\n\n\tif ! doDbg\n\t\treturn\n\tif lArgs.length == 1\n\t\treturn dbgString lArgs[0]\n\telse\n\t\treturn dbgValue lArgs[0], lArgs[1]\n\n# ---------------------------------------------------------------------------\n# --- str can be a multi-line string\n\nexport dbgString = (str) =>\n\n\tassert isString(str), \"not a string\"\n\tdoLog = debugAll || debugStack.isLogging()\n\tif internalDebugging\n\t\tconsole.log \"dbgString(#{OL(str)})\"\n\t\tconsole.log \"   - doLog = #{OL(doLog)}\"\n\tif doLog\n\t\tlevel = debugStack.logLevel\n\t\tif ! logString level, str\n\t\t\tconsole.log \"   - using stdLogString\"\n\t\t\tstdLogString level, str\n\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport dbgValue = (label, val) =>\n\n\tassert isString(label), \"not a string\"\n\tdoLog = debugAll || debugStack.isLogging()\n\tif internalDebugging\n\t\tconsole.log \"dbgValue #{OL(label)}, #{OL(val)}\"\n\t\tconsole.log \"   - doLog = #{OL(doLog)}\"\n\tif doLog\n\t\tlevel = debugStack.logLevel\n\t\tif ! logValue level, label, val\n\t\t\tstdLogValue level, label, val\n\n\treturn true\n\n# ---------------------------------------------------------------------------\n# ---------------------------------------------------------------------------\n#    Only these 8 functions ever call LOG or LOGVALUE\n\nexport stdLogEnter = (level, funcName, lArgs) =>\n\n\tassert isFunctionName(funcName), \"bad function name\"\n\tassert isArray(lArgs), \"not an array\"\n\tassert isInteger(level), \"level not an integer\"\n\n\tlabelPre = getPrefix(level, 'plain')\n\tif (lArgs.length == 0)\n\t\tLOG labelPre + \"enter #{funcName}\"\n\telse\n\t\tstr = \"enter #{funcName} #{OLS(lArgs)}\"\n\t\tif stringFits(\"#{labelPre}#{str}\")\n\t\t\tLOG labelPre + str\n\t\telse\n\t\t\tidPre = getPrefix(level+1, 'plain')\n\t\t\titemPre = getPrefix(level+2, 'noLastVbar')\n\t\t\tLOG labelPre + \"enter #{funcName}\"\n\t\t\tfor arg,i in lArgs\n\t\t\t\tLOGVALUE \"arg[#{i}]\", arg, {\n\t\t\t\t\t\tprefix: idPre\n\t\t\t\t\t\titemPrefix: itemPre\n\t\t\t\t\t\t}\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport stdLogReturn = (lArgs...) =>\n\n\t[level, funcName, val] = lArgs\n\tif (lArgs.length == 3)\n\t\treturn stdLogReturnVal level, funcName, val\n\tassert isFunctionName(funcName), \"bad function name\"\n\tassert isInteger(level), \"level not an integer\"\n\n\tlabelPre = getPrefix(level, 'withArrow')\n\tLOG labelPre + \"return from #{funcName}\"\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nstdLogReturnVal = (level, funcName, val) =>\n\n\tassert isFunctionName(funcName), \"bad function name\"\n\tassert isInteger(level), \"level not an integer\"\n\n\tlabelPre = getPrefix(level, 'withArrow')\n\tstr = \"return #{OL(val)} from #{funcName}\"\n\tif stringFits(str)\n\t\tLOG labelPre + str\n\telse\n\t\tpre = getPrefix(level, 'noLastVbar')\n\t\tLOG labelPre + \"return from #{funcName}\"\n\t\tLOGVALUE \"val\", val, {prefix: pre, itemPrefix: pre}\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport stdLogYield = (lArgs...) =>\n\n\t[level, funcName, val] = lArgs\n\tif (lArgs.length == 2)\n\t\treturn stdLogYieldFrom level, funcName\n\tlabelPre = getPrefix(level, 'withYield')\n\tvalStr = OL(val)\n\tstr = \"yield #{valStr}\"\n\tif stringFits(str)\n\t\tLOG labelPre + str\n\telse\n\t\tpre = getPrefix(level, 'plain')\n\t\tLOGVALUE undef, val, {prefix: pre, itemPrefix: pre}\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport stdLogYieldFrom = (level, funcName) =>\n\n\tlabelPre = getPrefix(level, 'withFlat')\n\tLOG labelPre + \"yieldFrom\"\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport stdLogResume = (funcName, level) =>\n\n\tassert isInteger(level), \"level not an integer\"\n\tlabelPre = getPrefix(level+1, 'withResume')\n\tLOG labelPre + \"resume\"\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport stdLogString = (level, str) =>\n\n\tassert isString(str), \"not a string\"\n\tassert isInteger(level), \"level not an integer\"\n\n\tlabelPre = getPrefix(level, 'plain')\n\tfor part in blockToArray(str)\n\t\tLOG labelPre + part\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport stdLogValue = (level, label, val) =>\n\n\tassert isInteger(level), \"level not an integer\"\n\n\tlabelPre = getPrefix(level, 'plain')\n\tLOGVALUE label, val, {prefix: labelPre}\n\treturn true\n\n# ---------------------------------------------------------------------------\n# ---------------------------------------------------------------------------\n\nexport getType = (label, lValues=[]) =>\n\t# --- returns [type, funcName]\n\t#     <type> is one of:\n\t#        'enter'      - funcName is set\n\t#        'returnFrom' - funcName is set\n\t#        'yield'      - funcName is set\n\t#        'resume'     - funcName is set\n\t#        'string'     - funcName is undef\n\t#        'value'      - funcName is undef\n\n\tif lMatches = label.match(///^\n\t\t\t( enter | yield | resume )\n\t\t\t\\s+\n\t\t\t(\n\t\t\t\t[A-Za-z_][A-Za-z0-9_]*\n\t\t\t\t(?:\n\t\t\t\t\t\\.\n\t\t\t\t\t[A-Za-z_][A-Za-z0-9_]*\n\t\t\t\t\t)?\n\t\t\t\t)\n\t\t\t(?: \\( \\) )?\n\t\t\t$///)\n\t\treturn [lMatches[1], lMatches[2]]\n\n\tif lMatches = label.match(///^\n\t\t\treturn\n\t\t\t\\s+\n\t\t\tfrom\n\t\t\t\\s+\n\t\t\t(\n\t\t\t\t[A-Za-z_][A-Za-z0-9_]*\n\t\t\t\t(?:\n\t\t\t\t\t\\.\n\t\t\t\t\t[A-Za-z_][A-Za-z0-9_]*\n\t\t\t\t\t)?\n\t\t\t\t)\n\t\t\t(?: \\( \\) )?\n\t\t\t$///)\n\t\treturn ['returnFrom', lMatches[1]]\n\n\t# --- if none of the above returned, then...\n\tif (lValues.length == 1)\n\t\treturn ['value', undef]\n\telse if (lValues.length == 0)\n\t\treturn ['string', undef]\n\telse\n\t\tthrow new Error(\"More than 1 object not allowed here\")\n\n# ........................................................................\n\nexport parseFunc = (str) =>\n\t# --- returns [fullName, modifier]\n\n\tif lMatches = str.match(///^\n\t\t\t(\n\t\t\t\t[A-Za-z_][A-Za-z0-9_]*\n\t\t\t\t(?:\n\t\t\t\t\t\\.\n\t\t\t\t\t[A-Za-z_][A-Za-z0-9_]*\n\t\t\t\t\t)?\n\t\t\t\t)\n\t\t\t(\\+)?\n\t\t\t$///)\n\t\t[_, fullName, modifier] = lMatches\n\t\treturn [fullName, modifier]\n\telse\n\t\treturn [undef, undef]\n\n# ---------------------------------------------------------------------------\n\nresetDebugging()"
  ]
}