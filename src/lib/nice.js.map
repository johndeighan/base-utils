{
  "version": 3,
  "file": "nice.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\nice.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# nice.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, escapeStr, getOptions,\r\n\tjsType, toBlock,\r\n\t} from '@jdeighan/base-utils'\r\nimport {indented} from '@jdeighan/base-utils/indent'\r\nimport {dbgEnter, dbgReturn, dbg} from '@jdeighan/base-utils/debug'\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- There are 3 types of quotes:\r\n#        \" - double quotes\r\n#        ' - single quotes (i.e. apostrophe)\r\n#        « (ALT+0171) » (ALT+0187)\r\n\r\nexport formatString = (str) =>\r\n\r\n\thEsc = {\r\n\t\t\" \": '˳'\r\n\t\t\"\\t\": '→'\r\n\t\t\"\\n\": '®'\r\n\t\t}\r\n\tif str.includes(\"'\")\r\n\t\tif str.includes('\"')\r\n\t\t\thEsc[\"«\"] = \"\\\\«\"\r\n\t\t\thEsc[\"»\"] = \"\\\\»\"\r\n\t\t\treturn \"«\" + escapeStr(str, hEsc) + \"»\"\r\n\t\telse\r\n\t\t\treturn '\"' + escapeStr(str, hEsc) + '\"'\r\n\telse\r\n\t\treturn \"'\" + escapeStr(str, hEsc) + \"'\"\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport shouldSplit = (type) =>\r\n\r\n\treturn ['hash','array','class','object'].includes(type)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport toNICE = (obj, hOptions={}) =>\r\n\r\n\tdbgEnter 'toNICE', obj, hOptions\r\n\t{untabify} = getOptions hOptions, {\r\n\t\tuntabify: false\r\n\t\t}\r\n\r\n\t[type, subtype] = jsType(obj)\r\n\tswitch type\r\n\t\twhen undef\r\n\t\t\tif (subtype == 'null')\r\n\t\t\t\tresult = 'null'\r\n\t\t\telse\r\n\t\t\t\tresult = 'undef'\r\n\t\twhen 'number', 'bigint'\r\n\t\t\tif (subtype == 'NaN')\r\n\t\t\t\tresult = 'NaN'\r\n\t\t\telse\r\n\t\t\t\tresult = obj.toString()\r\n\t\twhen 'string'\r\n\t\t\tresult = formatString(obj)\r\n\t\twhen 'boolean'\r\n\t\t\tif obj\r\n\t\t\t\tresult = 'true'\r\n\t\t\telse\r\n\t\t\t\tresult = 'false'\r\n\t\twhen 'function'\r\n\t\t\tif defined(subtype)\r\n\t\t\t\tresult = \"[Function #{subtype}]\"\r\n\t\t\telse\r\n\t\t\t\tresult = \"[Function]\"\r\n\t\twhen 'array'\r\n\t\t\tlLines = []\r\n\t\t\tfor item in obj\r\n\t\t\t\tblock = toNICE(item)\r\n\t\t\t\tif shouldSplit(jsType(item)[0])\r\n\t\t\t\t\tlLines.push '-'\r\n\t\t\t\t\tlLines.push indented(block)\r\n\t\t\t\telse\r\n\t\t\t\t\tlLines.push \"- #{block}\"\r\n\t\t\tresult = toBlock(lLines)\r\n\t\twhen 'hash'\r\n\t\t\tlLines = []\r\n\t\t\tfor key,val of obj\r\n\t\t\t\tblock = toNICE(val)\r\n\t\t\t\tif shouldSplit(jsType(val)[0])\r\n\t\t\t\t\tlLines.push \"#{key}:\"\r\n\t\t\t\t\tlLines.push indented(block)\r\n\t\t\t\telse\r\n\t\t\t\t\tlLines.push \"#{key}: #{block}\"\r\n\t\t\tresult = toBlock(lLines)\r\n\t\twhen 'object'\r\n\t\t\tresult = \"[Object]\"\r\n\r\n\tdbgReturn 'toNICE', result\r\n\treturn result\r\n"
  ]
}