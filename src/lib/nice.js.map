{
  "version": 3,
  "file": "nice.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\nice.coffee"
  ],
  "names": [],
  "mappings": "AAAa;AAEb,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,SAD7B;EACwC,UADxC;EAEC,MAFD;EAES,OAFT;EAEkB,QAFlB;EAE4B,SAF5B;EAEuC,EAFvC;EAGC,OAHD;EAGU,SAHV;EAGqB,UAHrB;CAAA,MAAA;;AAKA,OAAA;EAAQ,MAAR;EAAgB,KAAhB;CAAA,MAAA;;AACA,OAAA;EAAQ,QAAR;CAAA,MAAA;;AACA,OAAA;EACC,QADD;EACW,SADX;EACsB,GADtB;CAAA,MAAA;;AAGA,OAAA;EAAQ,KAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,MAAR;CAAA,MAAA,6BAba;;;AAiBb,OAAA,IAAO,WAAA,GAAc,CAAC,GAAD,CAAA,GAAA;EAEpB,QAAA,CAAS,aAAT,EAAwB,GAAxB,EAAD;;EAGC,IAAG,GAAG,CAAC,KAAJ,CAAU,OAAV,CAAH;IACC,GAAA,CAAI,uBAAJ;IACA,SAAA,CAAU,aAAV,EAAyB,IAAzB;AACA,WAAO,KAHR;GAHD;;EASC,IAAG,GAAG,CAAC,KAAJ,CAAU,aAAV,CAAH;IACC,GAAA,CAAI,qBAAJ;IACA,SAAA,CAAU,aAAV,EAAyB,IAAzB;AACA,WAAO,KAHR;GATD;;EAeC,IAAG,GAAG,CAAC,KAAJ,CAAU,mBAAV,CAAH;IACC,GAAA,CAAI,qBAAJ;IACA,SAAA,CAAU,aAAV,EAAyB,IAAzB;AACA,WAAO,KAHR;;EAKA,SAAA,CAAU,aAAV,EAAyB,KAAzB;AACA,SAAO;AAvBa,EAjBR;;;;;AA8Cb,OAAA,IAAO,YAAA,GAAe,CAAC,GAAD,CAAA,GAAA;AAEtB,MAAA;EAAC,IAAA,GAAO,SAAA,CAAU,GAAV,EAAe;IACrB,GAAA,EAAK,GADgB;IAErB,IAAA,EAAM,KAFe;IAGrB,IAAA,EAAM,GAHe;IAIrB,IAAA,EAAM,GAJe;IAKrB,GAAA,EAAK,KALgB;IAMrB,GAAA,EAAK;EANgB,CAAf;EAQP,IAAG,WAAA,CAAY,GAAZ,CAAH;AACC,WAAO,GAAA,GAAM,IAAN,GAAa,IADrB;GAAA,MAAA;AAGC,WAAO,KAHR;;AAVqB,EA9CT;;;AA+Db,OAAA,IAAO,WAAA,GAAc,CAAC,IAAD,CAAA,GAAA;AAEpB,SAAO,CAAC,MAAD,EAAQ,OAAR,EAAgB,OAAhB,EAAwB,QAAxB,CAAiC,CAAC,QAAlC,CAA2C,IAA3C;AAFa,EA/DR;;;AAqEb,OAAA,IAAO,WAAA,GAAc,CAAC,CAAD,EAAI,CAAJ,CAAA,GAAA;EAEpB,IAAI,CAAA,GAAI,CAAR;AACC,WAAO,CAAC,EADT;GAAA,MAEK,IAAI,CAAA,GAAI,CAAR;AACJ,WAAO,EADH;GAAA,MAAA;AAGJ,WAAO,EAHH;;AAJe,EArER;;;AAgFb,OAAA,IAAO,MAAA,GAAS,CAAC,GAAD,EAAM,WAAS,CAAA,CAAf,CAAA,GAAA;AAEhB,MAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA,MAAA,EAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,MAAA,EAAA,QAAA,EAAA,OAAA,EAAA,IAAA,EAAA;EAAC,QAAA,CAAS,QAAT,EAAmB,GAAnB,EAAwB,QAAxB;EACA,CAAA,CAAC,QAAD,EAAW,MAAX,EAAmB,SAAnB,CAAA,GAAgC,UAAA,CAAW,QAAX,EAAqB;IACpD,QAAA,EAAU,KAD0C;IAEpD,MAAA,EAAQ,CAF4C;IAGpD,SAAA,EAAW;EAHyC,CAArB,CAAhC;EAMA,IAAG,OAAA,CAAQ,QAAR,CAAH;;IAEC,GAAA,CAAI,4CAAJ;IAEA,CAAA,GAAI,CAAA;IACJ,KAAA,kDAAA;;MACC,CAAC,CAAC,GAAD,CAAD,GAAS,CAAA,GAAE;IADZ;IAGA,QAAA,GAAW,QAAA,CAAC,IAAD,EAAO,IAAP,CAAA;AACb,UAAA,IAAA,EAAA;MAAG,IAAA,GAAO,CAAC,CAAC,IAAD;MACR,IAAA,GAAO,CAAC,CAAC,IAAD;MAER,IAAG,OAAA,CAAQ,IAAR,CAAH;QACC,IAAG,OAAA,CAAQ,IAAR,CAAH;;AAEC,iBAAO,WAAA,CAAY,IAAZ,EAAkB,IAAlB,EAFR;SAAA,MAAA;AAIC,iBAAO,CAAC,EAJT;SADD;OAAA,MAAA;QAOC,IAAG,OAAA,CAAQ,IAAR,CAAH;AACC,iBAAO,EADR;SAAA,MAAA;;AAIC,iBAAO,WAAA,CAAY,IAAZ,EAAkB,IAAlB,EAJR;SAPD;;IAJU,EARZ;GAAA,MAAA;IAyBC,MAAA,CAAO,SAAA,CAAU,QAAV,CAAA,IAAuB,UAAA,CAAW,QAAX,CAA9B,EACE,CAAA,WAAA,CAAA,CAAc,EAAA,CAAG,QAAH,CAAd,CAAA,CADF,EAzBD;;EA4BA,CAAC,IAAD,EAAO,OAAP,CAAA,GAAkB,MAAA,CAAO,GAAP;EAClB,GAAA,CAAI,CAAA,OAAA,CAAA,CAAU,EAAA,CAAG,IAAH,CAAV,CAAA,YAAA,CAAA,CAAiC,EAAA,CAAG,OAAH,CAAjC,CAAA,CAAJ;AACA,UAAO,IAAP;AAAA,SACM,UADN;MAEE,IAAG,OAAA,CAAQ,OAAR,CAAH;QACC,MAAA,GAAS,CAAA,UAAA,CAAA,CAAa,OAAb,CAAA,CAAA,EADV;OAAA,MAAA;QAGC,MAAA,GAAS,aAHV;;AADI;AADN,SAMM,KANN;MAOE,IAAI,OAAA,KAAW,MAAf;QACC,MAAA,GAAS,SADV;OAAA,MAAA;QAGC,MAAA,GAAS,UAHV;;AADI;AANN,SAWM,QAXN;AAAA,SAWgB,QAXhB;MAYE,IAAI,OAAA,KAAW,KAAf;QACC,MAAA,GAAS,QADV;OAAA,MAAA;QAGC,MAAA,GAAS,GAAG,CAAC,QAAJ,CAAA,EAHV;;AADc;AAXhB,SAgBM,QAhBN;MAiBE,MAAA,GAAS,YAAA,CAAa,GAAb;AADL;AAhBN,SAkBM,SAlBN;MAmBE,IAAG,GAAH;QACC,MAAA,GAAS,SADV;OAAA,MAAA;QAGC,MAAA,GAAS,UAHV;;AADI;AAlBN,SAuBM,OAvBN;MAwBE,MAAA,GAAS;MACT,KAAA,uCAAA;;QACC,KAAA,GAAQ,MAAA,CAAO,IAAP;QACR,IAAG,WAAA,CAAY,MAAA,CAAO,IAAP,CAAY,CAAC,CAAD,CAAxB,CAAH;UACC,MAAM,CAAC,IAAP,CAAY,GAAZ;UACA,MAAM,CAAC,IAAP,CAAY,QAAA,CAAS,KAAT,EAAgB,CAAhB,EAAmB,SAAnB,CAAZ,EAFD;SAAA,MAAA;UAIC,MAAM,CAAC,IAAP,CAAY,CAAA,EAAA,CAAA,CAAK,KAAL,CAAA,CAAZ,EAJD;;MAFD;MAOA,MAAA,GAAS,OAAA,CAAQ,MAAR;AATL;AAvBN,SAiCM,MAjCN;MAkCE,MAAA,GAAS;MACT,KAAA,GAAQ,MAAM,CAAC,IAAP,CAAY,GAAZ;MACR,IAAI,QAAA,KAAY,IAAhB;QACC,KAAK,CAAC,IAAN,CAAA,EADD;OAAA,MAEK,IAAG,UAAA,CAAW,QAAX,CAAH;QACJ,KAAK,CAAC,IAAN,CAAW,QAAX,EADI;;MAEL,GAAA,CAAI,CAAA,QAAA,CAAA,CAAW,EAAA,CAAG,KAAH,CAAX,CAAA,CAAJ;MACA,KAAA,yCAAA;;QACC,GAAA,GAAM,GAAG,CAAC,GAAD;QACT,KAAA,GAAQ,MAAA,CAAO,GAAP;QACR,IAAG,WAAA,CAAY,MAAA,CAAO,GAAP,CAAW,CAAC,CAAD,CAAvB,CAAH;UACC,MAAM,CAAC,IAAP,CAAY,CAAA,CAAA,CAAG,GAAH,CAAA,CAAA,CAAZ;UACA,MAAM,CAAC,IAAP,CAAY,QAAA,CAAS,KAAT,EAAgB,CAAhB,EAAmB,SAAnB,CAAZ,EAFD;SAAA,MAAA;UAIC,MAAM,CAAC,IAAP,CAAY,CAAA,CAAA,CAAG,GAAH,CAAA,EAAA,CAAA,CAAW,KAAX,CAAA,CAAZ,EAJD;;MAHD;MAQA,MAAA,GAAS,OAAA,CAAQ,MAAR;AAhBL;AAjCN,SAkDM,QAlDN;MAmDE,IAAG,OAAA,CAAQ,OAAR,CAAH;QACC,MAAA,GAAS,CAAA,QAAA,CAAA,CAAW,OAAX,CAAA,CAAA,EADV;OAAA,MAAA;QAGC,MAAA,GAAS,WAHV;;AAnDF;EAwDA,IAAI,MAAA,KAAU,CAAd;IACC,MAAA,CAAO,SAAA,CAAU,MAAV,EAAkB;MAAC,GAAA,EAAK;IAAN,CAAlB,CAAP,EACC,CAAA,mBAAA,CAAA,CAAsB,EAAA,CAAG,MAAH,CAAtB,CAAA,CADD;IAEA,MAAA,GAAS,QAAA,CAAS,MAAT,EAAiB,MAAjB,EAAyB,SAAzB,EAHV;;EAIA,SAAA,CAAU,QAAV,EAAoB,MAApB;AACA,SAAO;AApGQ,EAhFH;;;AAwLb,OAAA,IAAO,QAAA,GAAW,CAAC,KAAD,CAAA,GAAA;AAElB,MAAA;EAAC,QAAA,CAAS,UAAT,EAAqB,KAArB;EACA,MAAA,GAAS,MAAA,CAAO,KAAP,EAAc,KAAd;EACT,SAAA,CAAU,UAAV,EAAsB,MAAtB;AACA,SAAO;AALU",
  "sourcesContent": [
    "# nice.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, escapeStr, getOptions,\r\n\tjsType, toBlock, untabify, isInteger, OL,\r\n\tisArray, isBoolean, isFunction,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {indented} from '@jdeighan/base-utils/indent'\r\nimport {\r\n\tdbgEnter, dbgReturn, dbg,\r\n\t} from '@jdeighan/base-utils/debug'\r\nimport {parse} from '@jdeighan/base-utils/object'\r\nimport {pparse} from '@jdeighan/base-utils/peggy'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport needsQuotes = (str) =>\r\n\r\n\tdbgEnter 'needsQuotes', str\r\n\r\n\t# --- if it looks like an array item, it needs quotes\r\n\tif str.match(/^\\s*-/)\r\n\t\tdbg \"looks like array item\"\r\n\t\tdbgReturn 'needsQuotes', true\r\n\t\treturn true\r\n\r\n\t# --- if it looks like a hash key, it needs quotes\r\n\tif str.match(/^\\s*\\S+\\s*:/)\r\n\t\tdbg \"looks like hash key\"\r\n\t\tdbgReturn 'needsQuotes', true\r\n\t\treturn true\r\n\r\n\t# --- if it looks like a number, it needs quotes\r\n\tif str.match(/^\\s*\\d+(?:\\.\\d*)?/)\r\n\t\tdbg \"looks like a number\"\r\n\t\tdbgReturn 'needsQuotes', true\r\n\t\treturn true\r\n\r\n\tdbgReturn 'needsQuotes', false\r\n\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- There is only one type of quote:\r\n#        « (ALT+0171) » (ALT+0187)\r\n\r\nexport formatString = (str) =>\r\n\r\n\tfstr = escapeStr(str, {\r\n\t\t' ': '˳'\r\n\t\t\"\\t\": '→  '\r\n\t\t\"\\r\": '◄'\r\n\t\t\"\\n\": '▼'\r\n\t\t'«': \"\\\\«\"\r\n\t\t'»': \"\\\\»\"\r\n\t\t})\r\n\tif needsQuotes(str)\r\n\t\treturn \"«\" + fstr + \"»\"\r\n\telse\r\n\t\treturn fstr\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport shouldSplit = (type) =>\r\n\r\n\treturn ['hash','array','class','object'].includes(type)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport baseCompare = (a, b) =>\r\n\r\n\tif (a < b)\r\n\t\treturn -1\r\n\telse if (a > b)\r\n\t\treturn 1\r\n\telse\r\n\t\treturn 0\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport toNICE = (obj, hOptions={}) =>\r\n\r\n\tdbgEnter 'toNICE', obj, hOptions\r\n\t{sortKeys, indent, oneIndent} = getOptions hOptions, {\r\n\t\tsortKeys: false    # --- can be boolean/array/function\r\n\t\tindent: 0          # --- integer number of levels\r\n\t\toneIndent: \"\\t\"\r\n\t\t}\r\n\r\n\tif isArray(sortKeys)\r\n\t\t# --- Convert to a function\r\n\t\tdbg \"sortKeys is an array - convert to function\"\r\n\r\n\t\th = {}\r\n\t\tfor key,i in sortKeys\r\n\t\t\th[key] = i+1\r\n\r\n\t\tsortKeys = (aKey, bKey) ->\r\n\t\t\taVal = h[aKey]\r\n\t\t\tbVal = h[bKey]\r\n\r\n\t\t\tif defined(aVal)\r\n\t\t\t\tif defined(bVal)\r\n\t\t\t\t\t# --- compare numerically\r\n\t\t\t\t\treturn baseCompare(aVal, bVal)\r\n\t\t\t\telse\r\n\t\t\t\t\treturn -1\r\n\t\t\telse\r\n\t\t\t\tif defined(bVal)\r\n\t\t\t\t\treturn 1\r\n\t\t\t\telse\r\n\t\t\t\t\t# --- compare keys alphabetically\r\n\t\t\t\t\treturn baseCompare(aKey, bKey)\r\n\telse\r\n\t\tassert isBoolean(sortKeys) || isFunction(sortKeys),\r\n\t\t\t\t\"sortKeys = #{OL(sortKeys)}\"\r\n\r\n\t[type, subtype] = jsType(obj)\r\n\tdbg \"type = #{OL(type)}, subtype = #{OL(subtype)}\"\r\n\tswitch type\r\n\t\twhen 'function'\r\n\t\t\tif defined(subtype)\r\n\t\t\t\tresult = \"[Function #{subtype}]\"\r\n\t\t\telse\r\n\t\t\t\tresult = \"[Function]\"\r\n\t\twhen undef\r\n\t\t\tif (subtype == 'null')\r\n\t\t\t\tresult = '.null.'\r\n\t\t\telse\r\n\t\t\t\tresult = '.undef.'\r\n\t\twhen 'number', 'bigint'\r\n\t\t\tif (subtype == 'NaN')\r\n\t\t\t\tresult = '.NaN.'\r\n\t\t\telse\r\n\t\t\t\tresult = obj.toString()\r\n\t\twhen 'string'\r\n\t\t\tresult = formatString(obj)\r\n\t\twhen 'boolean'\r\n\t\t\tif obj\r\n\t\t\t\tresult = '.true.'\r\n\t\t\telse\r\n\t\t\t\tresult = '.false.'\r\n\t\twhen 'array'\r\n\t\t\tlLines = []\r\n\t\t\tfor item in obj\r\n\t\t\t\tblock = toNICE(item)\r\n\t\t\t\tif shouldSplit(jsType(item)[0])\r\n\t\t\t\t\tlLines.push '-'\r\n\t\t\t\t\tlLines.push indented(block, 1, oneIndent)\r\n\t\t\t\telse\r\n\t\t\t\t\tlLines.push \"- #{block}\"\r\n\t\t\tresult = toBlock(lLines)\r\n\t\twhen 'hash'\r\n\t\t\tlLines = []\r\n\t\t\tlKeys = Object.keys(obj)\r\n\t\t\tif (sortKeys == true)\r\n\t\t\t\tlKeys.sort()\r\n\t\t\telse if isFunction(sortKeys)\r\n\t\t\t\tlKeys.sort(sortKeys)\r\n\t\t\tdbg \"SORTED: #{OL(lKeys)}\"\r\n\t\t\tfor key in lKeys\r\n\t\t\t\tval = obj[key]\r\n\t\t\t\tblock = toNICE(val)\r\n\t\t\t\tif shouldSplit(jsType(val)[0])\r\n\t\t\t\t\tlLines.push \"#{key}:\"\r\n\t\t\t\t\tlLines.push indented(block, 1, oneIndent)\r\n\t\t\t\telse\r\n\t\t\t\t\tlLines.push \"#{key}: #{block}\"\r\n\t\t\tresult = toBlock(lLines)\r\n\t\twhen 'object'\r\n\t\t\tif defined(subtype)\r\n\t\t\t\tresult = \"[Object #{subtype}]\"\r\n\t\t\telse\r\n\t\t\t\tresult = \"[Object]\"\r\n\r\n\tif (indent != 0)\r\n\t\tassert isInteger(indent, {min: 1}),\r\n\t\t\t\"Bad indent option: #{OL(indent)}\"\r\n\t\tresult = indented(result, indent, oneIndent)\r\n\tdbgReturn 'toNICE', result\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport fromNICE = (block) =>\r\n\r\n\tdbgEnter 'fromNICE', block\r\n\tresult = pparse(parse, block)\r\n\tdbgReturn 'fromNICE', result\r\n\treturn result\r\n"
  ]
}