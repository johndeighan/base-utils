{
  "version": 3,
  "file": "exceptions.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\exceptions.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# exceptions.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, isEmpty, isString,\r\n\t} from '@jdeighan/base-utils'\r\nimport {\r\n\tgetV8Stack, nodeStr,\r\n\t} from '@jdeighan/base-utils/v8-stack'\r\n\r\ndoHaltOnError = false\r\ndoLog = true\r\n\r\n# ---------------------------------------------------------------------------\r\n# simple redirect to an array - useful in unit tests\r\n\r\nlExceptionLog = undef\r\n\r\nexport exReset = () =>\r\n\tlExceptionLog = []\r\n\treturn\r\n\r\nexport exGetLog = () =>\r\n\tresult = lExceptionLog.join(\"\\n\")\r\n\tlExceptionLog = undef\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n`/** prevents logging of exceptions */`\r\nexport suppressExceptionLogging = () =>\r\n\r\n\tdoLog = false\r\n\texReset()\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport haltOnError = (flag=true) =>\r\n\t# --- return existing setting\r\n\r\n\tsave = doHaltOnError\r\n\tdoHaltOnError = flag\r\n\treturn save\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nEXLOG = (obj) =>\r\n\r\n\tif lExceptionLog\r\n\t\tif isString(obj)\r\n\t\t\tlExceptionLog.push obj\r\n\t\telse\r\n\t\t\tlExceptionLog.push JSON.stringify(obj)\r\n\telse if doLog\r\n\t\tconsole.log obj\r\n\r\n# ---------------------------------------------------------------------------\r\n#   assert - mimic nodejs's assert\r\n#   return true so we can use it in boolean expressions\r\n\r\nexport assert = (cond, msg, obj=undef, label=undef) =>\r\n\r\n\tif ! cond\r\n\r\n\t\tif defined(obj)\r\n\t\t\tEXLOG '-------------------------'\r\n\t\t\tif defined(label)\r\n\t\t\t\tEXLOG label\r\n\t\t\tEXLOG obj\r\n\t\t\tEXLOG '-------------------------'\r\n\r\n\t\tlFrames = getV8Stack()\r\n\t\tEXLOG '-------------------------'\r\n\t\tEXLOG 'JavaScript CALL STACK:'\r\n\t\tfor node in lFrames\r\n\t\t\tEXLOG \"   #{nodeStr(node)}\"\r\n\t\tEXLOG '-------------------------'\r\n\t\tEXLOG \"ERROR: #{msg}\"\r\n\t\tcroak msg\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n#   croak - throws an error after possibly printing useful info\r\n#           err can be a string or an Error object\r\n\r\nexport croak = (err=\"unknown error\", label=undef, obj=undef) =>\r\n\r\n\tif (typeof err == 'string') || (err instanceof String)\r\n\t\tcurmsg = err\r\n\telse\r\n\t\tcurmsg = err.message || \"unknown error\"\r\n\r\n\tif isEmpty(label)\r\n\t\tnewmsg = \"ERROR (croak): #{curmsg}\"\r\n\telse\r\n\t\tnewmsg = \"\"\"\r\n\t\t\tERROR (croak): #{curmsg}\r\n\t\t\t#{label}:\r\n\t\t\t#{JSON.stringify(obj)}\r\n\t\t\t\"\"\"\r\n\r\n\tif doHaltOnError\r\n\t\tEXLOG newmsg\r\n\t\tprocess.exit()\r\n\telse\r\n\t\t# --- re-throw the error\r\n\t\tdoLog = true    # reset for next error\r\n\t\tthrow new Error(newmsg)\r\n"
  ]
}