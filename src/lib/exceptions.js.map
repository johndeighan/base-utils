{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\exceptions.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# exceptions.coffee\n\nimport {\n\tundef, defined, notdefined, isEmpty, isString,\n\tjsType,\n\t} from '@jdeighan/base-utils'\nimport {\n\tgetV8Stack, nodeStr,\n\t} from '@jdeighan/base-utils/v8-stack'\n\ndoHaltOnError = false\ndoLog = true\n\n# ---------------------------------------------------------------------------\n# simple redirect to an array - useful in unit tests\n\nlExceptionLog = undef\n\nexport exReset = () =>\n\tlExceptionLog = []\n\treturn\n\nexport exGetLog = () =>\n\tresult = lExceptionLog.join(\"\\n\")\n\tlExceptionLog = undef\n\treturn result\n\n# ---------------------------------------------------------------------------\n`/** prevents logging of exceptions */`\nexport suppressExceptionLogging = () =>\n\n\tdoLog = false\n\texReset()\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport haltOnError = (flag=true) =>\n\t# --- return existing setting\n\n\tsave = doHaltOnError\n\tdoHaltOnError = flag\n\treturn save\n\n# ---------------------------------------------------------------------------\n\nEXLOG = (obj) =>\n\n\tif lExceptionLog\n\t\tif isString(obj)\n\t\t\tlExceptionLog.push obj\n\t\telse\n\t\t\tlExceptionLog.push JSON.stringify(obj)\n\telse if doLog\n\t\tconsole.log obj\n\n# ---------------------------------------------------------------------------\n#   assert - mimic nodejs's assert\n#   return true so we can use it in boolean expressions\n\nexport assert = (cond, msg, obj=undef, label=undef) =>\n\n\tif ! cond\n\n\t\tif defined(obj)\n\t\t\tEXLOG '-------------------------'\n\t\t\tif defined(label)\n\t\t\t\tEXLOG label\n\t\t\tEXLOG obj\n\t\t\tEXLOG '-------------------------'\n\n\t\tlFrames = getV8Stack()\n\t\tEXLOG '-------------------------'\n\t\tEXLOG 'JavaScript CALL STACK:'\n\t\tfor node in lFrames\n\t\t\tEXLOG \"   #{nodeStr(node)}\"\n\t\tEXLOG '-------------------------'\n\t\tEXLOG \"ERROR: #{msg}\"\n\t\tcroak msg\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport isType = (type, label, obj) =>\n\n\tarticle = if (type=='array') then 'an' else 'a'\n\tassert((jsType(obj)[0] == type),\n\t\t\t\"#{label} is not #{article} #{type}\",\n\t\t\tobj, label\n\t\t\t)\n\treturn\n\n# ---------------------------------------------------------------------------\n#   croak - throws an error after possibly printing useful info\n#           err can be a string or an Error object\n\nexport croak = (err=\"unknown error\", label=undef, obj=undef) =>\n\n\tif (typeof err == 'string') || (err instanceof String)\n\t\tcurmsg = err\n\telse\n\t\tcurmsg = err.message || \"unknown error\"\n\n\tif isEmpty(label)\n\t\tnewmsg = \"ERROR (croak): #{curmsg}\"\n\telse\n\t\tnewmsg = \"\"\"\n\t\t\tERROR (croak): #{curmsg}\n\t\t\t#{label}:\n\t\t\t#{JSON.stringify(obj)}\n\t\t\t\"\"\"\n\n\tif doHaltOnError\n\t\tEXLOG newmsg\n\t\tprocess.exit()\n\telse\n\t\t# --- re-throw the error\n\t\tdoLog = true    # reset for next error\n\t\tthrow new Error(newmsg)"
  ]
}