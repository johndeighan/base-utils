{
  "version": 3,
  "file": "base-utils.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\base-utils.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# base-utils.coffee\r\n\r\nimport {execSync} from 'child_process'\r\nimport assertLib from 'node:assert'\r\n\r\nimport {\r\n\tpass, undef, defined, notdefined, assert,\r\n\tisEmpty, nonEmpty, deepCopy\r\n\t} from '@jdeighan/base-utils/ll-utils'\r\n\r\nexport {\r\n\tpass, undef, defined, notdefined, isEmpty, nonEmpty,\r\n\tdeepCopy,\r\n\t}\r\nexport LOG = console.log\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport runCmd = (cmd) =>\r\n\r\n\ttry\r\n\t\tresult = execSync cmd, {\r\n\t\t\tstdio: 'pipe'\r\n\t\t\twindowsHide: true\r\n\t\t\tencoding: 'utf8'\r\n\t\t\t}\r\n\t\treturn result || \"<STDOUT>\"\r\n\tcatch err\r\n\t\tconsole.error \"Failed to execute cmd '#{cmd}'\", err\r\n\t\treturn undef\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport deepEqual = (a, b) =>\r\n\r\n\ttry\r\n\t\tassertLib.deepEqual(a, b)\r\n\tcatch error\r\n\t\tif (error.name == \"AssertionError\")\r\n\t\t\treturn false\r\n\t\tthrow error\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isHashComment = (line) =>\r\n\t# --- true if:\r\n\t#        - 1st non-ws char is a '#'\r\n\t#        - '#' is either followed by a ws char or by nothing\r\n\r\n\tlMatches = line.match(///^\r\n\t\t\t(\\s*)\r\n\t\t\t\\#\r\n\t\t\t(\\s*)\r\n\t\t\t(.*)\r\n\t\t\t$///)\r\n\tif defined(lMatches)\r\n\t\t[_, prefix, ws, text] = lMatches\r\n\t\tif (text.length == 0)\r\n\t\t\treturn {prefix, ws, text: ''}\r\n\t\telse if (ws.length > 0)\r\n\t\t\treturn {prefix, ws, text: text.trim()}\r\n\t\telse\r\n\t\t\treturn undef\r\n\telse\r\n\t\treturn undef\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport spaces = (n) =>\r\n\r\n\treturn \" \".repeat(n)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport tabs = (n) =>\r\n\r\n\treturn \"\\t\".repeat(n)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport centeredText = (text, width) =>\r\n\r\n\ttotSpaces = width - text.length\r\n\tif (totSpaces <= 0)\r\n\t\treturn text\r\n\tnumLeft = Math.floor(totSpaces / 2)\r\n\tnumRight = totSpaces - numLeft\r\n\treturn spaces(numLeft) + text + spaces(numRight)\r\n\r\n# ---------------------------------------------------------------------------\r\n#   rtrunc - strip nChars chars from right of a string\r\n\r\nexport rtrunc = (str, nChars) =>\r\n\r\n\treturn str.substring(0, str.length - nChars)\r\n\r\n# ---------------------------------------------------------------------------\r\n#   ltrunc - strip nChars chars from left of a string\r\n\r\nexport ltrunc = (str, nChars) =>\r\n\r\n\treturn str.substring(nChars)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport CWS = (str) =>\r\n\r\n\tassert isString(str), \"CWS(): parameter not a string\"\r\n\treturn str.trim().replace(/\\s+/sg, ' ')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport splitPrefix = (line) =>\r\n\r\n\tassert isString(line), \"non-string #{OL(line)}\"\r\n\tline = rtrim(line)\r\n\tlMatches = line.match(/^(\\s*)(.*)$/)\r\n\treturn [lMatches[1], lMatches[2]]\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport hasPrefix = (line) =>\r\n\r\n\tassert isString(line), \"non-string #{OL(line)}\"\r\n\tlMatches = line.match(/^(\\s*)/)\r\n\treturn (lMatches[1].length > 0)\r\n\r\n# ---------------------------------------------------------------------------\r\n#    tabify - convert leading spaces to TAB characters\r\n#             if numSpaces is not defined, then the first line\r\n#             that contains at least one space sets it\r\n# --- Works on both blocks and arrays - returns same kind of item\r\n\r\nexport tabify = (item, numSpaces=undef) =>\r\n\r\n\tlLines = []\r\n\tfor str in toArray(item)\r\n\t\t[prefix, theRest] = splitPrefix(str)\r\n\t\tprefixLen = prefix.length\r\n\t\tif prefixLen == 0\r\n\t\t\tlLines.push theRest\r\n\t\telse\r\n\t\t\tassert (prefix.indexOf('\\t') == -1), \"found TAB\"\r\n\t\t\tif numSpaces == undef\r\n\t\t\t\tnumSpaces = prefixLen\r\n\t\t\tassert (prefixLen % numSpaces == 0), \"Bad prefix\"\r\n\t\t\tlevel = prefixLen / numSpaces\r\n\t\t\tlLines.push '\\t'.repeat(level) + theRest\r\n\tif isArray(item)\r\n\t\tresult = item\r\n\telse\r\n\t\tresult = toBlock(lLines)\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport untabify = (str, numSpaces=3) =>\r\n\r\n\treturn str.replace(/\\t/g, ' '.repeat(numSpaces))\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport forEachLine = (item, func) =>\r\n\t# --- callback to func() gets arguments:\r\n\t#        line - each line\r\n\t#        hInfo - with keys lineNum and nextLine\r\n\t# Return value should be:\r\n\t#    true - to stop prematurely\r\n\t#    false - to continue\r\n\r\n\tlInput = toArray(item)\r\n\tfor line,i in lInput\r\n\t\tresult = func(line, {\r\n\t\t\tlineNum: i+1\r\n\t\t\tnextLine: lInput[i+1]\r\n\t\t\t})\r\n\t\tassert isBoolean(result), \"result must be a boolean, got #{OL(result)}\"\r\n\t\tif result   # return of true causes premature exit\r\n\t\t\treturn\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mapEachLine = (item, func) =>\r\n\t# --- callback to func() gets arguments:\r\n\t#        line - each line\r\n\t#        hInfo - with keys lineNum and nextLine\r\n\t#     callback return value should be:\r\n\t#        undef - to skip this line\r\n\t#        else value to include\r\n\r\n\tlLines = []    # return value\r\n\tlInput = toArray(item)\r\n\tfor line,i in lInput\r\n\t\tresult = func(line, {\r\n\t\t\tlineNum: i+1\r\n\t\t\tnextLine: lInput[i+1]\r\n\t\t\t})\r\n\t\tif defined(result)\r\n\t\t\tlLines.push result\r\n\tif isArray(item)\r\n\t\treturn lLines\r\n\telse\r\n\t\treturn toBlock(lLines)\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- a replacer is (key, value) -> newvalue\r\n\r\nmyReplacer = (name, value) =>\r\n\r\n\tif (value == undef)\r\n\t\treturn undef\r\n\telse if (value == null)\r\n\t\treturn null\r\n\telse if isString(value)\r\n\t\treturn escapeStr(value)\r\n\telse if (typeof value == 'function')\r\n\t\treturn \"[Function: #{value.name}]\"\r\n\telse\r\n\t\treturn value\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport OL = (obj) =>\r\n\r\n\tif defined(obj)\r\n\t\tif isString(obj)\r\n\t\t\treturn quoted(obj, 'escape')\r\n\t\telse\r\n\t\t\treturn JSON.stringify(obj, myReplacer)\r\n\telse if (obj == null)\r\n\t\treturn 'null'\r\n\telse\r\n\t\treturn 'undef'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport OLS = (lObjects, sep=',') =>\r\n\r\n\tassert isArray(lObjects), \"not an array\"\r\n\tlParts = []\r\n\tfor obj in lObjects\r\n\t\tlParts.push OL(obj)\r\n\treturn lParts.join(sep)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport qStr = (x) =>\r\n\t# --- x must be string or undef\r\n\t#     puts quotes around a string\r\n\r\n\tif notdefined(x)\r\n\t\treturn 'undef'\r\n\telse if isString(x)\r\n\t\treturn \"'#{x}'\"\r\n\telse\r\n\t\tthrow new Error(\"quoteStr(): Not a string or undef\")\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport quoted = (str, escape=undef) =>\r\n\r\n\tassert isString(str), \"not a string: #{str}\"\r\n\tswitch escape\r\n\t\twhen 'escape'\r\n\t\t\tstr = escapeStr(str)\r\n\t\twhen 'escapeNoNL'\r\n\t\t\tstr = escapeStr(str, hEscNoNL)\r\n\t\telse\r\n\t\t\tpass\r\n\r\n\tif ! hasChar(str, \"'\")\r\n\t\treturn \"'\" + str + \"'\"\r\n\tif ! hasChar(str, '\"')\r\n\t\treturn '\"' + str + '\"'\r\n\treturn '<' + str + '>'\r\n\r\n# ---------------------------------------------------------------------------\r\n#   escapeStr - escape newlines, TAB chars, etc.\r\n\r\nexport hEsc = {\r\n\t\"\\n\": '®'\r\n\t\"\\t\": '→'\r\n\t\" \": '˳'\r\n\t}\r\nexport hEscNoNL = {\r\n\t\"\\t\": '→'\r\n\t\" \": '˳'\r\n\t}\r\n\r\nexport escapeStr = (str, hReplace=hEsc) =>\r\n\t# --- hReplace can also be a string:\r\n\t#        'esc'     - escape space, newline, tab\r\n\t#        'escNoNL' - escape space, tab\r\n\r\n\tif isString(hReplace)\r\n\t\tswitch hReplace\r\n\t\t\twhen 'esc'\r\n\t\t\t\thReplace = hEsc\r\n\t\t\twhen 'escNoNL'\r\n\t\t\t\thReplace = hExcNoNL\r\n\t\t\telse\r\n\t\t\t\tthrow new Error(\"Invalid hReplace string value\")\r\n\r\n\tassert isString(str), \"escapeStr(): not a string\"\r\n\tlParts = for ch in str.split('')\r\n\t\tif defined(hReplace[ch]) then hReplace[ch] else ch\r\n\treturn lParts.join('')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport hasChar = (str, ch) =>\r\n\r\n\treturn (str.indexOf(ch) >= 0)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport oneof = (word, lWords...) =>\r\n\r\n\treturn (lWords.indexOf(word) >= 0)\r\n\r\n# ---------------------------------------------------------------------------\r\n# see: https://stackoverflow.com/questions/40922531/how-to-check-if-a-javascript-function-is-a-constructor\r\n\r\nmyHandler = {\r\n\tconstruct: () ->\r\n\t\treturn myHandler\r\n\t} # Must return ANY object, so reuse one\r\n\r\nexport isConstructor = (x) =>\r\n\tif (typeof x != 'function')\r\n\t\treturn false\r\n\ttry\r\n\t\treturn !!(new (new Proxy(x, myHandler))())\r\n\tcatch e\r\n\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport jsType = (x) =>\r\n\t# --- return [type, subtype]\r\n\r\n\tif (x == null)\r\n\t\treturn [undef, 'null']\r\n\telse if (x == undef)\r\n\t\treturn [undef, undef]\r\n\r\n\tswitch (typeof x)\r\n\t\twhen 'number'\r\n\t\t\tif Number.isNaN(x)\r\n\t\t\t\treturn ['number', 'NaN']\r\n\t\t\telse if Number.isInteger(x)\r\n\t\t\t\treturn ['number', 'integer']\r\n\t\t\telse\r\n\t\t\t\treturn ['number', undef]\r\n\t\twhen 'string'\r\n\t\t\tif x.match(/^\\s*$/)\r\n\t\t\t\treturn ['string', 'empty']\r\n\t\t\telse\r\n\t\t\t\treturn ['string', undef]\r\n\t\twhen 'boolean'\r\n\t\t\treturn ['boolean', undef]\r\n\t\twhen 'bigint'\r\n\t\t\treturn ['number', 'integer']\r\n\t\twhen 'function'\r\n\t\t\tif x.prototype && (x.prototype.constructor == x)\r\n\t\t\t\treturn ['class', undef]\r\n\t\t\treturn ['function', undef]\r\n\t\twhen 'object'\r\n\t\t\tif (x instanceof String)\r\n\t\t\t\tif x.match(/^\\s*$/)\r\n\t\t\t\t\treturn ['string', 'empty']\r\n\t\t\t\telse\r\n\t\t\t\t\treturn ['string', undef]\r\n\t\t\tif (x instanceof Number)\r\n\t\t\t\tif Number.isInteger(x)\r\n\t\t\t\t\treturn ['number', 'integer']\r\n\t\t\t\telse\r\n\t\t\t\t\treturn ['number', undef]\r\n\t\t\tif (x instanceof Boolean)\r\n\t\t\t\treturn ['boolean', undef]\r\n\t\t\tif Array.isArray(x)\r\n\t\t\t\tif (x.length == 0)\r\n\t\t\t\t\treturn ['array', 'empty']\r\n\t\t\t\telse\r\n\t\t\t\t\treturn ['array', undef]\r\n\t\t\tif (x instanceof RegExp)\r\n\t\t\t\treturn ['regexp', undef]\r\n\t\t\tif (x instanceof Function)\r\n\t\t\t\tif x.prototype && (x.prototype.constructor == x)\r\n\t\t\t\t\treturn ['class', undef]\r\n\t\t\t\telse\r\n\t\t\t\t\treturn ['function', undef]\r\n\t\t\tif defined(x.constructor.name) \\\r\n\t\t\t\t\t&& (typeof x.constructor.name == 'string') \\\r\n\t\t\t\t\t&& (x.constructor.name == 'Object')\r\n\t\t\t\tlKeys = Object.keys(x);\r\n\t\t\t\tif (lKeys.length == 0)\r\n\t\t\t\t\treturn ['hash', 'empty']\r\n\t\t\t\telse\r\n\t\t\t\t\treturn ['hash', undef]\r\n\t\t\telse\r\n\t\t\t\treturn ['object', undef]\r\n\t\telse\r\n\t\t\tthrow new Error (\"Unknown jsType: #{x}\")\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isString = (x) =>\r\n\r\n\treturn (jsType(x)[0] == 'string')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isNonEmptyString = (x) =>\r\n\r\n\treturn isString(x) && ! x.match(/^\\s*$/)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isNonEmptyArray = (x) =>\r\n\r\n\treturn isArray(x) && (x.length > 0)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isNonEmptyHash = (x) =>\r\n\r\n\treturn isHash(x) && (Object.keys(x).length > 0)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isIdentifier = (x) =>\r\n\r\n\tif ! isString(x)\r\n\t\treturn false\r\n\treturn x.match(///^\r\n\t\t\t[A-Za-z_]\r\n\t\t\t[A-Za-z0-9_]*\r\n\t\t\t$///)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isFunctionName = (x) =>\r\n\r\n\tif isString(x) && lMatches = x.match(///^\r\n\t\t\t( [A-Za-z_] [A-Za-z0-9_]* )\r\n\t\t\t(?:\r\n\t\t\t\t\\.             # allow class method names\r\n\t\t\t\t( [A-Za-z_] [A-Za-z0-9_]* )\r\n\t\t\t\t)?\r\n\t\t\t$///)\r\n\t\t[_, first, second] = lMatches\r\n\t\tif nonEmpty(second)\r\n\t\t\treturn [first, second]\r\n\t\telse\r\n\t\t\treturn [first]\r\n\telse\r\n\t\treturn undef\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isNumber = (x, hOptions=undef) =>\r\n\r\n\tif (jsType(x)[0] != 'number')\r\n\t\treturn false\r\n\tif defined(hOptions)\r\n\t\tassert isHash(hOptions), \"2nd arg not a hash: #{OL(hOptions)}\"\r\n\t\t{min, max} = hOptions\r\n\t\tif defined(min) && (x < min)\r\n\t\t\treturn false\r\n\t\tif defined(max) && (x > max)\r\n\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isInteger = (x, hOptions={}) =>\r\n\r\n\tif (typeof x == 'number')\r\n\t\tresult = Number.isInteger(x)\r\n\telse if (x instanceof Number)\r\n\t\tresult = Number.isInteger(x.valueOf())\r\n\telse\r\n\t\treturn false\r\n\r\n\tif result\r\n\t\tif defined(hOptions.min) && (x < hOptions.min)\r\n\t\t\tresult = false\r\n\t\tif defined(hOptions.max) && (x > hOptions.max)\r\n\t\t\tresult = false\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isArray = (x) =>\r\n\r\n\treturn (jsType(x)[0] == 'array')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isArrayOfArrays = (lItems, size=undef) =>\r\n\t# --- undefined items are allowed\r\n\r\n\tif ! isArray(lItems)\r\n\t\treturn false\r\n\tfor item in lItems\r\n\t\tif defined(item)\r\n\t\t\tif ! isArray(item)\r\n\t\t\t\treturn false\r\n\t\t\tif defined(size) && (item.length != size)\r\n\t\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isArrayOfHashes = (lItems) =>\r\n\t# --- undefined items are allowed\r\n\r\n\tif ! isArray(lItems)\r\n\t\treturn false\r\n\tfor item in lItems\r\n\t\tif defined(item) && ! isHash(item)\r\n\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isArrayOfStrings = (lItems) =>\r\n\t# --- undefined items are allowed\r\n\r\n\tif ! isArray(lItems)\r\n\t\treturn false\r\n\tfor item in lItems\r\n\t\tif defined(item) && ! isString(item)\r\n\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport words = (lStrings...) =>\r\n\r\n\tlWords = []\r\n\tfor str in lStrings\r\n\t\tstr = str.trim()\r\n\t\tif (str != '')\r\n\t\t\tfor word in str.split(/\\s+/)\r\n\t\t\t\tlWords.push word\r\n\treturn lWords\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isBoolean = (x) =>\r\n\r\n\treturn (jsType(x)[0] == 'boolean')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isFunction = (x) =>\r\n\r\n\tmtype = jsType(x)[0]\r\n\treturn (mtype == 'function') || (mtype == 'class')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isIterable = (obj) =>\r\n\r\n\tif (obj == undef) || (obj == null)\r\n\t\treturn false\r\n\treturn (typeof obj[Symbol.iterator] == 'function')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isRegExp = (x) =>\r\n\r\n\treturn (jsType(x)[0] == 'regexp')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isHash = (x, lKeys) =>\r\n\r\n\tif (jsType(x)[0] != 'hash')\r\n\t\treturn false\r\n\tif defined(lKeys)\r\n\t\tif isString(lKeys)\r\n\t\t\tlKeys = words(lKeys)\r\n\t\telse if ! isArray(lKeys)\r\n\t\t\tthrow new Error(\"lKeys not an array: #{OL(lKeys)}\")\r\n\t\tfor key in lKeys\r\n\t\t\tif ! x.hasOwnProperty(key)\r\n\t\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport removeKeys = (item, lKeys) =>\r\n\r\n\tassert isArray(lKeys), \"not an array\"\r\n\t[type, subtype] = jsType(item)\r\n\tswitch type\r\n\t\twhen 'array'\r\n\t\t\tfor subitem in item\r\n\t\t\t\tremoveKeys subitem, lKeys\r\n\t\twhen 'hash', 'object'\r\n\t\t\tfor key in lKeys\r\n\t\t\t\tif item.hasOwnProperty(key)\r\n\t\t\t\t\tdelete item[key]\r\n\t\t\tfor prop,value of item\r\n\t\t\t\tremoveKeys value, lKeys\r\n\treturn item\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isObject = (x, lReqKeys=undef) =>\r\n\r\n\tif (jsType(x)[0] != 'object')\r\n\t\treturn false\r\n\r\n\tif defined(lReqKeys)\r\n\t\tif isString(lReqKeys)\r\n\t\t\tlReqKeys = words(lReqKeys)\r\n\t\tassert isArray(lReqKeys), \"lReqKeys not an array: #{OL(lReqKeys)}\"\r\n\t\tfor key in lReqKeys\r\n\t\t\ttype = undef\r\n\t\t\tif lMatches = key.match(///^ (\\&) (.*) $///)\r\n\t\t\t\t[_, type, key] = lMatches\r\n\t\t\tif notdefined(x[key])\r\n\t\t\t\treturn false\r\n\t\t\tif (type == '&') && (typeof x[key] != 'function')\r\n\t\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isClass = (x) =>\r\n\r\n\treturn (jsType(x)[0] == 'class')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport className = (item) =>\r\n\t# --- item can be a class or an object\r\n\r\n\tif isClass(item)\r\n\t\tif lMatches = item.toString().match(/class\\s+(\\w+)/)\r\n\t\t\treturn lMatches[1]\r\n\t\telse\r\n\t\t\tthrow new Error(\"className(): Bad input class\")\r\n\telse if isObject(item)\r\n\t\treturn item.constructor.name\r\n\telse\r\n\t\treturn undef\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isScalar = (x) =>\r\n\r\n\treturn isNumber(x) || isString(x) || isBoolean(x)\r\n\r\n# ---------------------------------------------------------------------------\r\n#   blockToArray - split a block into lines\r\n\r\nexport blockToArray = (block) =>\r\n\r\n\tif (block == undef) || (block == '')\r\n\t\treturn []\r\n\telse\r\n\t\tassert isString(block), \"block is #{OL(block)}\"\r\n\t\tlLines = block.split(/\\r?\\n/)\r\n\t\treturn lLines\r\n\r\n# ---------------------------------------------------------------------------\r\n#   arrayToBlock - block and lines in block will have no trailing whitespace\r\n\r\nexport arrayToBlock = (lLines, hEsc=undef) =>\r\n\r\n\tif (lLines == undef)\r\n\t\treturn ''\r\n\tassert isArray(lLines), \"lLines is not an array\"\r\n\tlResult = []\r\n\tfor line in lLines\r\n\t\tif defined(line)\r\n\t\t\tlResult.push rtrim(line)\r\n\tif lResult.length == 0\r\n\t\treturn ''\r\n\telse\r\n\t\tresult = lResult.join(\"\\n\")\r\n\t\tif defined(hEsc)\r\n\t\t\tresult = escapeStr(result, hEsc)\r\n\t\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport toBlock = (item) =>\r\n\r\n\tif isString(item)\r\n\t\treturn item\r\n\telse\r\n\t\treturn arrayToBlock(item)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport toArray = (item) =>\r\n\r\n\tif isArray(item)\r\n\t\t# --- We need to split any strings containing a \\n\r\n\t\tlLines = []\r\n\t\tfor line in item\r\n\t\t\tif hasChar(line, \"\\n\")\r\n\t\t\t\tfor str in line.split(/\\r?\\n/)\r\n\t\t\t\t\tlLines.push str\r\n\t\t\telse\r\n\t\t\t\tlLines.push line\r\n\t\treturn lLines\r\n\telse\r\n\t\treturn blockToArray(item)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport prefixBlock = (block, prefix) =>\r\n\r\n\tlLines = for line in toArray(block)\r\n\t\t\"#{prefix}#{line}\"\r\n\treturn toBlock(lLines)\r\n\r\n# ---------------------------------------------------------------------------\r\n#   rtrim - strip trailing whitespace\r\n\r\nexport rtrim = (line) =>\r\n\r\n\tassert isString(line), \"rtrim(): line is not a string\"\r\n\tlMatches = line.match(/\\s+$/)\r\n\tif defined(lMatches)\r\n\t\tn = lMatches[0].length   # num chars to remove\r\n\t\treturn line.substring(0, line.length - n)\r\n\telse\r\n\t\treturn line\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport hashFromString = (str) =>\r\n\r\n\tassert isString(str), \"not a string: #{OL(str)}\"\r\n\th = {}\r\n\tfor word in words(str)\r\n\t\tif lMatches = word.match(///^\r\n\t\t\t\t(\\!)?                    # negate value\r\n\t\t\t\t([A-Za-z][A-Za-z_0-9]*)  # identifier\r\n\t\t\t\t(?:\r\n\t\t\t\t\t(=)\r\n\t\t\t\t\t(.*)\r\n\t\t\t\t\t)?\r\n\t\t\t\t$///)\r\n\t\t\t[_, neg, ident, eq, str] = lMatches\r\n\t\t\tif nonEmpty(eq)\r\n\t\t\t\tassert isEmpty(neg), \"negation with string value\"\r\n\r\n\t\t\t\t# --- check if str is a valid number\r\n\t\t\t\tnum = parseFloat(str)\r\n\t\t\t\tif Number.isNaN(num)\r\n\t\t\t\t\t# --- TO DO: interpret backslash escapes\r\n\t\t\t\t\th[ident] = str\r\n\t\t\t\telse\r\n\t\t\t\t\th[ident] = num\r\n\t\t\telse if neg\r\n\t\t\t\th[ident] = false\r\n\t\t\telse\r\n\t\t\t\th[ident] = true\r\n\t\telse\r\n\t\t\tthrow new Error(\"Invalid word #{OL(word)}\")\r\n\treturn h\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getOptions = (options=undef, hDefault={}) =>\r\n\r\n\t[type, subtype] = jsType(options)\r\n\tswitch type\r\n\t\twhen undef\r\n\t\t\thOptions = {}\r\n\t\twhen 'hash'\r\n\t\t\thOptions = options\r\n\t\twhen 'string'\r\n\t\t\thOptions = hashFromString(options)\r\n\t\telse\r\n\t\t\tthrow new Error(\"options not hash or string: #{OL(options)}\")\r\n\r\n\t# --- Fill in defaults for missing values\r\n\tfor own key,value of hDefault\r\n\t\tif ! hOptions.hasOwnProperty(key)\r\n\t\t\thOptions[key] = value\r\n\r\n\treturn hOptions\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport range = (n) =>\r\n\r\n\treturn [0..n-1]\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport rev_range = (n) =>\r\n\r\n\treturn [0..n-1].reverse()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport warn = (msg) =>\r\n\r\n\tconsole.log \"WARNING: #{msg}\"\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport uniq = (lItems) =>\r\n\r\n\treturn [...new Set(lItems)]\r\n\r\n# ---------------------------------------------------------------------------\r\n#   say - print to the console (for now)\r\n#         later, on a web page, call alert(str)\r\n\r\nexport say = (x) =>\r\n\r\n\tif isHash(x)\r\n\t\tLOG JSON.stringify(x, Object.keys(h).sort(), 3)\r\n\telse\r\n\t\tLOG x\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport extractMatches = (line, regexp, convertFunc=undef) =>\r\n\r\n\tlStrings = [...line.matchAll(regexp)]\r\n\tlStrings = for str in lStrings\r\n\t\tstr[0]\r\n\tif defined(convertFunc)\r\n\t\tlConverted = for str in lStrings\r\n\t\t\tconvertFunc(str)\r\n\t\treturn lConverted\r\n\telse\r\n\t\treturn lStrings\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getTimeStr = (date=undef) =>\r\n\r\n\tif date == undef\r\n\t\tdate = new Date()\r\n\treturn date.toLocaleTimeString('en-US')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getDateStr = (date=undef) =>\r\n\r\n\tif date == undef\r\n\t\tdate = new Date()\r\n\treturn date.toLocaleDateString('en-US')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport timestamp = (dateStr=undef, locale='en-US') =>\r\n\r\n\tif defined(dateStr)\r\n\t\tdate = new Date(dateStr)\r\n\telse\r\n\t\tdate = new Date()\r\n\tstr1 = date.toLocaleDateString(locale)\r\n\tstr2 = date.toLocaleTimeString(locale)\r\n\treturn \"#{str1} #{str2}\"\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport msSinceEpoch = (dateStr=undef) =>\r\n\r\n\tif defined(dateStr)\r\n\t\tdate = new Date(dateStr)\r\n\telse\r\n\t\tdate = new Date()\r\n\treturn date.getTime()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport formatDate = (dateStr=undef, dateStyle='medium', locale='en-US') =>\r\n\r\n\tif defined(dateStr)\r\n\t\tdate = new Date(dateStr)\r\n\telse\r\n\t\tdate = new Date()\r\n\treturn new Intl.DateTimeFormat(locale, {dateStyle}).format(date)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getDumpStr = (label, str, hOptions={}) =>\r\n\t# --- Valid options:\r\n\t#        escape - escape space & TAB chars\r\n\t#        width\r\n\r\n\tlLines = []\r\n\t{escape, width} = getOptions(hOptions, {\r\n\t\tescape: false\r\n\t\twidth: 42\r\n\t\t})\r\n\r\n\tif isString(str)\r\n\t\tstringified = false\r\n\telse if defined(str)\r\n\t\tstr = JSON.stringify(str, undef, 3)\r\n\t\tstringified = true\r\n\telse\r\n\t\tstr = 'undef'\r\n\t\tstringified = true\r\n\r\n\tlLines.push '='.repeat(width)\r\n\tlLines.push centeredText(label, width)\r\n\r\n\tif stringified\r\n\t\tlLines.push '-'.repeat(width)\r\n\telse\r\n\t\tlLines.push '='.repeat(width)\r\n\r\n\tif escape\r\n\t\tlLines.push escapeStr(str, hEscNoNL)\r\n\telse\r\n\t\tlLines.push str.replace(/\\t/g, \"   \")\r\n\tlLines.push '='.repeat(width)\r\n\treturn lLines.join(\"\\n\")\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport eachCharInString = (str, func) =>\r\n\r\n\tfor ch in Array.from(str)\r\n\t\tif !func(ch)\r\n\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport DUMP = (label, obj, hOptions={}) =>\r\n\r\n\tassert isString(label), \"no label\"\r\n\tconsole.log getDumpStr(label, obj, hOptions)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# in callback set():\r\n#    - return undef to NOT set\r\n#    - return value (possibly changed) to set\r\n# in callback get():\r\n#    - return (possibly changed) value\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getProxy = (obj, hCallbacks) =>\r\n\t# --- Keys in hFuncs can be: 'get','set'\r\n\r\n\thHandlers = {}\r\n\tif hCallbacks.hasOwnProperty('set')\r\n\t\thHandlers.set = (obj, prop, value) ->\r\n\t\t\tnewval = hCallbacks.set(obj, prop, value)\r\n\t\t\tif defined(newval)   # don't set if callback returns false\r\n\t\t\t\tReflect.set(obj, prop, newval)\r\n\t\t\treturn true\r\n\r\n\tif hCallbacks.hasOwnProperty('get')\r\n\t\thHandlers.get = (obj, prop) ->\r\n\t\t\tvalue = Reflect.get(obj, prop)\r\n\t\t\treturn hCallbacks.get(obj, prop, value)\r\n\r\n\tif isEmpty(hHandlers)\r\n\t\treturn obj\r\n\telse\r\n\t\treturn new Proxy(obj, hHandlers)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport sleep = (secs) =>\r\n\r\n\treturn new Promise((r) => setTimeout(r, 1000 * secs))\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nhTimers = {}    # { <id> => <timer>, ... }\r\n\r\nexport schedule = (secs, keyVal, func, lArgs...) =>\r\n\r\n\tassert isFunction(func), \"not a function: #{OL(func)}\"\r\n\r\n\t# --- if there's currently a timer with the same keyVal, kill it\r\n\tif defined(timer = hTimers[keyVal])\r\n\t\tclearTimeout timer\r\n\thTimers[keyVal] = setTimeout(func, 1000 * secs, lArgs...)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport hit = (pct) ->\r\n\r\n\treturn Math.random() * 100 < pct\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport choose = (lItems) ->\r\n\r\n\treturn lItems[Math.floor(Math.random()*lItems.length)]\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- shuffle an array in place, return ref to shuffled array\r\n\r\nexport shuffle = (lItems) ->\r\n\r\n\ti = lItems.length\r\n\r\n\t# --- While there remain elements to shuffle.\r\n\twhile (i > 0)\r\n\r\n\t\t# --- Pick a remaining element.\r\n\t\ti2 = Math.floor(Math.random() * i)\r\n\t\ti -= 1\r\n\r\n\t\t# --- And swap it with the current element.\r\n\t\t[lItems[i], lItems[i2]] = [lItems[i2], lItems[i]];\r\n\r\n\treturn lItems\r\n"
  ]
}