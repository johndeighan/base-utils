{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\base-utils.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# base-utils.coffee\n\nimport fs from 'node:fs'\nimport {exec as execCB, execSync} from 'node:child_process'\nimport {promisify} from 'node:util'\nexec = promisify(execCB)\nimport assertLib from 'node:assert'\n\n# --- ABSOLUTELY NO IMPORTS FROM OUR LIBS !!!!!\n\n`export const undef = void 0`\nLOG = console.log   # used internally, not exported\n\n# ---------------------------------------------------------------------------\n# low-level version of assert()\n\nexport assert = (cond, msg) =>\n\n\tassertLib.ok cond, msg\n\treturn true\n\n# ---------------------------------------------------------------------------\n# low-level version of croak()\n\nexport croak = (msg) =>\n\n\tthrow new Error(msg)\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport fileExt = (filePath) =>\n\n\tif lMatches = filePath.match(/\\.[^\\.]+$/)\n\t\treturn lMatches[0]\n\telse\n\t\treturn ''\n\n# ---------------------------------------------------------------------------\n\nexport withExt = (filePath, newExt) =>\n\n\tif newExt.indexOf('.') != 0\n\t\tnewExt = '.' + newExt\n\n\tif lMatches = filePath.match(/^(.*)\\.[^\\.]+$/)\n\t\t[_, pre] = lMatches\n\t\treturn pre + newExt\n\tthrow new Error(\"Bad path: '#{filePath}'\")\n\n# ---------------------------------------------------------------------------\n\nexport newerDestFilesExist = (srcPath, lDestPaths...) =>\n\n\tfor destPath in lDestPaths\n\t\tif ! fs.existsSync(destPath)\n\t\t\treturn false\n\t\tsrcModTime = fs.statSync(srcPath).mtimeMs\n\t\tdestModTime = fs.statSync(destPath).mtimeMs\n\t\tif (destModTime < srcModTime)\n\t\t\treturn false\n\treturn true\n\n# ---------------------------------------------------------------------------\n#   pass - do nothing\n\nexport pass = () =>\n\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport defined = (obj) =>\n\n\treturn (obj != undef) && (obj != null)\n\n# ---------------------------------------------------------------------------\n\nexport notdefined = (obj) =>\n\n\treturn (obj == undef) || (obj == null)\n\n# ---------------------------------------------------------------------------\n\nexport alldefined = (lObj...) =>\n\n\tfor obj in lObj\n\t\tif (obj == undef) || (obj == null)\n\t\t\treturn false\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport truncateStr = (str, maxLen) =>\n\n\tassert isString(str), \"not a string: #{typeof str}\"\n\tassert isInteger(maxLen), \"not an integer: #{maxLen}\"\n\tlen = str.length\n\tif (len <= maxLen)\n\t\treturn str\n\telse\n\t\treturn str.substring(0, maxLen-1) + '…'\n\n# ---------------------------------------------------------------------------\n#   escapeStr - escape newlines, carriage return, TAB chars, etc.\n\nexport hEsc = {\n\t\"\\r\": '◄'\n\t\"\\n\": '▼'\n\t\"\\t\": '→'\n\t\" \": '˳'\n\t}\nexport hEscNoNL = {\n\t\"\\t\": '→'\n\t\" \": '˳'\n\t}\n\nexport escapeStr = (str, hReplace=hEsc) =>\n\t# --- hReplace can also be a string:\n\t#        'esc'     - escape space, newline, tab\n\t#        'escNoNL' - escape space, tab\n\n\tassert isString(str), \"not a string: #{typeof str}\"\n\tif isString(hReplace)\n\t\tswitch hReplace\n\t\t\twhen 'esc'\n\t\t\t\thReplace = hEsc\n\t\t\twhen 'escNoNL'\n\t\t\t\thReplace = hExcNoNL\n\t\t\telse\n\t\t\t\treturn str\n\tassert isHash(hReplace), \"not a hash\"\n\tif isEmpty(hReplace)\n\t\treturn str\n\n\tresult = ''\n\tfor ch from str\n\t\tif defined(hReplace[ch])\n\t\t\tresult += hReplace[ch]\n\t\telse\n\t\t\tresult += ch\n\treturn result\n\n# ---------------------------------------------------------------------------\n\nexport userSetQuoteChars = false\nexport lQuoteChars = ['«', '»']\n\nexport quoted = (str, escape=undef) =>\n\n\tassert isString(str), \"not a string: #{str}\"\n\n\t# --- Escape chars if specified\n\tswitch escape\n\t\twhen 'escape'\n\t\t\tstr = escapeStr(str, hEsc)  # escape sp, tab, nl\n\t\twhen 'escapeNoNL'\n\t\t\tstr = escapeStr(str, hEscNoNL)\n\n\t# --- Surround with quote marks\n\n\tif !userSetQuoteChars\n\t\t# --- Prefer using \"\n\t\tif ! hasChar(str, '\"')\n\t\t\tresult = '\"' + str + '\"'\n\t\t\treturn result\n\n\t\tif ! hasChar(str, \"'\")\n\t\t\tresult = \"'\" + str + \"'\"\n\t\t\treturn result\n\n\t[lq, rq] = lQuoteChars\n\thMyEsc = {\n\t\t[lq]: \"\\\\\" + lq\n\t\t[rq]: \"\\\\\" + rq\n\t\t}\n\tresult = lq + escapeStr(str, hMyEsc) + rq\n\treturn result\n\n# ---------------------------------------------------------------------------\n\nexport setQuoteChars = (start='«', end='»') =>\n\t# --- returns original quote chars\n\n\tlQuoteChars[0] = start\n\tlQuoteChars[1] = end || start\n\tuserSetQuoteChars = true\n\treturn\n\nexport resetQuoteChars = () =>\n\n\tuserSetQuoteChars = false\n\tlQuoteChars = ['«', '»']\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport OL = (obj, debug=false) =>\n\n\tif (obj == undef)\n\t\treturn 'undef'\n\tif (obj == null)\n\t\treturn 'null'\n\n\tmyReplacer = (key, x) =>\n\t\ttype = typeof x\n\t\tswitch type\n\t\t\twhen 'bigint'\n\t\t\t\treturn \"«BigInt #{x.toString()}»\"\n\t\t\twhen 'function'\n\t\t\t\tif x.toString().startsWith('class')\n\t\t\t\t\ttag = 'Class'\n\t\t\t\telse\n\t\t\t\t\ttag = 'Function'\n\t\t\t\tif defined(x.name)\n\t\t\t\t\treturn \"«#{tag} #{x.name}»\"\n\t\t\t\telse\n\t\t\t\t\treturn \"«#{tag}»\"\n\t\t\twhen 'string'\n\t\t\t\t# --- NOTE: JSON.stringify will add quote chars\n\t\t\t\treturn escapeStr(x)\n\t\t\twhen 'object'\n\t\t\t\tif x instanceof RegExp\n\t\t\t\t\treturn \"«RegExp #{x.toString()}»\"\n\t\t\t\tif defined(x) && (typeof x.then == 'function')\n\t\t\t\t\treturn \"«Promise»\"\n\t\t\t\telse\n\t\t\t\t\treturn x\n\t\t\telse\n\t\t\t\treturn x\n\n\tresult = JSON.stringify(obj, myReplacer)\n\n\t# --- Because JSON.stringify adds quote marks,\n\t#     we remove them when using « and »\n\tfinalResult = result \\\n\t\t.replaceAll('\"«','«').replaceAll('»\"','»')\n\treturn finalResult\n\n# ---------------------------------------------------------------------------\n\nexport OLS = (lObjects, sep=',') =>\n\n\tassert isArray(lObjects), \"not an array\"\n\tlParts = []\n\tfor obj in lObjects\n\t\tlParts.push OL(obj)\n\treturn lParts.join(sep)\n\n# ---------------------------------------------------------------------------\n\nexport jsType = (x) =>\n\t# --- return [type, subtype]\n\n\tswitch x\n\t\twhen undef\n\t\t\treturn [undef, undef]\n\t\twhen null\n\t\t\treturn [undef, 'null']\n\t\twhen true, false\n\t\t\treturn ['boolean', undef]\n\n\tswitch (typeof x)\n\t\twhen 'number'\n\t\t\tif Number.isNaN(x)\n\t\t\t\treturn ['number', 'NaN']\n\t\t\telse if Number.isInteger(x)\n\t\t\t\treturn ['number', 'integer']\n\t\t\telse\n\t\t\t\treturn ['number', undef]\n\t\twhen 'bigint'\n\t\t\treturn ['number', 'integer']\n\t\twhen 'string'\n\t\t\tif x.match(/^\\s*$/)\n\t\t\t\treturn ['string', 'empty']\n\t\t\telse\n\t\t\t\treturn ['string', undef]\n\t\twhen 'boolean'\n\t\t\treturn ['boolean', undef]\n\t\twhen 'function'\n\t\t\tstr = x.toString()\n\t\t\tif str.startsWith('class')\n\t\t\t\treturn ['class', x.name || undef]\n\t\t\telse\n\t\t\t\treturn ['function', x.name || undef]\n\t\twhen 'object'\n\t\t\tif (x instanceof String)\n\t\t\t\tif x.match(/^\\s*$/)\n\t\t\t\t\treturn ['string', 'empty']\n\t\t\t\telse\n\t\t\t\t\treturn ['string', undef]\n\t\t\tif (x instanceof Number)\n\t\t\t\tif Number.isInteger(x)\n\t\t\t\t\treturn ['number', 'integer']\n\t\t\t\telse\n\t\t\t\t\treturn ['number', undef]\n\t\t\tif (x instanceof Boolean)\n\t\t\t\treturn ['boolean', undef]\n\t\t\tif Array.isArray(x)\n\t\t\t\tif (x.length == 0)\n\t\t\t\t\treturn ['array', 'empty']\n\t\t\t\telse\n\t\t\t\t\treturn ['array', undef]\n\t\t\tif (x instanceof RegExp)\n\t\t\t\treturn ['regexp', undef]\n\t\t\tif (x instanceof Function)\n\t\t\t\tif x.prototype && (x.prototype.constructor == x)\n\t\t\t\t\treturn ['class', undef]\n\t\t\t\telse\n\t\t\t\t\treturn ['function', x.name || undef]\n\t\t\tif defined(x.constructor.name) \\\n\t\t\t\t\t&& (typeof x.constructor.name == 'string') \\\n\t\t\t\t\t&& (x.constructor.name == 'Object')\n\t\t\t\tlKeys = keys(x)\n\t\t\t\tif (lKeys.length == 0)\n\t\t\t\t\treturn ['hash', 'empty']\n\t\t\t\telse\n\t\t\t\t\treturn ['hash', undef]\n\t\t\telse if (typeof x.then == 'function')\n\t\t\t\treturn ['promise', undef]\n\t\t\telse\n\t\t\t\treturn ['object', undef]\n\t\telse\n\t\t\tthrow new Error (\"Unknown jsType: #{x}\")\n\n# ---------------------------------------------------------------------------\n\nexport isString   = (x) => (jsType(x)[0] == 'string')\nexport isArray    = (x) => (jsType(x)[0] == 'array')\nexport isBoolean  = (x) => (jsType(x)[0] == 'boolean')\nexport isFunction = (x) => (jsType(x)[0] == 'function')\nexport isRegExp   = (x) => (jsType(x)[0] == 'regexp')\nexport isPromise  = (x) => (jsType(x)[0] == 'promise')\n\n# ---------------------------------------------------------------------------\n\nexport isHash = (x, lKeys=undef) =>\n\n\tif (jsType(x)[0] != 'hash')\n\t\treturn false\n\tif defined(lKeys)\n\t\tif isString(lKeys)\n\t\t\tlKeys = words(lKeys)\n\t\telse if ! isArray(lKeys)\n\t\t\tthrow new Error(\"lKeys not an array: #{OL(lKeys)}\")\n\t\tfor key in lKeys\n\t\t\tif ! x.hasOwnProperty(key)\n\t\t\t\treturn false\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport isObject = (x, lReqKeys=undef) =>\n\n\tif (jsType(x)[0] != 'object')\n\t\treturn false\n\n\tif defined(lReqKeys)\n\t\tif isString(lReqKeys)\n\t\t\tlReqKeys = words(lReqKeys)\n\t\tassert isArray(lReqKeys), \"lReqKeys not an array: #{OL(lReqKeys)}\"\n\t\tfor key in lReqKeys\n\t\t\ttype = undef\n\t\t\tif lMatches = key.match(///^ (\\&) (.*) $///)\n\t\t\t\t[_, type, key] = lMatches\n\t\t\tif notdefined(x[key])\n\t\t\t\treturn false\n\t\t\tif (type == '&') && (typeof x[key] != 'function')\n\t\t\t\treturn false\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport execCmd = (cmd, lParts...) =>\n\t# --- may throw an exception\n\n\tcmdLine = buildCmdLine(cmd, lParts...)\n\ttry\n\t\tresult = execSync cmdLine, {\n\t\t\tencoding: 'utf8'\n\t\t\twindowsHide: true\n\t\t\t}\n\n\t\tassert isString(result), \"result = #{OL(result)}\"\n\t\treturn result\n\tcatch err\n\t\tconsole.log \"ERROR: #{OL(err)}\"\n\n# ---------------------------------------------------------------------------\n\nexport execCmdAsync = (cmd, lParts...) =>\n\t# --- may throw an exception\n\n\tcmdLine = buildCmdLine(cmd, lParts...)\n\treturn await exec cmdLine, {\n\t\tencoding: 'utf8'\n\t\twindowsHide: true\n\t\t}\n\n# ---------------------------------------------------------------------------\n# --- lParts may contain hashes (options) or arrays (non-options)\n\nexport buildCmdLine = (cmd, lParts...) =>\n\n\tlOptions = []\n\tlFlags = []      # array of letters\n\tlNonOptions = []\n\n\tfor obj in lParts\n\t\tif isHash(obj)\n\t\t\tfor own key,value of obj\n\t\t\t\tswitch jsType(value)[0]\n\t\t\t\t\twhen 'string'\n\t\t\t\t\t\tif value.includes(' ')\n\t\t\t\t\t\t\tlOptions.push \"-#{key}=\\\"#{value}\\\"\"\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tlOptions.push \"-#{key}=#{value}\"\n\t\t\t\t\twhen 'boolean'\n\t\t\t\t\t\tif value\n\t\t\t\t\t\t\tif (key.length == 1)\n\t\t\t\t\t\t\t\tlFlags.push key\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tlOptions.push \"-#{key}=true\"\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tlOptions.push \"-#{key}=false\"\n\t\t\t\t\twhen 'number'\n\t\t\t\t\t\tlOptions.push \"-#{key}=#{value}\"\n\t\t\t\t\telse\n\t\t\t\t\t\tcroak \"Bad option: #{OL(value)}\"\n\n\t\telse if isArray(obj)\n\t\t\tfor item in obj\n\t\t\t\tif item.includes(' ')\n\t\t\t\t\tlNonOptions.push \"\\\"#{item}\\\"\"\n\t\t\t\telse\n\t\t\t\t\tlNonOptions.push item\n\t\telse\n\t\t\tcroak \"arg not an array or hash\"\n\n\tif (lFlags.length > 0)\n\t\tlOptions.push \"-#{lFlags.join('')}\"\n\n\t# --- join the parts\n\tlAllParts = [cmd, lOptions..., lNonOptions...]\n\treturn lAllParts.join(' ');\n\n# ---------------------------------------------------------------------------\n\nexport chomp = (str) =>\n\t# --- Remove trailing \\n if present\n\n\tlen = str.length\n\tif (str[len-1] == '\\n')\n\t\tif (str[len-2] == '\\r')\n\t\t\treturn str.substring(0, len-2)\n\t\telse\n\t\t\treturn str.substring(0, len-1)\n\telse\n\t\treturn str\n\n# ---------------------------------------------------------------------------\n#   isEmpty\n#      - string is whitespace, array has no elements, hash has no keys\n\nexport isEmpty = (x) =>\n\n\tif (x == undef) || (x == null)\n\t\treturn true\n\tif (typeof x == 'string')\n\t\treturn x.match(/^\\s*$/)\n\tif Array.isArray(x)\n\t\treturn (x.length == 0)\n\tif (typeof x == 'object')\n\t\treturn Object.keys(x).length == 0\n\telse\n\t\treturn false\n\n# ---------------------------------------------------------------------------\n#   nonEmpty\n#      - string has non-whitespace, array has elements, hash has keys\n\nexport nonEmpty = (x) =>\n\n\treturn ! isEmpty(x)\n\n# ---------------------------------------------------------------------------\n#   deepCopy - deep copy an array or object\n\nexport deepCopy = (obj) =>\n\n\tif (obj == undef)\n\t\treturn undef\n\tobjStr = JSON.stringify(obj)\n\ttry\n\t\tnewObj = JSON.parse(objStr)\n\tcatch err\n\t\tthrow new Error(\"ERROR: err.message\")\n\n\treturn newObj\n\n# ---------------------------------------------------------------------------\n\nexport add_s = (n) =>\n\n\tif (n == 1)\n\t\treturn ''\n\telse\n\t\treturn 's'\n\n# ---------------------------------------------------------------------------\n\nexport keys = (lHashes...) =>\n\n\tlKeys = []\n\tfor h in lHashes\n\t\tfor key in Object.keys(h)\n\t\t\tif ! lKeys.includes(key)\n\t\t\t\tlKeys.push key\n\treturn lKeys\n\n# ---------------------------------------------------------------------------\n\nexport hasKey = (obj, key) =>\n\n\treturn obj.hasOwnProperty(key)\n\n# ---------------------------------------------------------------------------\n# --- Removes key, but returns associated value\n\nexport extractKey = (h, key) =>\n\n\tassert isHash(h), \"not a hash\"\n\tassert isString(key), \"key not a string\"\n\tval = h[key]     # might be undef\n\tdelete h[key]\n\treturn val\n\n# ---------------------------------------------------------------------------\n\nexport removeKeys = (item, lKeys) =>\n\n\tassert isArray(lKeys), \"not an array\"\n\t[type, subtype] = jsType(item)\n\tswitch type\n\t\twhen 'array'\n\t\t\tfor subitem in item\n\t\t\t\tremoveKeys subitem, lKeys\n\t\twhen 'hash', 'object'\n\t\t\tfor key in lKeys\n\t\t\t\tif item.hasOwnProperty(key)\n\t\t\t\t\tdelete item[key]\n\t\t\tfor prop,value of item\n\t\t\t\tremoveKeys value, lKeys\n\treturn item\n\n# ---------------------------------------------------------------------------\n\nexport hasAllKeys = (obj, lKeys...) =>\n\n\tfor key in lKeys\n\t\tif ! hasKey(obj, key)\n\t\t\treturn false\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport hasAnyKey = (obj, lKeys...) =>\n\n\tfor key in lKeys\n\t\tif hasKey(obj, key)\n\t\t\treturn true\n\treturn false\n\n# ---------------------------------------------------------------------------\n\nexport addNewKey = (h, key, value) ->\n\n\tassert !hasKey(h, key), \"hash has key #{key}\"\n\th[key] = value\n\treturn h\n\n# ---------------------------------------------------------------------------\n\nexport subkeys = (obj) =>\n\n\tlSubKeys = []\n\tfor key in keys(obj)\n\t\th = obj[key]\n\t\tfor subkey in keys(h)\n\t\t\tif !lSubKeys.includes(subkey)\n\t\t\t\tlSubKeys.push subkey\n\treturn lSubKeys\n\n# ---------------------------------------------------------------------------\n\nexport hslice = (h, lKeys) =>\n\n\thResult = {}\n\tfor key in lKeys\n\t\thResult[key] = h[key]\n\treturn hResult\n\n# ---------------------------------------------------------------------------\n\nexport samelist = (lItems1, lItems2) =>\n\n\tassert isArray(lItems1), \"arg 1 not an array\"\n\tassert isArray(lItems2), \"arg 2 not an array\"\n\tif (lItems1.length != lItems2.length)\n\t\treturn false\n\tfor item in lItems1\n\t\tif ! lItems2.includes item\n\t\t\treturn false\n\tfor item in lItems2\n\t\tif ! lItems1.includes item\n\t\t\treturn false\n\treturn true\n\n\n# ---------------------------------------------------------------------------\n\nexport fromJSON = (strJson) =>\n\t# --- string to data structure\n\n\treturn JSON.parse(strJson)\n\n# ---------------------------------------------------------------------------\n\nexport toJSON = (hJson, hOptions={}) =>\n\t# --- data structure to string\n\n\t{useTabs, replacer} = getOptions hOptions, {\n\t\tuseTabs: true\n\t\treplacer: undef\n\t\t}\n\tif useTabs\n\t\treturn JSON.stringify(hJson, replacer, \"\\t\")\n\telse\n\t\treturn JSON.stringify(hJson, replacer, 3)\n\n# ---------------------------------------------------------------------------\n\nexport deepEqual = (a, b) =>\n\n\ttry\n\t\tassertLib.deepEqual(a, b)\n\tcatch error\n\t\tif (error.name == \"AssertionError\")\n\t\t\treturn false\n\t\tthrow error\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport isHashComment = (line) =>\n\t# --- true if:\n\t#        - 1st non-ws char is a '#'\n\t#        - '#' is either followed by a ws char or by nothing\n\n\tlMatches = line.match(///^\n\t\t\t(\\s*)\n\t\t\t\\#\n\t\t\t(\\s*)\n\t\t\t(.*)\n\t\t\t$///)\n\tif defined(lMatches)\n\t\t[_, prefix, ws, text] = lMatches\n\t\tif (text.length == 0)\n\t\t\treturn {prefix, ws, text: ''}\n\t\telse if (ws.length > 0)\n\t\t\treturn {prefix, ws, text: text.trim()}\n\t\telse\n\t\t\treturn undef\n\telse\n\t\treturn undef\n\n# ---------------------------------------------------------------------------\n\nexport spaces = (n) =>\n\n\treturn \" \".repeat(n)\n\n# ---------------------------------------------------------------------------\n\nexport tabs = (n) =>\n\n\treturn \"\\t\".repeat(n)\n\n# ---------------------------------------------------------------------------\n# --- valid options:\n#        char - char to use on left and right\n#        buffer - num spaces around text when char <> ' '\n\nexport centeredText = (text, width, hOptions={}) =>\n\n\t{char, numBuffer} = getOptions hOptions, {\n\t\tchar: ' '\n\t\tnumBuffer: 2\n\t\t}\n\tassert isInteger(width), \"width = #{OL(width)}\"\n\ttotSpaces = width - text.length\n\tif (totSpaces <= 0)\n\t\treturn text\n\tnumLeft = Math.floor(totSpaces / 2)\n\tnumRight = totSpaces - numLeft\n\tif (char == ' ')\n\t\treturn spaces(numLeft) + text + spaces(numRight)\n\telse\n\t\tbuf = ' '.repeat(numBuffer)\n\t\tleft = char.repeat(numLeft - numBuffer)\n\t\tright = char.repeat(numRight - numBuffer)\n\t\tnumLeft -= numBuffer\n\t\tnumRight -= numBuffer\n\t\treturn left + buf + text + buf + right\n\n# ---------------------------------------------------------------------------\n\nexport delimitBlock = (block, hOptions={}) =>\n\n\t{width, label} = getOptions hOptions, {\n\t\twidth: 40\n\t\tlabel: undef\n\t\t}\n\tstr = '-'.repeat(width)\n\tif defined(label)\n\t\theader = centeredText(label, width, {char: '-'})\n\telse\n\t\theader = str\n\tif (block == '')\n\t\treturn [header, str].join(\"\\n\")\n\telse\n\t\treturn [header, block, str].join(\"\\n\")\n\n# ---------------------------------------------------------------------------\n#   rtrunc - strip nChars chars from right of a string\n\nexport rtrunc = (str, nChars) =>\n\n\treturn str.substring(0, str.length - nChars)\n\n# ---------------------------------------------------------------------------\n#   ltrunc - strip nChars chars from left of a string\n\nexport ltrunc = (str, nChars) =>\n\n\treturn str.substring(nChars)\n\n# ---------------------------------------------------------------------------\n\nexport CWS = (str) =>\n\n\tassert isString(str), \"CWS(): parameter not a string\"\n\treturn str.trim().replace(/\\s+/sg, ' ')\n\n# ---------------------------------------------------------------------------\n\nexport trimArray = (lLines) =>\n\n\t# --- lLines is modified in place, but we still return a ref\n\twhile (lLines.length > 0) && isEmpty(lLines[0])\n\t\tlLines.shift()\n\twhile (lLines.length > 0) && isEmpty(lLines[lLines.length-1])\n\t\tlLines.pop()\n\treturn lLines\n\n# ---------------------------------------------------------------------------\n\nexport removeEmptyLines = (lLines) =>\n\n\tassert isArrayOfStrings(lLines), \"Not an array of strings: #{OL(lLines)}\"\n\treturn lLines.filter (line) => nonEmpty(line)\n\n# ---------------------------------------------------------------------------\n\nexport CWSALL = (blockOrArray) =>\n\n\tif isArrayOfStrings(blockOrArray)\n\t\tlNewArray = for line in blockOrArray\n\t\t\tCWS(line)\n\t\treturn trimArray(lNewArray)\n\telse if isString(blockOrArray)\n\t\tlNewArray = for line in toArray(blockOrArray)\n\t\t\tCWS(line)\n\t\treturn toBlock(trimArray(lNewArray))\n\telse\n\t\tthrow new Error(\"Bad param: #{OL(blockOrArray)}\")\n\n# ---------------------------------------------------------------------------\n\nexport splitPrefix = (line) =>\n\n\tassert isString(line), \"non-string #{OL(line)}\"\n\tline = rtrim(line)\n\tlMatches = line.match(/^(\\s*)(.*)$/)\n\treturn [lMatches[1], lMatches[2]]\n\n# ---------------------------------------------------------------------------\n\nexport hasPrefix = (line) =>\n\n\tassert isString(line), \"non-string #{OL(line)}\"\n\tlMatches = line.match(/^(\\s*)/)\n\treturn (lMatches[1].length > 0)\n\n# ---------------------------------------------------------------------------\n#    tabify - convert leading spaces to TAB characters\n#             if numSpaces is not defined, then the first line\n#             that contains at least one space sets it\n# --- Works on both blocks and arrays - returns same kind of item\n\nexport tabify = (item, numSpaces=undef) =>\n\n\tlLines = []\n\tfor str in toArray(item)\n\t\t[prefix, theRest] = splitPrefix(str)\n\t\tprefixLen = prefix.length\n\t\tif prefixLen == 0\n\t\t\tlLines.push theRest\n\t\telse\n\t\t\tassert (prefix.indexOf('\\t') == -1), \"found TAB\"\n\t\t\tif numSpaces == undef\n\t\t\t\tnumSpaces = prefixLen\n\t\t\tassert (prefixLen % numSpaces == 0), \"Bad prefix\"\n\t\t\tlevel = prefixLen / numSpaces\n\t\t\tlLines.push '\\t'.repeat(level) + theRest\n\tif isArray(item)\n\t\tresult = item\n\telse\n\t\tresult = toBlock(lLines)\n\treturn result\n\n# ---------------------------------------------------------------------------\n\nexport untabify = (str, numSpaces=3) =>\n\n\treturn str.replace(/\\t/g, ' '.repeat(numSpaces))\n\n# ---------------------------------------------------------------------------\n\nexport forEachLine = (item, func) =>\n\t# --- callback to func() gets arguments:\n\t#        line - each line\n\t#        hInfo - with keys lineNum and nextLine\n\t# Return value should be:\n\t#    true - to stop prematurely\n\t#    false - to continue\n\n\tlInput = toArray(item)\n\tfor line,i in lInput\n\t\tresult = func(line, {\n\t\t\tlineNum: i+1\n\t\t\tnextLine: lInput[i+1]\n\t\t\t})\n\t\tassert isBoolean(result), \"result must be a boolean, got #{OL(result)}\"\n\t\tif result   # return of true causes premature exit\n\t\t\treturn\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport mapEachLine = (item, func) =>\n\t# --- callback to func() gets arguments:\n\t#        line - each line\n\t#        hInfo - with keys lineNum and nextLine\n\t#     callback return value should be:\n\t#        undef - to skip this line\n\t#        else value to include\n\n\tlLines = []    # return value\n\tlInput = toArray(item)\n\tfor line,i in lInput\n\t\tresult = func(line, {\n\t\t\tlineNum: i+1\n\t\t\tnextLine: lInput[i+1]\n\t\t\t})\n\t\tif defined(result)\n\t\t\tlLines.push result\n\tif isArray(item)\n\t\treturn lLines\n\telse\n\t\treturn toBlock(lLines)\n\n# ---------------------------------------------------------------------------\n\nexport qStr = (x) =>\n\t# --- x must be string or undef\n\t#     puts quotes around a string\n\n\tif notdefined(x)\n\t\treturn 'undef'\n\telse if isString(x)\n\t\treturn \"'#{x}'\"\n\telse\n\t\tthrow new Error(\"quoteStr(): Not a string or undef\")\n\n# ---------------------------------------------------------------------------\n\nexport hasChar = (str, ch) =>\n\n\tassert isString(str), \"Not a string: #{str}\"\n\treturn (str.indexOf(ch) >= 0)\n\n# ---------------------------------------------------------------------------\n\nexport oneof = (word, lWords...) =>\n\n\treturn (lWords.indexOf(word) >= 0)\n\n# ---------------------------------------------------------------------------\n# see: https://stackoverflow.com/questions/40922531/how-to-check-if-a-javascript-function-is-a-constructor\n\nmyHandler = {\n\tconstruct: () ->\n\t\treturn myHandler\n\t} # Must return ANY object, so reuse one\n\nexport isConstructor = (x) =>\n\tif (typeof x != 'function')\n\t\treturn false\n\ttry\n\t\treturn !!(new (new Proxy(x, myHandler))())\n\tcatch e\n\t\treturn false\n\n# ---------------------------------------------------------------------------\n\nexport isNonEmptyString = (x) =>\n\n\treturn isString(x) && ! x.match(/^\\s*$/)\n\n# ---------------------------------------------------------------------------\n\nexport isNonEmptyArray = (x) =>\n\n\treturn isArray(x) && (x.length > 0)\n\n# ---------------------------------------------------------------------------\n\nexport isNonEmptyHash = (x) =>\n\n\treturn isHash(x) && (keys(x).length > 0)\n\n# ---------------------------------------------------------------------------\n\nexport isIdentifier = (x) =>\n\n\tif ! isString(x)\n\t\treturn false\n\treturn x.match(///^\n\t\t\t[A-Za-z_]\n\t\t\t[A-Za-z0-9_]*\n\t\t\t$///)\n\n# ---------------------------------------------------------------------------\n\nexport isFunctionName = (x) =>\n\n\tif isString(x) && lMatches = x.match(///^\n\t\t\t( [A-Za-z_] [A-Za-z0-9_]* )\n\t\t\t(?:\n\t\t\t\t\\.             # allow class method names\n\t\t\t\t( [A-Za-z_] [A-Za-z0-9_]* )\n\t\t\t\t)?\n\t\t\t$///)\n\t\t[_, first, second] = lMatches\n\t\tif nonEmpty(second)\n\t\t\treturn [first, second]\n\t\telse\n\t\t\treturn [first]\n\telse\n\t\treturn undef\n\n# ---------------------------------------------------------------------------\n\nexport isNumber = (x, hOptions=undef) =>\n\n\tif (jsType(x)[0] != 'number')\n\t\treturn false\n\tif defined(hOptions)\n\t\tassert isHash(hOptions), \"2nd arg not a hash: #{OL(hOptions)}\"\n\t\t{min, max} = hOptions\n\t\tif defined(min) && (x < min)\n\t\t\treturn false\n\t\tif defined(max) && (x > max)\n\t\t\treturn false\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport isInteger = (x, hOptions={}) =>\n\n\tif (typeof x == 'number')\n\t\tresult = Number.isInteger(x)\n\telse if (x instanceof Number)\n\t\tresult = Number.isInteger(x.valueOf())\n\telse\n\t\treturn false\n\n\tif result\n\t\tif defined(hOptions.min) && (x < hOptions.min)\n\t\t\tresult = false\n\t\tif defined(hOptions.max) && (x > hOptions.max)\n\t\t\tresult = false\n\treturn result\n\n# ---------------------------------------------------------------------------\n\nexport isArrayOfArrays = (lItems, size=undef) =>\n\t# --- undefined items are allowed\n\n\tif ! isArray(lItems)\n\t\treturn false\n\tfor item in lItems\n\t\tif defined(item)\n\t\t\tif ! isArray(item)\n\t\t\t\treturn false\n\t\t\tif defined(size) && (item.length != size)\n\t\t\t\treturn false\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport isArrayOfHashes = (lItems) =>\n\t# --- undefined items are allowed\n\n\tif ! isArray(lItems)\n\t\treturn false\n\tfor item in lItems\n\t\tif defined(item) && ! isHash(item)\n\t\t\treturn false\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport sortArrayOfHashes = (lHashes, key) =>\n\n\tassert isArrayOfHashes(lHashes), \"Not an array of hashes\"\n\n\t# --- NOTE: works whether values are strings or numbers\n\tcompareFunc = (a, b) =>\n\t\tif a[key] < b[key]\n\t\t\treturn -1\n\t\telse if a[key] > b[key]\n\t\t\treturn 1\n\t\telse\n\t\t\treturn 0\n\tlHashes.sort(compareFunc)\n\n\t# --- NOTE: array is sorted in place, but sometimes\n\t#           it's useful if we return a ref to it anyway\n\treturn lHashes\n\n# ---------------------------------------------------------------------------\n\nexport sortedArrayOfHashes = (lHashes, key) =>\n\n\tassert isArrayOfHashes(lHashes), \"Not an array of hashes\"\n\n\t# --- NOTE: works whether values are strings or numbers\n\tcompareFunc = (a, b) =>\n\t\tif a[key] < b[key]\n\t\t\treturn -1\n\t\telse if a[key] > b[key]\n\t\t\treturn 1\n\t\telse\n\t\t\treturn 0\n\treturn lHashes.toSorted(compareFunc)\n\n# ---------------------------------------------------------------------------\n\nexport isArrayOfStrings = (lItems) =>\n\t# --- undefined items are allowed\n\n\tif ! isArray(lItems)\n\t\treturn false\n\tfor item in lItems\n\t\tif defined(item) && ! isString(item)\n\t\t\treturn false\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport words = (lStrings...) =>\n\n\tlWords = []\n\tfor str in lStrings\n\t\tstr = str.trim()\n\t\tif (str != '')\n\t\t\tfor word in str.split(/\\s+/)\n\t\t\t\tlWords.push word\n\treturn lWords\n\n# ---------------------------------------------------------------------------\n# --- e.g. mkword([null, ['4','2'], null) returns '42'\n\nexport mkword = (lStuff...) =>\n\n\tlParts = []\n\tfor thing in lStuff\n\t\tif isString(thing)\n\t\t\tlParts.push thing\n\t\telse if isArray(thing)\n\t\t\tresult = mkword(thing...)\n\t\t\tif nonEmpty(result)\n\t\t\t\tlParts.push result\n\treturn lParts.join('')\n\n# ---------------------------------------------------------------------------\n\nexport isIterable = (obj) =>\n\n\tif (obj == undef) || (obj == null)\n\t\treturn false\n\treturn (typeof obj[Symbol.iterator] == 'function')\n\n# ---------------------------------------------------------------------------\n# --- always return hash with the same set of keys!\n#     values should be a string, true, false or undef\n\nexport analyzeObj = (obj, hOptions={}) =>\n\n\t{maxStrLen} = getOptions hOptions, {\n\t\tmaxStrLen: 22\n\t\t}\n\n\ttype = typeof obj\n\tlType = jsType(obj)\n\tif defined(lType[1])\n\t\tjst = lType.join('/')\n\telse\n\t\tjst = lType[0]\n\th = {\n\t\tjsType: jst\n\t\ttype\n\t\tisArr: Array.isArray(obj)\n\t\tisIter: isIterable(obj)\n\t\tobjType: ''\n\t\tobjName: ''\n\t\tconName: ''\n\t\tstr: ''\n\t\t}\n\n\tif notdefined(obj)\n\t\treturn h\n\n\tif defined(obj.constructor)\n\t\th.conName = obj.constructor.name\n\n\tif defined(obj.toString)\n\t\tstr = truncateStr(CWS(obj.toString()), maxStrLen)\n\t\tif lMatches = str.match(///^\n\t\t\t\t\\[ object \\s+\n\t\t\t\t([A-Za-z]+)\n\t\t\t\t\\]\n\t\t\t\t///)\n\t\t\t[_, objType] = lMatches\n\t\t\tif (objType == 'Generator')\n\t\t\t\th.objType = 'iterator'\n\t\t\telse\n\t\t\t\th.objType = objType.toLowerCase()\n\t\telse if lMatches = str.match(///^\n\t\t\t\tclass \\s*\n\t\t\t\t(?:\n\t\t\t\t\t([A-Za-z_][A-Za-z0-9_]*)\n\t\t\t\t\t\\s*\n\t\t\t\t\t)?\n\t\t\t\t\\{\n\t\t\t\t///)\n\t\t\th.objType = 'class'\n\t\t\th.objName = lMatches[1] || ''\n\t\telse if lMatches = str.match(///^\n\t\t\t\t\\s*\n\t\t\t\tfunction \\s* (\\*)?\n\t\t\t\t\\s*\n\t\t\t\t(?:\n\t\t\t\t\t([A-Za-z_][A-Za-z0-9_]*)\n\t\t\t\t\t\\s*\n\t\t\t\t\t)?\n\t\t\t\t\\(\n\t\t\t\t///)\n\t\t\t[_, star, name] = lMatches\n\t\t\th.objType = if (star == '*') then 'generator' else 'function'\n\t\t\th.objName = lMatches[1] || ''\n\t\th.str = str\n\treturn h\n\n# ---------------------------------------------------------------------------\n\nexport hasClassConstructor = (obj) =>\n\n\tcon = obj?.constructor\n\tif notdefined(con) || notdefined(con.toString)\n\t\treturn false\n\treturn con.toString().startsWith('class')\n\n# ---------------------------------------------------------------------------\n\nexport isClass = (obj) =>\n\n\treturn (typeof obj == 'function') && obj.toString().startsWith('class')\n\n# ---------------------------------------------------------------------------\n\nexport className = (item) =>\n\t# --- item can be a class or an object\n\n\tif isClass(item)\n\t\tif lMatches = item.toString().match(/class\\s+(\\w+)/)\n\t\t\treturn lMatches[1]\n\t\telse\n\t\t\tthrow new Error(\"className(): Bad input class\")\n\telse if isObject(item)\n\t\treturn item.constructor.name\n\telse\n\t\treturn undef\n\n# ---------------------------------------------------------------------------\n\nexport isScalar = (x) =>\n\n\treturn isNumber(x) || isString(x) || isBoolean(x)\n\n# ---------------------------------------------------------------------------\n#   blockToArray - split a block into lines\n\nexport blockToArray = (block) =>\n\n\tif (block == undef) || (block == '')\n\t\treturn []\n\telse\n\t\tassert isString(block), \"block is #{OL(block)}\"\n\t\tlLines = block.split(/\\r?\\n/)\n\t\treturn lLines\n\n# ---------------------------------------------------------------------------\n#   arrayToBlock - block and lines in block will have no trailing whitespace\n\nexport arrayToBlock = (lLines, hEsc=undef) =>\n\n\tif (lLines == undef)\n\t\treturn ''\n\tassert isArray(lLines), \"lLines is not an array\"\n\tlResult = []\n\tfor line in lLines\n\t\tif defined(line)\n\t\t\tlResult.push rtrim(line)\n\tif lResult.length == 0\n\t\treturn ''\n\telse\n\t\tresult = lResult.join(\"\\n\")\n\t\tif defined(hEsc)\n\t\t\tresult = escapeStr(result, hEsc)\n\t\treturn result\n\n# ---------------------------------------------------------------------------\n\nexport toBlock = (item) =>\n\n\tif isString(item)\n\t\treturn item\n\telse\n\t\treturn arrayToBlock(item)\n\n# ---------------------------------------------------------------------------\n\nexport toArray = (item) =>\n\n\tif isArray(item)\n\t\t# --- We need to split any strings containing a \\n\n\t\tlLines = []\n\t\tfor line in item\n\t\t\tif hasChar(line, \"\\n\")\n\t\t\t\tfor str in line.split(/\\r?\\n/)\n\t\t\t\t\tlLines.push str\n\t\t\telse\n\t\t\t\tlLines.push line\n\t\treturn lLines\n\telse\n\t\treturn blockToArray(item)\n\n# ---------------------------------------------------------------------------\n\nexport prefixBlock = (block, prefix) =>\n\n\tlLines = for line in toArray(block)\n\t\t\"#{prefix}#{line}\"\n\treturn toBlock(lLines)\n\n# ---------------------------------------------------------------------------\n#   rtrim - strip trailing whitespace\n\nexport rtrim = (line) =>\n\n\tassert isString(line), \"not a string: #{OL(line)}\"\n\tlMatches = line.match(/\\s+$/)\n\tif defined(lMatches)\n\t\tn = lMatches[0].length   # num chars to remove\n\t\treturn line.substring(0, line.length - n)\n\telse\n\t\treturn line\n\n# ---------------------------------------------------------------------------\n\nexport hashFromString = (str) =>\n\n\tassert isString(str), \"not a string: #{OL(str)}\"\n\th = {}\n\tfor word in words(str)\n\t\tif lMatches = word.match(///^\n\t\t\t\t(\\!)?                    # negate value\n\t\t\t\t([A-Za-z][A-Za-z_0-9]*)  # identifier\n\t\t\t\t(?:\n\t\t\t\t\t(=)\n\t\t\t\t\t(.*)\n\t\t\t\t\t)?\n\t\t\t\t$///)\n\t\t\t[_, neg, ident, eq, str] = lMatches\n\t\t\tif nonEmpty(eq)\n\t\t\t\tassert isEmpty(neg), \"negation with string value\"\n\n\t\t\t\t# --- check if str is a valid number\n\t\t\t\tnum = parseFloat(str)\n\t\t\t\tif Number.isNaN(num)\n\t\t\t\t\t# --- TO DO: interpret backslash escapes\n\t\t\t\t\th[ident] = str\n\t\t\t\telse\n\t\t\t\t\th[ident] = num\n\t\t\telse if neg\n\t\t\t\th[ident] = false\n\t\t\telse\n\t\t\t\th[ident] = true\n\t\telse\n\t\t\tthrow new Error(\"Invalid word #{OL(word)}\")\n\treturn h\n\n# ---------------------------------------------------------------------------\n\nexport getOptions = (options=undef, hDefault={}) =>\n\n\t[type, subtype] = jsType(options)\n\tswitch type\n\t\twhen undef\n\t\t\thOptions = {}\n\t\twhen 'hash'\n\t\t\thOptions = options\n\t\twhen 'string'\n\t\t\thOptions = hashFromString(options)\n\t\telse\n\t\t\tthrow new Error(\"options not hash or string: #{OL(options)}\")\n\n\t# --- Fill in defaults for missing values\n\tfor own key,value of hDefault\n\t\tif ! hOptions.hasOwnProperty(key) && defined(value)\n\t\t\thOptions[key] = value\n\n\treturn hOptions\n\n# ---------------------------------------------------------------------------\n\nexport range = (n) =>\n\n\treturn [0..n-1]\n\n# ---------------------------------------------------------------------------\n\nexport rev_range = (n) =>\n\n\treturn [0..n-1].reverse()\n\n# ---------------------------------------------------------------------------\n\nexport warn = (msg) =>\n\n\tconsole.log \"WARNING: #{msg}\"\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport uniq = (lItems) =>\n\n\treturn [...new Set(lItems)]\n\n# ---------------------------------------------------------------------------\n\nexport extractMatches = (line, regexp, convertFunc=undef) =>\n\n\tlStrings = [...line.matchAll(regexp)]\n\tlStrings = for str in lStrings\n\t\tstr[0]\n\tif defined(convertFunc)\n\t\tlConverted = for str in lStrings\n\t\t\tconvertFunc(str)\n\t\treturn lConverted\n\telse\n\t\treturn lStrings\n\n# ---------------------------------------------------------------------------\n\nexport getTimeStr = (date=undef) =>\n\n\tif date == undef\n\t\tdate = new Date()\n\treturn date.toLocaleTimeString('en-US')\n\n# ---------------------------------------------------------------------------\n\nexport getDateStr = (date=undef) =>\n\n\tif date == undef\n\t\tdate = new Date()\n\treturn date.toLocaleDateString('en-US')\n\n# ---------------------------------------------------------------------------\n\nexport timestamp = (dateStr=undef, locale='en-US') =>\n\n\tif defined(dateStr)\n\t\tdate = new Date(dateStr)\n\telse\n\t\tdate = new Date()\n\tstr1 = date.toLocaleDateString(locale)\n\tstr2 = date.toLocaleTimeString(locale)\n\treturn \"#{str1} #{str2}\"\n\n# ---------------------------------------------------------------------------\n\nexport msSinceEpoch = (dateStr=undef) =>\n\n\tif defined(dateStr)\n\t\tdate = new Date(dateStr)\n\telse\n\t\tdate = new Date()\n\treturn date.getTime()\n\n# ---------------------------------------------------------------------------\n\nexport formatDate = (dateStr=undef, dateStyle='medium', locale='en-US') =>\n\n\tif defined(dateStr)\n\t\tdate = new Date(dateStr)\n\telse\n\t\tdate = new Date()\n\treturn new Intl.DateTimeFormat(locale, {dateStyle}).format(date)\n\n# ---------------------------------------------------------------------------\n\nexport getDumpStr = (label, str, hOptions={}) =>\n\t# --- Valid options:\n\t#        escape - escape space & TAB chars\n\t#        width\n\n\tlLines = []\n\t{escape, width} = getOptions(hOptions, {\n\t\tescape: false\n\t\twidth: 42\n\t\t})\n\n\tif isString(str)\n\t\tstringified = false\n\telse if defined(str)\n\t\tstr = JSON.stringify(str, undef, 3)\n\t\tstringified = true\n\telse\n\t\tstr = 'undef'\n\t\tstringified = true\n\n\tlLines.push '='.repeat(width)\n\tlLines.push centeredText(label, width)\n\n\tif stringified\n\t\tlLines.push '-'.repeat(width)\n\telse\n\t\tlLines.push '='.repeat(width)\n\n\tif escape\n\t\tlLines.push escapeStr(str, hEscNoNL)\n\telse\n\t\tlLines.push str.replace(/\\t/g, \"   \")\n\tlLines.push '='.repeat(width)\n\treturn lLines.join(\"\\n\")\n\n# ---------------------------------------------------------------------------\n\nexport eachCharInString = (str, func) =>\n\n\tfor ch in Array.from(str)\n\t\tif !func(ch)\n\t\t\treturn false\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport DUMP = (label, obj, hOptions={}) =>\n\n\tassert isString(label), \"no label\"\n\tconsole.log getDumpStr(label, obj, hOptions)\n\treturn\n\n# ---------------------------------------------------------------------------\n# in callback set():\n#    - return undef to NOT set\n#    - return value (possibly changed) to set\n# in callback get():\n#    - return (possibly changed) value\n# ---------------------------------------------------------------------------\n\nexport getProxy = (obj, hCallbacks) =>\n\t# --- Keys in hFuncs can be: 'get','set'\n\n\thHandlers = {}\n\tif hCallbacks.hasOwnProperty('set')\n\t\thHandlers.set = (obj, prop, value) ->\n\t\t\tnewval = hCallbacks.set(obj, prop, value)\n\t\t\tif defined(newval)   # don't set if callback returns false\n\t\t\t\tReflect.set(obj, prop, newval)\n\t\t\treturn true\n\n\tif hCallbacks.hasOwnProperty('get')\n\t\thHandlers.get = (obj, prop) ->\n\t\t\tvalue = Reflect.get(obj, prop)\n\t\t\treturn hCallbacks.get(obj, prop, value)\n\n\tif isEmpty(hHandlers)\n\t\treturn obj\n\telse\n\t\treturn new Proxy(obj, hHandlers)\n\n# ---------------------------------------------------------------------------\n\nexport sleep = (secs) =>\n\n\treturn new Promise((r) => setTimeout(r, 1000 * secs))\n\n# ---------------------------------------------------------------------------\n\nhTimers = {}    # { <id> => <timer>, ... }\n\nexport schedule = (secs, keyVal, func, lArgs...) =>\n\n\tassert isFunction(func), \"not a function: #{OL(func)}\"\n\n\t# --- if there's currently a timer with the same keyVal, kill it\n\tif defined(timer = hTimers[keyVal])\n\t\tclearTimeout timer\n\thTimers[keyVal] = setTimeout(func, 1000 * secs, lArgs...)\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport hit = (pct) ->\n\n\treturn Math.random() * 100 < pct\n\n# ---------------------------------------------------------------------------\n\nexport choose = (lItems) ->\n\n\treturn lItems[Math.floor(Math.random()*lItems.length)]\n\n# ---------------------------------------------------------------------------\n# --- shuffle an array in place, return ref to shuffled array\n\nexport shuffle = (lItems) ->\n\n\ti = lItems.length\n\n\t# --- While there remain elements to shuffle.\n\twhile (i > 0)\n\n\t\t# --- Pick a remaining element.\n\t\ti2 = Math.floor(Math.random() * i)\n\t\ti -= 1\n\n\t\t# --- And swap it with the current element.\n\t\t[lItems[i], lItems[i2]] = [lItems[i2], lItems[i]];\n\n\treturn lItems\n\n# ---------------------------------------------------------------------------\n\nexport pad = (x, width, hOptions={}) =>\n\t# --- hOptions.justify can be 'left','center','right'\n\n\t{decPlaces, justify, truncate} = getOptions hOptions, {\n\t\tdecPlaces: undef\n\t\tjustify: undef\n\t\ttruncate: false\n\t\t}\n\t[type, subtype] = jsType(x)\n\tswitch type\n\t\twhen undef\n\t\t\tstr = 'undef'\n\t\t\tif notdefined(justify)\n\t\t\t\tjustify = 'left'\n\t\twhen 'string'\n\t\t\tstr = x\n\t\t\tif notdefined(justify)\n\t\t\t\tjustify = 'left'\n\t\twhen 'boolean'\n\t\t\tif x\n\t\t\t\tstr = 'true'\n\t\t\telse\n\t\t\t\tstr = 'false'\n\t\t\tif notdefined(justify)\n\t\t\t\tjustify = 'center'\n\t\twhen 'number'\n\t\t\tif defined(decPlaces)\n\t\t\t\tstr = x.toFixed(decPlaces)\n\t\t\telse if (subtype == 'integer')\n\t\t\t\tstr = x.toString()\n\t\t\telse\n\t\t\t\tstr = x.toFixed(2)\n\t\t\tif notdefined(justify)\n\t\t\t\tjustify = 'right'\n\t\twhen 'object'\n\t\t\tstr = '[Object]'\n\t\t\tif notdefined(justify)\n\t\t\t\tjustify = 'left'\n\t\telse\n\t\t\tcroak \"Invalid value: #{OL(x)}\"\n\n\ttoAdd = width - str.length\n\tif (toAdd == 0)\n\t\treturn str\n\telse if (toAdd < 0)\n\t\tif truncate\n\t\t\treturn str.substring(0, width)\n\t\telse\n\t\t\treturn str\n\n\tswitch justify\n\t\twhen 'left'\n\t\t\treturn str + ' '.repeat(toAdd)\n\t\twhen 'center'\n\t\t\tlPad = Math.floor(toAdd / 2)\n\t\t\trPad = toAdd - lPad\n\t\t\treturn \"#{' '.repeat(lPad)}#{str}#{' '.repeat(rPad)}\"\n\t\twhen 'right'\n\t\t\treturn ' '.repeat(toAdd) + str\n\t\telse\n\t\t\tcroak \"Invalid value for justify: #{justify}\"\n\n# ---------------------------------------------------------------------------\n\nexport forEachItem = (iter, func, hContext={}) =>\n\t# --- func() gets (item, hContext)\n\t#        hContext includes key _index\n\t#     return value from func() is added to\n\t#        returned array if defined\n\t#     if func() throws\n\t#        thrown strings are interpreted as\n\t#           \"stop\" - stop the iteration\n\t#           any other string - an error\n\t#           non-string - is rethrown\n\n\tassert isIterable(iter), \"not an iterable\"\n\tlItems = []\n\tindex = 0\n\tfor item from iter\n\t\thContext._index = index\n\t\tindex += 1\n\t\ttry\n\t\t\tresult = func(item, hContext)\n\t\t\tif defined(result)\n\t\t\t\tlItems.push result\n\t\tcatch err\n\t\t\tif isString(err)\n\t\t\t\tif (err == 'stop')\n\t\t\t\t\treturn lItems\n\t\t\t\telse\n\t\t\t\t\tthrow new Error(\"forEachItem: Bad throw '#{err}'\")\n\t\t\telse\n\t\t\t\tthrow err    # rethrow the error\n\treturn lItems\n\n# ---------------------------------------------------------------------------\n\nexport addToHash = (obj, lIndexes, value) =>\n\n\t# --- Allow passing a simple string or integer\n\tif isString(lIndexes) || isInteger(lIndexes)\n\t\tlIndexes = [lIndexes]\n\telse\n\t\tassert isArray(lIndexes), \"Bad indexes: #{OL(lIndexes)}\"\n\n\tassert nonEmpty(lIndexes), \"empty lIndexes\"\n\tkey = lIndexes.pop()\n\n\tsubobj = obj\n\tfor index in lIndexes\n\t\tif defined(obj[index])\n\t\t\tsubobj = subobj[index]\n\t\telse if isNumber(index) || isString(index)\n\t\t\tsubobj[index] = {}\n\t\t\tsubobj = subobj[index]\n\t\telse\n\t\t\tcroak \"Bad index: #{OL(index)}\"\n\tsubobj[key] = value\n\treturn obj\n\n# ---------------------------------------------------------------------------\n\nexport flattenToHash = (x) =>\n\n\tif isHash(x)\n\t\treturn x\n\telse if isArray(x)\n\t\thResult = {}\n\t\tfor item in x\n\t\t\tif isHash(item)\n\t\t\t\tfor own key,value of item\n\t\t\t\t\thResult[key] = value\n\t\t\telse if isArray(item)\n\t\t\t\tfor subitem in item\n\t\t\t\t\tfor own key,value of flattenToHash(subitem)\n\t\t\t\t\t\thResult[key] = value\n\t\t\telse\n\t\t\t\tcroak \"not a hash or array: #{OL(item)}\"\n\treturn hResult"
  ]
}