{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\coffee.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# coffee.coffee\n\nimport fs from 'fs'\nimport CoffeeScript from 'coffeescript'\n\nimport {\n\tundef, defined, notdefined, getOptions, toBlock,\n\tOL, words, removeKeys, isArray, withExt,\n\t} from '@jdeighan/base-utils'\nimport {\n\tassert, croak,\n\t} from '@jdeighan/base-utils/exceptions'\nimport {\n\tdbgEnter, dbgReturn, dbg,\n\t} from '@jdeighan/base-utils/debug'\nimport {isUndented} from '@jdeighan/base-utils/indent'\nimport {toTAML} from '@jdeighan/base-utils/taml'\nimport {isFile, barf, barfAST} from '@jdeighan/base-utils/fs'\nimport {\n\treadTextFile, getShebang,\n\t} from '@jdeighan/base-utils/read-file'\n\n# ---------------------------------------------------------------------------\n\nexport brew = (coffeeCode, hOptions={}) ->\n\n\t# --- metadata is used to add a shebang line\n\t#     if true, use \"#!/usr/bin/env node\"\n\t#     else use value of shebang key\n\t# --- filePath is used to check for a source map\n\t#     without it, no source map is produced\n\n\tdbgEnter 'brew', coffeeCode, hOptions\n\t{hMetaData, filePath} = getOptions hOptions, {\n\t\thMetaData: {}\n\t\tfilePath: undef\n\t\t}\n\tassert defined(coffeeCode), \"Missing coffee code\"\n\tcoffeeCode = toBlock(coffeeCode)  # allow passing array\n\tdbg 'hMetaData', hMetaData\n\tdbg 'filePath', filePath\n\n\tif defined(filePath)\n\t\tassert isFile(filePath), \"Not a file: #{filePath}\"\n\t\t{js, v3SourceMap} = CoffeeScript.compile coffeeCode, {\n\t\t\tbare: true\n\t\t\theader: false\n\t\t\tsourceMap: true\n\t\t\tfilename: filePath\n\t\t\t}\n\telse\n\t\tjs = CoffeeScript.compile coffeeCode, {\n\t\t\tbare: true\n\t\t\theader: false\n\t\t\tsourceMap: false\n\t\t\t}\n\t\tv3SourceMap = undef\n\n\tassert defined(js), \"No JS code generated\"\n\n\tshebang = getShebang(hMetaData)\n\tdbg 'shebang', shebang\n\tif defined(shebang)\n\t\tjs = shebang + \"\\n\" + js.trim()\n\telse\n\t\tjs = js.trim()\n\tresult = [js, v3SourceMap]\n\tdbgReturn 'brew', result\n\treturn result\n\n# ---------------------------------------------------------------------------\n\nexport brewFile = (filePath) ->\n\n\tdbgEnter 'brewFile', filePath\n\t[hMetaData, lLines] = readTextFile(filePath, 'eager')\n\tdbg 'hMetaData', hMetaData\n\tdbg 'lLines', lLines\n\tassert isArray(lLines), \"Bad return from readTextFile\"\n\t[jsCode, sourceMap] = brew lLines, {hMetaData, filePath}\n\tdbg 'jsCode', jsCode\n\tdbg 'sourceMap', sourceMap\n\tjsFilePath = withExt(filePath, '.js')\n\tmapFilePath = withExt(filePath, '.js.map')\n\tdbg 'jsFilePath', jsFilePath\n\tdbg 'mapFilePath', mapFilePath\n\tbarf jsCode, jsFilePath\n\tbarf sourceMap, mapFilePath\n\tdbgReturn 'brewFile'\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport removeExtraKeys = (hAST) =>\n\n\tremoveKeys hAST, words(\n\t\t'loc range extra start end',\n\t\t'directives comments tokens',\n\t\t)\n\treturn hAST\n\n# ---------------------------------------------------------------------------\n\nexport astToTAML = (hAST, full=false) =>\n\n\tif !full\n\t\tremoveExtraKeys hAST\n\tlSortBy = [\n\t\t'type'\n\t\t'params'\n\t\t'body'\n\t\t'left'\n\t\t'operator'\n\t\t'right'\n\t\t]\n\treturn toTAML(hAST, {sortKeys: lSortBy})\n\n# ---------------------------------------------------------------------------\n# --- Valid options:\n#        full - retain all keys\n#        format - undef=JS value, else 'taml'\n\nexport toAST = (coffeeCode, hOptions={}) ->\n\n\tdbgEnter \"toAST\", coffeeCode\n\tassert isUndented(coffeeCode), \"code has indentation\"\n\t{full, format} = getOptions hOptions, {\n\t\tfull: false\n\t\tformat: undef\n\t\t}\n\ttry\n\t\thAST = CoffeeScript.compile(coffeeCode, {ast: true})\n\t\tassert defined(hAST), \"hAST is empty\"\n\tcatch err\n\t\tLOG \"ERROR in CoffeeScript: #{err.message}\"\n\t\tLOG '-'.repeat(78)\n\t\tLOG \"#{OL(coffeeCode)}\"\n\t\tLOG '-'.repeat(78)\n\t\tcroak \"ERROR in CoffeeScript: #{err.message}\"\n\n\n\tswitch format\n\t\twhen undef\n\t\t\tif !full\n\t\t\t\tremoveExtraKeys hAST\n\t\t\tast = hAST\n\t\twhen 'taml'\n\t\t\tast = astToTAML hAST, full\n\t\telse\n\t\t\tcroak \"Invalid format\"\n\tdbgReturn \"toAST\", ast\n\treturn ast\n\n# ---------------------------------------------------------------------------\n\nexport toASTFile = (coffeeCode, filePath, hOptions={}) ->\n\n\thAST = toAST(coffeeCode, hOptions)\n\tbarfAST hAST, filePath\n\treturn"
  ]
}