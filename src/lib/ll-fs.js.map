{
  "version": 3,
  "file": "ll-fs.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\ll-fs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# ll-fs.coffee\r\n\r\nimport pathLib from 'node:path'\r\nimport urlLib from 'url'\r\nimport fs from 'fs'\r\n\r\nimport {\r\n\tpass, undef, defined, notdefined, LOG, isString, getOptions,\r\n\tll_assert, ll_croak,\r\n\t} from '@jdeighan/base-utils'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport fileDirPath = (filePath) =>\r\n\t# --- file does not need to exist yet, but\r\n\t#     it should be a file path\r\n\r\n\tll_assert isString(filePath), \"not a string: '#{filePath}'\"\r\n\tfullPath = mkpath(filePath)\r\n\thFile = parsePath(fullPath)\r\n\tdirStr = hFile.dir\r\n\trootLen = hFile.root.length\r\n\tlParts = dirStr.substring(rootLen).split(/[\\\\\\/]/)\r\n\treturn [hFile.root, lParts]\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mkDirsForFile = (filePath) =>\r\n\r\n\t[root, lParts] = fileDirPath(filePath)\r\n\tdir = root\r\n\tfor part in lParts\r\n\t\tdir = \"#{dir}/#{part}\"\r\n\t\tif ! isDir(dir)\r\n\t\t\tmkDir(dir)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport fileExt = (path) =>\r\n\r\n\tll_assert isString(path), \"fileExt(): path not a string\"\r\n\tif lMatches = path.match(/\\.[A-Za-z0-9_]+$/)\r\n\t\treturn lMatches[0]\r\n\telse\r\n\t\treturn ''\r\n\r\n# ---------------------------------------------------------------------------\r\n#   withExt - change file extention in a file name\r\n\r\nexport withExt = (path, newExt) =>\r\n\r\n\tll_assert newExt, \"withExt(): No newExt provided\"\r\n\tif newExt.indexOf('.') != 0\r\n\t\tnewExt = '.' + newExt\r\n\r\n\tif lMatches = path.match(/^(.*)\\.[^\\.]+$/)\r\n\t\t[_, pre] = lMatches\r\n\t\treturn pre + newExt\r\n\tll_croak \"Bad path: '#{path}'\"\r\n\r\n# ---------------------------------------------------------------------------\r\n#     convert \\ to /\r\n# --- convert \"C:...\" to \"c:...\"\r\n\r\nnormalize = (path) =>\r\n\r\n\tpath = path.replaceAll '\\\\', '/'\r\n\tif (path.charAt(1) == ':')\r\n\t\treturn path.charAt(0).toLowerCase() + path.substring(1)\r\n\telse\r\n\t\treturn path\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport workingDir = () ->\r\n\r\n\treturn normalize process.cwd()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Should be called like: myself(import.meta.url)\r\n#     returns full path of current file\r\n\r\nexport myself = (url) =>\r\n\r\n\tpath = urlLib.fileURLToPath url\r\n\treturn normalize path\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Should be called like: mydir(import.meta.url)\r\n#     returns the directory that the current file is in\r\n\r\nexport mydir = (url) =>\r\n\r\n\tpath = urlLib.fileURLToPath url\r\n\tdir = pathLib.dirname path\r\n\treturn normalize dir\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mkpath = (lParts...) =>\r\n\r\n\tfullPath = pathLib.resolve lParts...\r\n\treturn normalize fullPath\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Since a disk's directory is kept in memory,\r\n#     directory operations can be done synchronously\r\n\r\nexport isDir = (dirPath) =>\r\n\r\n\tif ! fs.existsSync(dirPath)\r\n\t\treturn false\r\n\ttry\r\n\t\treturn fs.lstatSync(dirPath).isDirectory()\r\n\tcatch\r\n\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mkDir = (dirPath, hOptions={}) =>\r\n\r\n\thOptions = getOptions hOptions, {\r\n\t\tclear: false\r\n\t\t}\r\n\ttry\r\n\t\tfs.mkdirSync dirPath\r\n\t\treturn true\r\n\tcatch err\r\n\t\tif (err.code == 'EEXIST')\r\n\t\t\tif hOptions.clear\r\n\t\t\t\tclearDir dirPath\r\n\t\t\treturn false\r\n\t\telse\r\n\t\t\tthrow err\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport dirContents = (dirPath) =>\r\n\r\n\ttry\r\n\t\tlContents = []\r\n\t\thOptions = {withFileTypes: true, recursive: false}\r\n\t\tfor ent in fs.readdirSync(dirPath, hOptions)\r\n\t\t\tif ent.isFile() || ent.isDir()\r\n\t\t\t\tlContents.push ent.name\r\n\t\treturn lContents\r\n\tcatch err\r\n\t\treturn undef\r\n\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport clearDir = (dirPath) =>\r\n\r\n\ttry\r\n\t\thOptions = {withFileTypes: true, recursive: true}\r\n\t\tfor ent in fs.readdirSync(dirPath, hOptions)\r\n\t\t\tif ent.isFile()\r\n\t\t\t\tfs.rmSync mkpath(ent.path, ent.name)\r\n\tcatch err\r\n\t\tpass()\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport rmDir = (dirPath, recursive=true) =>\r\n\r\n\tll_assert isDir(dirPath), \"#{dirPath} is not a directory\"\r\n\tfs.rmSync dirPath, {recursive}\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport touch = (filePath) =>\r\n\r\n\tfd = fs.openSync(filePath, 'a')\r\n\tfs.closeSync(fd)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isFile = (filePath) =>\r\n\r\n\tif ! fs.existsSync(filePath)\r\n\t\treturn false\r\n\ttry\r\n\t\treturn fs.lstatSync(filePath).isFile()\r\n\tcatch\r\n\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport rename = (oldPath, newPath) =>\r\n\r\n\tfs.renameSync oldPath, newPath\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport rmFile = (filePath) =>\r\n\r\n\tll_assert isFile(filePath), \"#{filePath} is not a file\"\r\n\tfs.rmSync filePath\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- returns one of:\r\n#        'missing'  - does not exist\r\n#        'dir'      - is a directory\r\n#        'file'     - is a file\r\n#        'unknown'  - exists, but not a file or directory\r\n\r\nexport pathType = (fullPath) =>\r\n\r\n\tll_assert isString(fullPath), \"not a string\"\r\n\tif fs.existsSync fullPath\r\n\t\tif isFile fullPath\r\n\t\t\treturn 'file'\r\n\t\telse if isDir fullPath\r\n\t\t\treturn 'dir'\r\n\t\telse\r\n\t\t\treturn 'unknown'\r\n\telse\r\n\t\treturn 'missing'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport parsePath = (path, shouldNotExist) =>\r\n\t# --- NOTE: path may be a file URL, e.g. import.meta.url\r\n\t#           path may be a relative path\r\n\r\n\tll_assert isString(path), \"path is type #{typeof path}\"\r\n\tll_assert notdefined(shouldNotExist), \"multiple arguments!\"\r\n\tif path.match(/^file\\:\\/\\//)\r\n\t\tpath = normalize urlLib.fileURLToPath(path)\r\n\telse\r\n\t\t# --- handles relative paths\r\n\t\tpath = normalize pathLib.resolve(path)\r\n\ttype = pathType path\r\n\r\n\t{root, dir, base, name, ext} = pathLib.parse(path)\r\n\tif lMatches = name.match(///\r\n\t\t\t\\.\r\n\t\t\t([A-Za-z_]+)\r\n\t\t\t$///)\r\n\t\tpurpose = lMatches[1]\r\n\telse\r\n\t\tpurpose = undef\r\n\treturn {\r\n\t\tpath\r\n\t\tfilePath: path\r\n\t\ttype\r\n\t\troot\r\n\t\tdir\r\n\t\tbase\r\n\t\tfileName: base   # my preferred name\r\n\t\tname             # use this for directory name\r\n\t\tstub: name       # my preferred name\r\n\t\text\r\n\t\tpurpose\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport parentDir = (path) =>\r\n\r\n\thParsed = parsePath(path)\r\n\treturn hParsed.dir\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport parallelPath = (path, name=\"temp\") =>\r\n\r\n\tfullPath = mkpath(path)  # make full path with '/' as separator\r\n\t{dir, fileName} = parsePath fullPath\r\n\tif (lMatches = dir.match(///^\r\n\t\t\t(.*)\r\n\t\t\t\\/         # separator\r\n\t\t\t[^\\/]+     # final dir name\r\n\t\t\t$///))\r\n\t\t[_, subpath] = lMatches\r\n\t\treturn \"#{subpath}/#{name}/#{fileName}\"\r\n\telse\r\n\t\tcroak \"Can't get parallelPath for '#{path}'\"\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport subPath = (path, name=\"temp\") =>\r\n\r\n\tfullPath = mkpath(path)  # make full path with '/' as separator\r\n\t{dir, fileName} = parsePath fullPath\r\n\treturn \"#{dir}/#{name}/#{fileName}\"\r\n"
  ]
}