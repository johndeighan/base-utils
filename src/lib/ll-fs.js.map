{
  "version": 3,
  "file": "ll-fs.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\ll-fs.coffee"
  ],
  "names": [],
  "mappings": "AAAc;AAEd,OAAO,OAAP,MAAA;;AACA,OAAO,MAAP,MAAA;;AACA,OAAO,EAAP,MAAA;;AAEA,OAAA;EAAQ,KAAR;EAAe,QAAf;CAAA,MAAA,uBANc;;;;;AAYd,OAAA,IAAO,OAAA,GAAU,CAAC,IAAD,CAAA,GAAA;EAEhB,IAAA,GAAO,IAAI,CAAC,UAAL,CAAgB,IAAhB,EAAsB,GAAtB;EACP,IAAI,IAAI,CAAC,MAAL,CAAY,CAAZ,CAAA,KAAkB,GAAtB;AACC,WAAO,IAAI,CAAC,MAAL,CAAY,CAAZ,CAAc,CAAC,WAAf,CAAA,CAAA,GAA+B,IAAI,CAAC,SAAL,CAAe,CAAf,EADvC;;AAEA,SAAO;AALS,EAZH;;;;;AAuBd,OAAA,IAAO,KAAA,GAAQ,CAAC,GAAD,CAAA,GAAA;AAEf,MAAA,GAAA,EAAA;EAAC,IAAA,GAAO,MAAM,CAAC,aAAP,CAAqB,GAArB;EACP,GAAA,GAAM,OAAO,CAAC,OAAR,CAAgB,IAAhB;AACN,SAAO,OAAA,CAAQ,GAAR;AAJO,EAvBD;;;AA+Bd,OAAA,IAAO,MAAA,GAAS,CAAA,GAAC,MAAD,CAAA,GAAA;AAEhB,MAAA,IAAA,EAAA;EAAC,MAAA,GAAS,MAAM,CAAC,MAAP,CAAc,CAAC,CAAD,CAAA,GAAA;WAAO,QAAA,CAAS,CAAT;EAAP,CAAd;EACT,IAAI,MAAM,CAAC,MAAP,KAAiB,CAArB;IACC,MAAM,IAAI,KAAJ,CAAU,uBAAV,EADP;;EAEA,IAAG,MAAM,CAAC,CAAD,CAAG,CAAC,KAAV,CAAgB,SAAhB,CAAH;IACC,IAAA,GAAO,MAAM,CAAC,KAAP,CAAA,CAAc,CAAC,WAAf,CAAA;IACP,GAAA,GAAM,IAAA,GAAO,MAAM,CAAC,IAAP,CAAY,GAAZ,EAFd;GAAA,MAAA;IAIC,GAAA,GAAM,MAAM,CAAC,IAAP,CAAY,GAAZ,EAJP;;AAKA,SAAO,OAAA,CAAQ,GAAR;AAVQ,EA/BF;;;AA6Cd,OAAA,IAAO,OAAA,GAAU,CAAA,GAAC,MAAD,CAAA,GAAA;AAEjB,MAAA;EAAC,IAAA,GAAO,MAAA,CAAO,GAAA,MAAP;AACP,SAAO,OAAO,CAAC,OAAR,CAAgB,IAAhB;AAHS,EA7CH;;;;;;AAuDd,OAAA,IAAO,SAAA,GAAY,CAAA,GAAC,MAAD,CAAA,GAAA;AAEnB,MAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA;EAAC,IAAA,GAAO,MAAA,CAAO,GAAA,MAAP;EACP,IAAG,IAAI,CAAC,KAAL,CAAW,KAAX,CAAH;IACC,MAAM,IAAI,KAAJ,CAAU,CAAA,iBAAA,CAAA,CAAoB,IAApB,CAAA,4BAAA,CAAV,EADP;;EAEA,CAAA,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ,EAAkB,IAAlB,EAAwB,GAAxB,CAAA,GAA+B,OAAO,CAAC,KAAR,CAAc,IAAd,CAA/B;AACA,SAAO;IACN,IADM;IAEN,GAFM;IAGN,KAAA,EAAO,GAAG,CAAC,KAAJ,CAAU,QAAV,CAHD;IAIN,QAAA,EAAU,IAJJ;IAKN,QAAA,EAAU,IALJ;IAMN,IAAA,EAAM,IANA;IAON;EAPM;AANW",
  "sourcesContent": [
    "# ll-fs.coffee\r\n\r\nimport pathLib from 'node:path'\r\nimport urlLib from 'url'\r\nimport fs from 'fs'\r\n\r\nimport {undef, nonEmpty} from '@jdeighan/base-utils'\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- convert \"C:...\" to \"c:...\"\r\n#     convert \\ to /\r\n\r\nexport fixPath = (path) =>\r\n\r\n\tpath = path.replaceAll('\\\\', '/')\r\n\tif (path.charAt(1) == ':')\r\n\t\treturn path.charAt(0).toLowerCase() + path.substring(1)\r\n\treturn path\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Should be called like: mydir(import.meta.url)\r\n#     returns the directory that the current file is in\r\n\r\nexport mydir = (url) =>\r\n\r\n\tpath = urlLib.fileURLToPath(url)\r\n\tdir = pathLib.dirname(path)\r\n\treturn fixPath(dir)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mkpath = (lParts...) =>\r\n\r\n\tlParts = lParts.filter((x) => nonEmpty(x))\r\n\tif (lParts.length == 0)\r\n\t\tthrow new Error \"mkpath(): empty input\"\r\n\tif lParts[0].match(/[\\/\\\\]$/)\r\n\t\troot = lParts.shift().toLowerCase()\r\n\t\tstr = root + lParts.join('/')\r\n\telse\r\n\t\tstr = lParts.join('/')\r\n\treturn fixPath(str)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport resolve = (lParts...) =>\r\n\r\n\tpath = mkpath(lParts...)\r\n\treturn pathLib.resolve(path)\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Returned object has keys:\r\n#        root, dir, lDirs, filename, fileName, stub, ext\r\n#        NOTE: unable to determine if it's a file or directory\r\n\r\nexport parsePath = (lParts...) =>\r\n\r\n\tpath = mkpath(lParts...)\r\n\tif path.match(/^\\./)\r\n\t\tthrow new Error(\"parsePath() got '#{path}' - you should resolve first\")\r\n\t{root, dir, base, name, ext} = pathLib.parse(path)\r\n\treturn {\r\n\t\troot\r\n\t\tdir\r\n\t\tlDirs: dir.split(/[\\/\\\\]/)\r\n\t\tfileName: base\r\n\t\tfilename: base\r\n\t\tstub: name\r\n\t\text\r\n\t\t}\r\n"
  ]
}