{
  "version": 3,
  "file": "ll-fs.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\ll-fs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# ll-fs.coffee\r\n\r\nimport pathLib from 'node:path'\r\nimport urlLib from 'url'\r\nimport fs from 'fs'\r\n\r\nimport {undef, LOG, isString} from '@jdeighan/base-utils'\r\nimport {assert} from '@jdeighan/base-utils/exceptions'\r\n\r\n# ---------------------------------------------------------------------------\r\n#     convert \\ to /\r\n# --- convert \"C:...\" to \"c:...\"\r\n\r\nnormalize = (path) =>\r\n\r\n\tpath = path.replaceAll '\\\\', '/'\r\n\tif (path.charAt(1) == ':')\r\n\t\treturn path.charAt(0).toLowerCase() + path.substring(1)\r\n\telse\r\n\t\treturn path\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Should be called like: myself(import.meta.url)\r\n#     returns full path of current file\r\n\r\nexport myself = (url) =>\r\n\r\n\tpath = urlLib.fileURLToPath url\r\n\treturn normalize path\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Should be called like: mydir(import.meta.url)\r\n#     returns the directory that the current file is in\r\n\r\nexport mydir = (url) =>\r\n\r\n\tpath = urlLib.fileURLToPath url\r\n\tdir = pathLib.dirname path\r\n\treturn normalize dir\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mkpath = (lParts...) =>\r\n\r\n\tfullPath = pathLib.resolve lParts...\r\n\treturn normalize fullPath\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Since a disk's directory is kept in memory,\r\n#     directory operations can be done synchronously\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mkDir = (dirPath) =>\r\n\r\n\ttry\r\n\t\tfs.mkdirSync dirPath\r\n\t\treturn true\r\n\tcatch err\r\n\t\tif (err.code == 'EEXIST')\r\n\t\t\treturn false\r\n\t\telse\r\n\t\t\tthrow err\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport touch = (filePath) =>\r\n\r\n\tfs.closeSync(fs.openSync(filePath, 'a'))\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isFile = (filePath) =>\r\n\r\n\tif ! fs.existsSync(filePath)\r\n\t\treturn false\r\n\ttry\r\n\t\treturn fs.lstatSync(filePath).isFile()\r\n\tcatch\r\n\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isDir = (dirPath) =>\r\n\r\n\tif ! fs.existsSync(dirPath)\r\n\t\treturn false\r\n\ttry\r\n\t\treturn fs.lstatSync(dirPath).isDirectory()\r\n\tcatch\r\n\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- returns one of:\r\n#        'missing'  - does not exist\r\n#        'dir'      - is a directory\r\n#        'file'     - is a file\r\n#        'unknown'  - exists, but not a file or directory\r\n\r\nexport pathType = (fullPath) =>\r\n\r\n\tassert isString(fullPath), \"not a string\"\r\n\tif fs.existsSync fullPath\r\n\t\tif isFile fullPath\r\n\t\t\treturn 'file'\r\n\t\telse if isDir fullPath\r\n\t\t\treturn 'dir'\r\n\t\telse\r\n\t\t\treturn 'unknown'\r\n\telse\r\n\t\treturn 'missing'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport rmFile = (filePath) =>\r\n\r\n\tassert isFile(filePath), \"#{filePath} is not a file\"\r\n\tfs.rmSync filePath\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport rmDir = (dirPath, recursive=true) =>\r\n\r\n\tassert isDir(dirPath), \"#{dirPath} is not a directory\"\r\n\tfs.rmSync dirPath, {recursive}\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- path must exist\r\n\r\nexport parsePath = (path) =>\r\n\t# --- NOTE: path may be a file URL, e.g. import.meta.url\r\n\t# --- returns {\r\n\t#        root\r\n\t#        dir\r\n\t#     if a file:\r\n\t#        fileName,\r\n\t#        filePath,\r\n\t#        stub\r\n\t#        ext\r\n\t#        purpose\r\n\t#        }\r\n\r\n\tassert isString(path), \"path not a string\"\r\n\tif path.match(/^file\\:\\/\\//)\r\n\t\tpath = urlLib.fileURLToPath(path)\r\n\telse\r\n\t\t# --- handles relative paths\r\n\t\tpath = pathLib.resolve path\r\n\r\n\t{dir, root, base, name, ext} = pathLib.parse(path)\r\n\tif isDir path\r\n\t\treturn {\r\n\t\t\troot: normalize(root)\r\n\t\t\tdir: normalize(dir)\r\n\t\t\t}\r\n\telse\r\n\t\tassert isFile(path), \"path #{path} not a file or directory\"\r\n\r\n\t\t# --- check for a purpose\r\n\t\tif lMatches = name.match(///\r\n\t\t\t\t\\.\r\n\t\t\t\t([A-Za-z_]+)\r\n\t\t\t\t$///)\r\n\t\t\tpurpose = lMatches[1]\r\n\t\treturn {\r\n\t\t\troot: normalize(root)\r\n\t\t\tdir: normalize(dir)\r\n\t\t\tfileName: base\r\n\t\t\tfilePath: \"#{normalize(dir)}/#{base}\"\r\n\t\t\tstub: name\r\n\t\t\text\r\n\t\t\tpurpose\r\n\t\t\t}\r\n\r\nexport parseSource = parsePath    # synonym\r\n"
  ]
}