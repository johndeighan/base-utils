{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\ast-walker.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# ast-walker.coffee\n\nimport {\n\tundef, pass, defined, notdefined, OL, deepCopy,\n\tisString, nonEmpty, isArray, isHash, isArrayOfHashes,\n\ttoBlock, getOptions, removeKeys, words,\n\t} from '@jdeighan/base-utils'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {\n\tLOG, LOGVALUE,\n\t} from '@jdeighan/base-utils/log'\nimport {\n\tdbg, dbgEnter, dbgReturn,\n\t} from '@jdeighan/base-utils/debug'\nimport {slurp, barf, isDir} from '@jdeighan/base-utils/fs'\nimport {fromTAML, toTAML} from '@jdeighan/base-utils/taml'\nimport {indented} from '@jdeighan/base-utils/indent'\n\nimport {toAST} from '@jdeighan/base-utils/coffee'\nimport {Context} from '@jdeighan/base-utils/context'\n\nlBuiltins = words(\n\t'global clearImmediate setImmediate clearInterval',\n\t'clearTimeout setInterval setTimeout',\n\t'queueMicrotask structuredClone atob btoa',\n\t'performance navigator fetch crypto',\n\t)\n\nhAllHandlers = fromTAML('''\n\t---\n\tFile:\n\t\tlWalkTrees:\n\t\t\t- program\n\tProgram:\n\t\tlWalkTrees:\n\t\t\t- body\n\tArrayExpression:\n\t\tlWalkTrees:\n\t\t\t- elements\n\tAssignmentExpression:\n\t\tlDefined:\n\t\t\t- left\n\t\tlUsed:\n\t\t\t- right\n\tAssignmentPattern:\n\t\tlDefined:\n\t\t\t- left\n\t\tlWalkTrees:\n\t\t\t- right\n\tBinaryExpression:\n\t\tlUsed:\n\t\t\t- left\n\t\t\t- right\n\tBlockStatement:\n\t\tlWalkTrees:\n\t\t\t- body\n\tClassBody:\n\t\tlWalkTrees:\n\t\t\t- body\n\tClassDeclaration:\n\t\tlWalkTrees:\n\t\t\t- body\n\tClassMethod:\n\t\tlWalkTrees:\n\t\t\t- body\n\tExpressionStatement:\n\t\tlWalkTrees:\n\t\t\t- expression\n\tIfStatement:\n\t\tlWalkTrees:\n\t\t\t- test\n\t\t\t- consequent\n\t\t\t- alternate\n\tLogicalExpression:\n\t\tlWalkTrees:\n\t\t\t- left\n\t\t\t- right\n\tSpreadElement:\n\t\tlWalkTrees:\n\t\t\t- argument\n\tSwitchStatement:\n\t\tlWalkTrees:\n\t\t\t- cases\n\tSwitchCase:\n\t\tlWalkTrees:\n\t\t\t- test\n\t\t\t- consequent\n\tTemplateLiteral:\n\t\tlWalkTrees:\n\t\t\t- expressions\n\tTryStatement:\n\t\tlWalkTrees:\n\t\t\t- block\n\t\t\t- handler\n\t\t\t- finalizer\n\tUnaryExpression:\n\t\tlWalkTrees:\n\t\t\t- argument\n\tWhileStatement:\n\t\tlWalkTrees:\n\t\t\t- test\n\t\t\t- body\n\t''')\n\nhSubTrees = fromTAML('''\n\t---\n\tFile:\n\t\t- program\n\tProgram:\n\t\t- body\n\tArrayExpression:\n\t\t- elements\n\t''')\n\n# ---------------------------------------------------------------------------\n# ---------------------------------------------------------------------------\n\nexport class ASTWalker\n\n\tconstructor: (from) ->\n\t\t# --- from can be an AST or CoffeeScript code\n\n\t\tdbgEnter \"ASTWalker\", from\n\n\t\tif isString(from)\n\t\t\t@ast = toAST(from)\n\t\telse\n\t\t\t@ast = from\n\n\t\t# --- @ast can be a hash or array of hashes\n\t\tif isHash(@ast)\n\t\t\tdbg \"tree was hash - constructing list from it\"\n\t\t\t@ast = [@ast]\n\t\tassert isArrayOfHashes(@ast), \"not array of hashes: #{OL(@ast)}\"\n\n\t\t# --- Info to accumulate\n\t\t@lImportedSymbols = []\n\t\t@lExportedSymbols = []\n\t\t@lUsedSymbols     = []\n\t\t@lMissingSymbols  = []\n\n\t\t@context = new Context()\n\t\tdbgReturn \"ASTWalker\"\n\n\t# ..........................................................\n\n\taddImport: (name, lib) ->\n\n\t\tdbgEnter \"addImport\", name, lib\n\t\t@check name\n\t\tif @lImportedSymbols.includes(name)\n\t\t\tLOG \"Duplicate import: #{name}\"\n\t\telse\n\t\t\t@lImportedSymbols.push(name)\n\t\t@context.addGlobal(name)\n\t\tdbgReturn \"addImport\"\n\t\treturn\n\n\t# ..........................................................\n\n\taddExport: (name, lib) ->\n\n\t\tdbgEnter \"addExport\", name\n\t\t@check name\n\t\tif @lExportedSymbols.includes(name)\n\t\t\tLOG \"Duplicate export: #{name}\"\n\t\telse\n\t\t\t@lExportedSymbols.push(name)\n\t\tdbgReturn \"addExport\"\n\t\treturn\n\n\t# ..........................................................\n\n\taddDefined: (name, value={}) ->\n\n\t\tdbgEnter \"addDefined\", name\n\t\t@check name\n\t\tif @context.atGlobalLevel()\n\t\t\t@context.addGlobal name\n\t\telse\n\t\t\t@context.add name\n\t\tdbgReturn \"addDefined\"\n\t\treturn\n\n\t# ..........................................................\n\n\taddUsed: (name, value={}) ->\n\n\t\tdbgEnter \"addUsed\", name\n\t\t@check name\n\t\tif ! lBuiltins.includes(name)\n\t\t\tif ! @lUsedSymbols.includes(name)\n\t\t\t\t@lUsedSymbols.push(name)\n\t\t\tif ! @context.has(name) \\\n\t\t\t\t\t&& ! @lMissingSymbols.includes(name)\n\t\t\t\t@lMissingSymbols.push name\n\t\tdbgReturn \"addUsed\"\n\t\treturn\n\n\t# ..........................................................\n\n\twalkTree: (tree, level=0) ->\n\n\t\tdbgEnter \"walkTree\"\n\t\tif isArray(tree)\n\t\t\tfor node in tree\n\t\t\t\t@walkTree node, level\n\t\telse\n\t\t\tassert isHash(tree, ['type']), \"bad tree: #{OL(tree)}\"\n\t\t\t@visit tree, level\n\t\tdbgReturn \"walkTree\"\n\t\treturn\n\n\t# ..........................................................\n\n\tgetHandlers: (node, level) ->\n\n\t\t{type} = node\n\t\thHandlers = hAllHandlers[type]\n\t\tif defined(hHandlers)\n\t\t\t{lWalkTrees, lDefined, lUsed} = hHandlers\n\t\t\tresult = [type, lWalkTrees, lDefined, lUsed]\n\t\telse\n\t\t\tresult = [undef]\n\t\t# console.log result\n\t\treturn result\n\n\t# ..........................................................\n\t# --- return true if handled, false if not\n\n\thandle: (node, level) ->\n\n\t\tdbgEnter \"handle\", node, level\n\t\t[type, lWalkTrees, lDefined, lUsed] = @getHandlers(node, level)\n\t\tif notdefined(type)\n\t\t\tdbgReturn \"handle\", false\n\t\t\treturn false\n\n\t\tif defined(lDefined)\n\t\t\tfor key in lDefined\n\t\t\t\tsubnode = node[key]\n\t\t\t\tif subnode.type == 'Identifier'\n\t\t\t\t\t@addDefined subnode.name\n\t\t\t\telse\n\t\t\t\t\t@walkTree subnode, level+1\n\n\t\tif defined(lUsed)\n\t\t\tfor key in lUsed\n\t\t\t\tsubnode = node[key]\n\t\t\t\tif subnode.type == 'Identifier'\n\t\t\t\t\t@addUsed subnode.name\n\t\t\t\telse\n\t\t\t\t\t@walkTree subnode, level+1\n\n\t\tif defined(lWalkTrees)\n\t\t\tfor key in lWalkTrees\n\t\t\t\tsubnode = node[key]\n\t\t\t\tif isArray(subnode)\n\t\t\t\t\tfor tree in subnode\n\t\t\t\t\t\t@walkTree tree, level+1\n\t\t\t\telse if defined(subnode)\n\t\t\t\t\t@walkTree subnode, level+1\n\n\t\tdbgReturn \"handle\", true\n\t\treturn true\n\n\t# ..........................................................\n\n\tvisit: (node, level) ->\n\n\t\tdbgEnter \"ASTWalker.visit\", node, level\n\t\tassert defined(node), \"node is undef\"\n\n\t\tif @handle(node, level)\n\t\t\tdbgReturn \"ASTWalker.visit\"\n\t\t\treturn\n\n\t\tswitch node.type\n\n\t\t\twhen 'CallExpression'\n\t\t\t\t{callee} = node\n\t\t\t\tif (callee.type == 'Identifier')\n\t\t\t\t\t@addUsed callee.name\n\t\t\t\telse\n\t\t\t\t\t@walkTree callee, level+1\n\t\t\t\tfor arg in node.arguments\n\t\t\t\t\tif (arg.type == 'Identifier')\n\t\t\t\t\t\t@addUsed arg.name\n\t\t\t\t\telse\n\t\t\t\t\t\t@walkTree arg, level+1\n\n\t\t\twhen 'CatchClause'\n\t\t\t\tparam = node.param\n\t\t\t\tif defined(param) && (param.type=='Identifier')\n\t\t\t\t\t@addDefined param.name\n\t\t\t\t@walkTree node.body, level+1\n\n\t\t\twhen 'ExportNamedDeclaration'\n\t\t\t\t{specifiers, declaration} = node\n\t\t\t\tif defined(declaration)\n\t\t\t\t\t{type, id, left, body} = declaration\n\t\t\t\t\tswitch type\n\t\t\t\t\t\twhen 'ClassDeclaration'\n\t\t\t\t\t\t\tif defined(id)\n\t\t\t\t\t\t\t\t@addExport id.name\n\t\t\t\t\t\t\telse if defined(body)\n\t\t\t\t\t\t\t\t@walkTree node.body, level+1\n\t\t\t\t\t\twhen 'AssignmentExpression'\n\t\t\t\t\t\t\tif (left.type == 'Identifier')\n\t\t\t\t\t\t\t\t@addExport left.name\n\t\t\t\t\t@walkTree declaration, level+1\n\n\t\t\t\tif defined(specifiers)\n\t\t\t\t\tfor spec in specifiers\n\t\t\t\t\t\tname = spec.exported.name\n\t\t\t\t\t\t@addExport name\n\n\t\t\twhen 'For'\n\t\t\t\tif defined(node.name) && (node.name.type=='Identifier')\n\t\t\t\t\t@addDefined node.name.name\n\n\t\t\t\tif defined(node.index) && (node.name.type=='Identifier')\n\t\t\t\t\t@addDefined node.index.name\n\t\t\t\t@walkTree node.source, level+1\n\t\t\t\t@walkTree node.body, level+1\n\n\t\t\twhen 'FunctionExpression','ArrowFunctionExpression'\n\t\t\t\tlParmNames = []\n\t\t\t\tif defined(node.params)\n\t\t\t\t\tfor parm in node.params\n\t\t\t\t\t\tswitch parm.type\n\t\t\t\t\t\t\twhen 'Identifier'\n\t\t\t\t\t\t\t\tlParmNames.push parm.name\n\t\t\t\t\t\t\twhen 'AssignmentPattern'\n\t\t\t\t\t\t\t\t{left, right} = parm\n\t\t\t\t\t\t\t\tif left.type == 'Identifier'\n\t\t\t\t\t\t\t\t\tlParmNames.push left.name\n\t\t\t\t\t\t\t\tif right.type == 'Identifier'\n\t\t\t\t\t\t\t\t\t@addUsed right.name\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t@walkTree right, level+1\n\t\t\t\t@context.beginScope '<unknown>', lParmNames\n\t\t\t\t@walkTree node.params, level+1\n\t\t\t\t@walkTree node.body, level+1\n\t\t\t\t@context.endScope()\n\n\t\t\twhen 'ImportDeclaration'\n\t\t\t\t{specifiers, source, importKind} = node\n\t\t\t\tif (importKind == 'value') && (source.type == 'StringLiteral')\n\t\t\t\t\tlib = source.value     # e.g. '@jdeighan/coffee-utils'\n\n\t\t\t\t\tfor hSpec in specifiers\n\t\t\t\t\t\t{type, imported, local, importKind} = hSpec\n\t\t\t\t\t\tif (type == 'ImportSpecifier') \\\n\t\t\t\t\t\t\t\t&& defined(imported) \\\n\t\t\t\t\t\t\t\t&& (imported.type == 'Identifier')\n\t\t\t\t\t\t\t@addImport imported.name, lib\n\n\t\t\twhen 'NewExpression'\n\t\t\t\tif node.callee.type == 'Identifier'\n\t\t\t\t\t@addUsed node.callee.name\n\t\t\t\tfor arg in node.arguments\n\t\t\t\t\tif arg.type == 'Identifier'\n\t\t\t\t\t\t@addUsed arg.name\n\t\t\t\t\telse\n\t\t\t\t\t\t@walkTree arg     # --- ???\n\n\t\t\twhen 'MemberExpression'\n\t\t\t\t# --- has keys:\n\t\t\t\t#        type = 'MemberExpression'\n\t\t\t\t#        computed: boolean\n\t\t\t\t#        object\n\t\t\t\t#        optional: boolean\n\t\t\t\t#        property\n\t\t\t\t#        shorthand: boolean\n\t\t\t\t#\n\t\t\t\t# NOTE: Because we need to treat it differently\n\t\t\t\t#       depending on whether computes is true or false,\n\t\t\t\t#       we cannot handle this in hAllHandlers\n\n\t\t\t\t{object, property, computed} = node\n\t\t\t\tif object.type == 'Identifier'\n\t\t\t\t\t@addUsed object.name\n\t\t\t\telse\n\t\t\t\t\t@walkTree object\n\t\t\t\tif computed    # --- e.g hItem[expr], not hItem.name\n\t\t\t\t\tif property.type == 'Identifier'\n\t\t\t\t\t\t@addUsed property.name\n\t\t\t\t\telse\n\t\t\t\t\t\t@walkTree property\n\n\t\t\twhen 'ReturnStatement'\n\t\t\t\t{argument} = node\n\t\t\t\tif defined(argument)\n\t\t\t\t\tif (argument.type == 'Identifier')\n\t\t\t\t\t\t@addUsed argument.name\n\t\t\t\t\telse\n\t\t\t\t\t\t@walkTree argument\n\n\t\tdbgReturn \"ASTWalker.visit\"\n\t\treturn\n\n\t# ..........................................................\n\n\twalk: () ->\n\n\t\tdbgEnter \"walk\", @ast\n\t\tfor node in @ast\n\t\t\t@visit node, 0\n\n\t\t# --- get symbols to return\n\n\t\t# --- not needed if:\n\t\t#        1. in lImported\n\t\t#        2. not in lUsedSymbols\n\t\t#        3. not in lExportedSymbols\n\t\tlNotNeeded = @lImportedSymbols.filter (name) =>\n\t\t\treturn ! @lUsedSymbols.includes(name) \\\n\t\t\t\t\t&& ! @lExportedSymbols.includes(name)\n\n\t\thInfo = {\n\t\t\tlImported:  @lImportedSymbols.sort()\n\t\t\tlExported:  @lExportedSymbols.sort()\n\t\t\tlUsed:      @lUsedSymbols.sort()\n\t\t\tlMissing:   @lMissingSymbols.sort()\n\t\t\tlNotNeeded: lNotNeeded.sort()\n\t\t\t}\n\t\tdbgReturn \"walk\", hInfo\n\t\treturn hInfo\n\n\t# ..........................................................\n\n\tcheck: (name) ->\n\n\t\tassert nonEmpty(name), \"empty name\"\n\t\treturn\n\n\t# ..........................................................\n\n\tbarfAST: (filePath, hOptions={}) ->\n\n\t\t{full} = getOptions(hOptions)\n\t\tlSortBy = words(\"type params body left right\")\n\t\tif full\n\t\t\tbarf toTAML(@ast, {sortKeys: lSortBy}), filepath\n\t\telse\n\t\t\tastCopy = deepCopy @ast\n\t\t\tremoveKeys astCopy, words(\n\t\t\t\t'start end extra declarations loc range tokens comments',\n\t\t\t\t'assertions implicit optional async generate hasIndentedBody'\n\t\t\t\t)\n\t\t\tbarf toTAML(astCopy, {sortKeys: lSortBy}), filepath\n\n# ---------------------------------------------------------------------------\n\nexport analyzeCoffeeCode = (code) =>\n\n\twalker = new ASTWalker(code)\n\treturn walker.walk()\n\n# ---------------------------------------------------------------------------\n\nexport analyzeCoffeeFile = (filePath) =>\n\n\twalker = new ASTWalker(slurp(filePath))\n\treturn walker.walk()"
  ]
}