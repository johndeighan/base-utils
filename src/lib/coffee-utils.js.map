{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\coffee-utils.coffee"
  ],
  "names": [],
  "mappings": "AAE6E;;;AAE7E,OAAA,IAAO,cAAA,GAAiB,QAAA,CAAC,QAAD,CAAA;AAExB,MAAA,SAAA,EAAA,QAAA,EAAA;EAAC,MAAA,GAAS;EAMT,CAAC,SAAD,EAAY,QAAZ,CAAA,GAAwB,YAAA,CAAa,QAAb,EAAuB;IAC9C,KAAA,EAAO,IADuC;IAE9C,OAAA,EAAS,MAFqC;IAG9C,WAAA,EAAa;EAHiC,CAAvB;AAKxB,SAAO,QAAQ,CAAC,GAAT,CAAa,CAAC,QAAD,CAAA,GAAA;WAAc,QAAQ,CAAC,CAAD;EAAtB,CAAb;AAbgB,EAFqD;;;AAmB7E,OAAA,IAAO,iBAAA,GAAoB,CAAC,QAAD,CAAA,GAAA;AAE1B,SAAO,KAAK,CAAC,IAAN,CAAW,cAAA,CAAe,QAAf,CAAX;AAFmB,EAnBkD;;;;;;AA4B7E,OAAA,IAAO,eAAA,GAAkB,CAAC,MAAD,EAAS,GAAT,EAAc,WAAS,CAAA,CAAvB,CAAA,GAAA;AAEzB,MAAA,UAAA,EAAA,QAAA,EAAA,IAAA,EAAA,KAAA,EAAA,UAAA,EAAA,MAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,QAAA,EAAA,iBAAA,EAAA,aAAA,EAAA,SAAA,EAAA,UAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA;EAAC,CAAA,CAAC,GAAD,EAAM,IAAN,CAAA,GAAc,UAAA,CAAW,QAAX,EAAqB;IAClC,GAAA,EAAK,KAD6B;IAElC,IAAA,EAAM;EAF4B,CAArB,CAAd;EAIA,MAAA,CAAO,gBAAA,CAAiB,MAAjB,CAAP,EAAiC,cAAjC;EACA,IAAG,OAAA,CAAQ,IAAR,CAAH;IACC,IAAA,GAAO,MAAA,CAAO,IAAP,EADR;;EAEA,MAAA,CAAO,KAAA,CAAM,GAAN,CAAP,EAAmB,CAAA,iBAAA,CAAA,CAAoB,EAAA,CAAG,GAAH,CAApB,CAAA,CAAnB;EAEA,SAAA,GAAY,aAAA,GAAgB,iBAAA,GAAoB;EAChD,UAAA,GAAa;AACb;EAAA,KAAA,YAAA;IACC,CAAA,CAAC,OAAD,EAAU,QAAV,CAAA,GAAsB,KAAtB;IACA,MAAA,GAAS,OAAO,CAAC,KAAR,CAAc,kBAAd;IACT,IAAG,OAAA,CAAQ,IAAR,CAAH;MACC,UAAA,GAAa,QAAA,CAAS,QAAT,EAAmB,IAAnB,EADd;KAAA,MAAA;MAGC,UAAA,GAAa,MAHd;;IAIA,QAAA,GAAW;IACX,UAAA,GAAa;AACb;IAAA,KAAA,SAAA;MAAI,CAAC,IAAD,EAAM,OAAN,MACN;;MACG,IAAG,MAAH;QACC,aAAA,IAAiB,EADlB;OAAA,MAEK,IAAG,UAAH;QACJ,iBAAA,IAAqB,EADjB;OAAA,MAAA;QAGJ,SAAA,IAAa,EAHT;;MAIL,IAAG,GAAH;QAEC,IAAG,CAAC,UAAJ;UACC,GAAA,CAAI,YAAA,CAAa,GAAb,EAAkB,EAAlB,EAAsB,QAAtB,CAAJ;UACA,UAAA,GAAa,KAFd;;QAGA,IAAG,CAAC,UAAJ;UACC,GAAA,CAAI,CAAA,MAAA,CAAA,CAAS,OAAT,CAAA,CAAJ;UACA,UAAA,GAAa,KAFd;;QAGA,GAAA,CAAI,IAAA,CAAA,CAAM,OAAN,CAAA,EAAA,CAAA,CAAkB,WAAA,CAAY,IAAZ,EAAkB,EAAlB,CAAlB,CAAA,CAAJ,EARD;;IARD;EATD;AA0BA,SAAO,CAAC,SAAD,EAAY,aAAZ,EAA2B,iBAA3B;AAvCiB",
  "sourcesContent": [
    "# coffee-utils.coffee\n\n# ---------------------------------------------------------------------------\n\nexport allExportsFrom = (filePath) ->\n\n\tregexp = ///^\n\t\t\t\\s*\n\t\t\texport\n\t\t\t\\s+\n\t\t\t([A-Za-z_][A-Za-z0-9_]*)\n\t\t\t///\n\t[hMetaData, lMatches] = readTextFile filePath, {\n\t\teager: true\n\t\tpattern: regexp\n\t\twantMatches: true\n\t\t}\n\treturn lMatches.map((lMatches) => lMatches[1])\n\n# ---------------------------------------------------------------------------\n\nexport allExportsListing = (filePath) =>\n\n\treturn Array.from(allExportsFrom(filePath))\n\n# ---------------------------------------------------------------------------\n# --- Returns number of usages found\n\n# --- HOW TO SKIP imports !!!!!\n\nexport symbolNumUsages = (symbol, dir, hOptions={}) =>\n\n\t{log, from} = getOptions hOptions, {\n\t\tlog: false\n\t\tfrom: undef\n\t\t}\n\tassert isNonEmptyString(symbol), \"Empty symbol\"\n\tif defined(from)\n\t\tfrom = mkpath(from)\n\tassert isDir(dir), \"Not a directory: #{OL(dir)}\"\n\n\tnumUsages = numTestUsages = numInternalUsages = 0\n\tprojHeader = false\n\tfor hFile from allFilesMatching(\"#{dir}/**/*.coffee\")\n\t\t{relPath, filePath} = hFile\n\t\tisTest = relPath.match(/[\\\\\\/]test[\\\\\\/]/)\n\t\tif defined(from)\n\t\t\tisInternal = samefile(filePath, from)\n\t\telse\n\t\t\tisInternal = false\n\t\tnMatches = 0\n\t\tfileHeader = false\n\t\tfor [line,lineNum] from allMatchingLinesIn(relPath, symbol)\n\t\t\t# --- We found a match!\n\t\t\tif isTest\n\t\t\t\tnumTestUsages += 1\n\t\t\telse if isInternal\n\t\t\t\tnumInternalUsages += 1\n\t\t\telse\n\t\t\t\tnumUsages += 1\n\t\t\tif log\n\t\t\t\t# --- Print project & file if not printed yet\n\t\t\t\tif !projHeader\n\t\t\t\t\tLOG centeredText(dir, 40, 'char=-')\n\t\t\t\t\tprojHeader = true\n\t\t\t\tif !fileHeader\n\t\t\t\t\tLOG \"FILE: #{relPath}\"\n\t\t\t\t\tfileHeader = true\n\t\t\t\tLOG \"   #{lineNum}: #{truncateStr(line, 64)}\"\n\treturn [numUsages, numTestUsages, numInternalUsages]"
  ]
}