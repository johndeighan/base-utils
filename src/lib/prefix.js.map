{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\prefix.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# prefix.coffee\n\nimport {undef, OL} from '@jdeighan/base-utils'\nimport {assert} from '@jdeighan/base-utils/exceptions'\n\n# --- We use spaces here because Windows Terminal handles TAB chars badly\n\nexport vbar = '│'       # unicode 2502\nexport hbar = '─'       # unicode 2500\nexport corner = '└'     # unicode 2514\nexport tee = '├'        # unicode 251C\nexport arrowhead = '>'\nexport backarrow = '<'\nexport space = ' '\nexport dot = '.'\nexport lI18N = '◄'      # unicode 25C4\nexport rI18N = '►'      # unicode 25BA\n\nexport fourSpaces  = space  + space     + space     + space\nexport oneIndent   = vbar   + space     + space     + space\nexport arrow       = corner + hbar      + arrowhead + space\nexport flat        = tee    + hbar      + hbar      + space\nexport resume      = tee    + hbar      + arrowhead + space\nexport yieldSym    = tee    + backarrow + hbar      + space\n\n# ---------------------------------------------------------------------------\n\nexport getPrefix = (level, option='none') =>\n\n\tswitch option\n\t\twhen 'plain'\n\t\t\treturn oneIndent.repeat(level)\n\t\twhen 'withArrow'\n\t\t\tif (level == 0)\n\t\t\t\treturn arrow\n\t\t\telse\n\t\t\t\treturn oneIndent.repeat(level-1) + arrow\n\t\twhen 'withResume'\n\t\t\tif (level == 0)\n\t\t\t\treturn resume\n\t\t\telse\n\t\t\t\treturn oneIndent.repeat(level-1) + resume\n\t\twhen 'withFlat'\n\t\t\tif (level == 0)\n\t\t\t\treturn flat\n\t\t\telse\n\t\t\t\treturn oneIndent.repeat(level-1) + flat\n\t\twhen 'withYield'\n\t\t\tif (level == 0)\n\t\t\t\treturn yieldSym\n\t\t\telse\n\t\t\t\treturn oneIndent.repeat(level-1) + yieldSym\n\t\twhen 'noLastVbar'\n\t\t\tassert (level >= 1),\n\t\t\t\t\"getPrefix(), noLastVbar but level=#{OL(level)}\"\n\t\t\treturn oneIndent.repeat(level-1) + fourSpaces\n\t\telse\n\t\t\treturn fourSpaces.repeat(level)\n\n# ---------------------------------------------------------------------------\n\nsetCharsAt = (str, pos, str2) =>\n\n\tassert (pos >= 0), \"negative pos #{pos} not allowed\"\n\tassert (pos < str.length), \"pos #{pos} not in #{OL(str)}\"\n\tif (pos + str2.length >= str.length)\n\t\treturn str.substring(0, pos) + str2\n\telse\n\t\treturn str.substring(0, pos) \\\n\t\t\t\t+ str2 \\\n\t\t\t\t+ str.substring(pos + str2.length)\n\n# ---------------------------------------------------------------------------\n\nexport addArrow = (prefix) =>\n\n\tpos = prefix.lastIndexOf(vbar)\n\tif (pos == -1)\n\t\tresult = prefix\n\telse\n\t\tresult = setCharsAt(prefix, pos, arrow)\n\treturn result\n\n# ---------------------------------------------------------------------------\n\nexport removeLastVbar = (prefix) =>\n\n\tpos = prefix.lastIndexOf(vbar)\n\tif (pos == -1)\n\t\tresult = prefix\n\telse\n\t\tresult = setCharsAt(prefix, pos, ' ')\n\treturn result"
  ]
}