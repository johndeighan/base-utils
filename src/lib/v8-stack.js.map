{
  "version": 3,
  "file": "v8-stack.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\v8-stack.coffee"
  ],
  "names": [],
  "mappings": "AAAiB;AAAA,IAAA;;AAEjB,OAAO,OAAP,MAAA;;AACA,OAAO,EAAP,MAAA;;AAEA,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,MAD7B;EACqC,KADrC;EAEC,OAFD;EAEU,QAFV;CAAA,MAAA;;AAIA,OAAA;EACC,EADD;EACK,YADL;EACmB,cADnB;EACmC,UADnC;CAAA,MAAA;;AAGA,OAAA;EAAQ,YAAR;CAAA,MAAA;;AACA,OAAA;EACC,UADD;EACa,iBADb;EACgC,kBADhC;CAAA,MAAA;;AAIA,OAAA;EAAQ,UAAR;EAAoB,iBAApB;EAAuC,kBAAvC;;;AAEA,OAAA,IAAO,iBAAA,GAAoB;;AAC3B,GAAA,GAAM,KAAA,CAAM,MAAO,CAAA,IAAI,CAAC,GAAlB,EApBW;;;;AAwBjB,OAAA,IAAO,YAAA,GAAe,CAAC,OAAK,IAAN,CAAA,GAAA;EAErB,iBAAA,GAAoB;AAFC,EAxBL;;;AA+BjB,OAAA,IAAO,MAAA,GAAS,CAAC,QAAD,CAAA,GAAA;AAEhB,MAAA,GAAA,EAAA;AAAC;IACC,MAAA,GAAS,EAAE,CAAC,SAAH,CAAa,QAAb,CAAsB,CAAC,MAAvB,CAAA;AACT,WAAO,OAFR;GAGA,aAAA;IAAM;AACL,WAAO,MADR;;AALe,EA/BC;;;AAyCjB,OAAA,IAAO,OAAA,GAAU,CAAC,KAAD,CAAA,GAAA;AAEjB,MAAA,MAAA,EAAA,QAAA,EAAA,IAAA,EAAA;EAAC,CAAA,CAAC,IAAD,EAAO,QAAP,EAAiB,IAAjB,EAAuB,MAAvB,CAAA,GAAiC,KAAjC;AACA,SAAO,CAAA,CAAA,CAAG,IAAH,CAAA,IAAA,CAAA,CAAc,QAAd,CAAA,CAAA,CAAA,CAA0B,IAA1B,CAAA,CAAA,CAAA,CAAkC,MAAlC,CAAA;AAHS,EAzCA;;;AAgDjB,OAAA,IAAO,aAAA,GAAgB,KAAA,CAAC,WAAS,CAAA,CAAV,CAAA,GAAA;AAEvB,MAAA,KAAA,EAAA,MAAA,EAAA;EAAC,MAAA,GAAS,CAAA,MAAM,UAAA,CAAW,QAAX,CAAN;EACT,MAAA;;AAAS;IAAA,KAAA,wCAAA;;mBACR,OAAA,CAAQ,KAAR;IADQ,CAAA;;;AAET,SAAO,MAAM,CAAC,IAAP,CAAY,IAAZ;AALe,EAhDN;;;AAyDjB,OAAA,IAAO,OAAA,GAAU,CAAC,IAAD,CAAA,GAAA;AAEjB,MAAA,GAAA,EAAA;EAAC,IAAG,OAAA,CAAQ,IAAR,CAAH;AACC,WAAO,GADR;;EAEA,IAAA,GAAO,OAAA,CAAA;EACP,IAAG,OAAA,CAAQ,IAAR,CAAH;AACC,WAAO,KADR;;EAEA,GAAA,GAAM,IAAI,CAAC,OAAL,CAAa,IAAb;EACN,IAAI,GAAA,KAAO,CAAC,CAAZ;AACC,WAAO,KADR;GAAA,MAAA;AAGC,WAAO,IAAI,CAAC,OAAL,CAAa,IAAb,EAAmB,MAAnB,EAHR;;AARgB,EAzDA;;;AAwEjB,OAAA,IAAO,OAAA,GAAU,CAAA,CAAA,GAAA;AAEjB,MAAA,MAAA;;;EAGC,MAAA,GAAS,OAAO,CAAC,GAAG,CAAC;EACrB,IAAG,OAAA,CAAQ,MAAR,CAAH;AACC,WAAO,MADR;GAAA,MAAA;AAGC,WAAO,OAHR;;AANgB",
  "sourcesContent": [
    "# v8-stack.coffee\n\nimport pathLib from 'node:path'\nimport fs from 'fs'\n\nimport {\n\tundef, defined, notdefined, assert, mydir,\n\tisEmpty, nonEmpty,\n\t} from '@jdeighan/base-utils/ll-utils'\nimport {\n\tOL, isIdentifier, isFunctionName, getOptions,\n\t} from '@jdeighan/base-utils'\nimport {mapSourcePos} from '@jdeighan/base-utils/source-map'\nimport {\n\tgetV8Stack, getMyDirectCaller, getMyOutsideCaller,\n\t} from '@jdeighan/base-utils/ll-v8-stack'\n\nexport {getV8Stack, getMyDirectCaller, getMyOutsideCaller}\n\nexport internalDebugging = false\ndir = mydir(import.meta.url)    # directory this file is in\n\n# ---------------------------------------------------------------------------\n\nexport debugV8Stack = (flag=true) =>\n\n\tinternalDebugging = flag\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport isFile = (filePath) =>\n\n\ttry\n\t\tresult = fs.lstatSync(filePath).isFile()\n\t\treturn result\n\tcatch err\n\t\treturn false\n\n# ---------------------------------------------------------------------------\n\nexport nodeStr = (hNode) =>\n\n\t{type, fileName, line, column} = hNode\n\treturn \"#{type} at #{fileName}:#{line}:#{column}\"\n\n# ---------------------------------------------------------------------------\n\nexport getV8StackStr = (hOptions={}) =>\n\n\tlStack = await getV8Stack(hOptions)\n\tlParts = for hNode in lStack\n\t\tnodeStr(hNode)\n\treturn lParts.join(\"\\n\")\n\n# ---------------------------------------------------------------------------\n\nexport shorten = (line) =>\n\n\tif isEmpty(line)\n\t\treturn ''\n\troot = getRoot()\n\tif isEmpty(root)\n\t\treturn line\n\tpos = line.indexOf(root)\n\tif (pos == -1)\n\t\treturn line\n\telse\n\t\treturn line.replace(root, 'ROOT')\n\n# ---------------------------------------------------------------------------\n\nexport getRoot = () =>\n\n\t# --- Alternatively, we could search up in the directory tree\n\t#     for the directory that contains 'package.json'\n\n\tresult = process.env.ProjectRoot\n\tif isEmpty(result)\n\t\treturn undef\n\telse\n\t\treturn result\n\n"
  ]
}