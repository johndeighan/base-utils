{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\text-table.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# --- text-table.coffee\n\nimport {sprintf} from 'sprintf-js'\nimport {\n\tundef, defined, notdefined, getOptions, words, OL,\n\tpad, toBlock, isEmpty, nonEmpty, isNonEmptyString,\n\tjsType, isString, isNumber, isInteger, isArray,\n\tisFunction, range, hasKey, untabify, isArrayOfStrings,\n\t} from '@jdeighan/base-utils'\nimport {\n\tassert, isType, croak,\n\t} from '@jdeighan/base-utils/exceptions'\nimport {LOG, LOGVALUE} from '@jdeighan/base-utils/log'\nimport {toNICE} from '@jdeighan/base-utils/to-nice'\nimport {\n\tdbgEnter, dbgReturn, dbg, dbgCall,\n\t} from '@jdeighan/base-utils/debug'\n\n# ---------------------------------------------------------------------------\n\nexport class TextTable\n\n\tconstructor: (formatStr, hOptions={}) ->\n\t\t# --- Valid options:\n\t\t#        decPlaces - used for numbers with no % style format\n\t\t#                    default: 2\n\t\t#        parseNumbers - string data that looks like a number\n\t\t#                       is treated as a number, default: false\n\n\t\tdbgEnter 'TextTable', formatStr, hOptions\n\n\t\t@hOptions = getOptions hOptions, {\n\t\t\tdecPlaces: 2\n\t\t\tparseNumbers: false\n\t\t\t}\n\n\t\t# --- sets @numCols, @lColAligns, @lColFormats\n\t\t@parseFormatString formatStr, hOptions\n\t\tdbg 'numCols', @numCols\n\t\tdbg 'lColFormats', @lColFormats\n\t\tdbg 'lColAligns', @lColAligns\n\n\t\t# --- Items in @lRows must be a hash w/key 'opcode'\n\t\t@lRows = []\n\t\t@lColWidths = new Array(@numCols).fill(0)\n\t\t@totalWidth = undef\n\t\t@closed = false\n\n\t\t# --- Accumulate totals and subtotals\n\t\t#     When a subtotal row is added, subtotals are reset to 0\n\t\t@lColTotals    = new Array(@numCols).fill(undef)\n\t\t@lColSubTotals = new Array(@numCols).fill(undef)\n\n\t# ..........................................................\n\n\tparseFormatString: (formatStr, hOptions) ->\n\n\t\tassert defined(formatStr), \"missing format string\"\n\n\t\tlWords = words(formatStr)\n\t\t@numCols = lWords.length\n\n\t\t@lColAligns  = new Array(@numCols)\n\t\t@lColFormats = new Array(@numCols)\n\n\t\tfor word,colNum in lWords\n\t\t\tif (lMatches = word.match(/^(l|c|r)(\\%\\S+)?$/))\n\t\t\t\t[_, align, fmt] = lMatches\n\t\t\t\talignWord = switch align\n\t\t\t\t\twhen 'l' then 'left'\n\t\t\t\t\twhen 'c' then 'center'\n\t\t\t\t\twhen 'r' then 'right'\n\t\t\t\t\telse undef\n\t\t\t\tassert defined(alignWord), \"Bad format string: #{OL(formatStr)}\"\n\t\t\t\t@lColAligns[colNum] = alignWord\n\t\t\t\t@lColFormats[colNum] = fmt       # may be undef\n\t\t\telse\n\t\t\t\tcroak \"Bad format string: #{OL(formatStr)}\"\n\t\treturn\n\n\t# ..........................................................\n\n\tresetSubTotals: () ->\n\n\t\t@lColSubTotals.fill(undef)\n\t\treturn\n\n\t# ..........................................................\n\n\talignItem: (item, colNum) ->\n\n\t\tassert @closed, \"table not closed\"\n\t\tisType 'string', 'item', item\n\t\tif (item.length == width)\n\t\t\treturn item\n\t\talign = @lColAligns[colNum]\n\t\tassert ['left','center','right'].includes(align), \\\n\t\t\t\t\"Bad align parm: #{OL(align)}\"\n\t\twidth = @lColWidths[colNum]\n\t\treturn pad(item, width, \"justify=#{align}\")\n\n\t# ..........................................................\n\n\tformatItem: (item, colNum) ->\n\n\t\tif notdefined(item)\n\t\t\treturn ''\n\t\tfmt = @lColFormats[colNum]\n\t\tif defined(fmt)\n\t\t\treturn sprintf(fmt, item)\n\t\telse if isString(item)\n\t\t\treturn item\n\t\telse if isNumber(item)\n\t\t\treturn item.toFixed(@hOptions.decPlaces)\n\t\telse\n\t\t\treturn OL(item)\n\n\t# ..........................................................\n\n\tdumpInternals: () ->\n\n\t\tLOGVALUE 'totalWidth', @totalWidth\n\t\tLOGVALUE 'numCols:', @numCols\n\t\tLOGVALUE 'lColWidths:', @lColWidths\n\t\tLOGVALUE 'lColAligns', @lColAligns\n\t\tLOGVALUE 'lColFormats:', @lColFormats\n\t\tif nonEmpty(@lColTotals)\n\t\t\tLOGVALUE 'lColTotals:', @lColTotals\n\t\tif nonEmpty(@lColSubTotals)\n\t\t\tLOGVALUE 'lColSubTotals:', @lColSubTotals\n\t\tif nonEmpty(@lRows)\n\t\t\tLOGVALUE 'lRows:', @lRows\n\t\treturn\n\n\t# ..........................................................\n\t# --- adjust column to width at least minWidth\n\n\tadjust: (colNum, minWidth) ->\n\n\t\tif (minWidth > @lColWidths[colNum])\n\t\t\t@lColWidths[colNum] = minWidth\n\t\treturn\n\n\t# ..........................................................\n\n\tadjustColWidths: (lRow) ->\n\n\t\tfor item,colNum in lRow\n\t\t\tif isString(item)\n\t\t\t\t@adjust colNum, item.length\n\t\t\telse if isArray(item)\n\t\t\t\tfor str in item\n\t\t\t\t\t@adjust colNum, str.length\n\t\treturn\n\n\t# ..........................................................\n\n\taccum: (num, colNum) ->\n\n\t\tisType 'number', 'num', num\n\n\t\tif defined(@lColTotals[colNum])\n\t\t\t@lColTotals[colNum] += num\n\t\telse\n\t\t\t@lColTotals[colNum] = num\n\n\t\tif defined(@lColSubTotals[colNum])\n\t\t\t@lColSubTotals[colNum] += num\n\t\telse\n\t\t\t@lColSubTotals[colNum] = num\n\n\t\treturn\n\n\t# ..........................................................\n\n\tlabels: (lRow) ->\n\n\t\tdbgEnter 'labels', lRow\n\t\tassert ! @closed, \"table is closed\"\n\t\tisType 'array', 'lRow', lRow\n\t\tassert (lRow.length == @numCols),\n\t\t\t\t\"bad length: lRow = #{OL(lRow)}\"\n\t\t@adjustColWidths lRow\n\t\thRow = {\n\t\t\topcode: 'labels'\n\t\t\tlRow\n\t\t\t}\n\t\t@lRows.push hRow\n\t\tdbgReturn 'labels', hRow\n\t\treturn\n\n\t# ..........................................................\n\n\tdata: (lRow) ->\n\n\t\tdbgEnter 'data', lRow\n\t\tassert ! @closed, \"table is closed\"\n\t\tisType 'array', 'lRow', lRow\n\t\tassert (lRow.length == @numCols), \"lRow = #{OL(lRow)}\"\n\t\tlRow = lRow.map (item, colNum) =>\n\t\t\tswitch jsType(item)[0]\n\t\t\t\twhen undef\n\t\t\t\t\tdbg \"item is undef\"\n\t\t\t\t\treturn ''\n\t\t\t\twhen 'string'\n\t\t\t\t\tdbg \"item is a string\"\n\t\t\t\t\tif @hOptions.parseNumbers && item.match(///^\n\t\t\t\t\t\t\t\\d+         # one or more digits\n\t\t\t\t\t\t\t(\\.\\d*)?    # optional decimal part\n\t\t\t\t\t\t\t([Ee]\\d+)?  # optional exponent\n\t\t\t\t\t\t\t$///)\n\t\t\t\t\t\tdbg \"checking if '#{item}' is a number\"\n\t\t\t\t\t\tnum = parseFloat(item)\n\t\t\t\t\t\tdbg 'num', num\n\t\t\t\t\t\t@accum num, colNum\n\t\t\t\t\t\tformatted = @formatItem(num, colNum)\n\t\t\t\t\t\tdbg 'formatted', formatted\n\t\t\t\t\t\treturn formatted\n\t\t\t\t\telse\n\t\t\t\t\t\treturn item\n\t\t\t\twhen 'number'\n\t\t\t\t\tdbg \"item is a number\"\n\t\t\t\t\t@accum item, colNum\n\t\t\t\t\tformatted = @formatItem(item, colNum)\n\t\t\t\t\tdbg 'formatted', formatted\n\t\t\t\t\treturn formatted\n\t\t\t\telse\n\t\t\t\t\tdbg \"item is not a number or string\"\n\t\t\t\t\tformatted = @formatItem(num, colNum)\n\t\t\t\t\tdbg 'formatted', formatted\n\t\t\t\t\treturn formatted\n\t\t@adjustColWidths lRow\n\t\t@lRows.push {\n\t\t\topcode: 'data'\n\t\t\tlRow\n\t\t\t}\n\t\tdbgReturn 'data'\n\t\treturn\n\n\t# ..........................................................\n\n\tsep: (ch='-') ->\n\n\t\tdbgEnter 'sep'\n\t\tassert ! @closed, \"table is closed\"\n\t\tassert (ch.length == 1), \"Non-char arg\"\n\t\t@lRows.push {\n\t\t\topcode: 'sep'\n\t\t\tch\n\t\t\t}\n\t\tdbgReturn 'sep'\n\t\treturn\n\n\t# ..........................................................\n\n\tfullsep: (ch='-') ->\n\n\t\tdbgEnter 'fullsep'\n\t\tassert ! @closed, \"table is closed\"\n\t\tassert (ch.length == 1), \"Non-char arg\"\n\t\t@lRows.push {\n\t\t\topcode: 'fullsep'\n\t\t\tch\n\t\t\t}\n\t\tdbgReturn 'fullsep'\n\t\treturn\n\n\t# ..........................................................\n\n\ttitle: (title, align='center') ->\n\n\t\tdbgEnter 'title'\n\t\tassert ! @closed, \"table is closed\"\n\t\tassert isNonEmptyString(title), \"Bad title: '@{title}'\"\n\t\tassert ['left','center','right'].includes(align),\n\t\t\t\"Bad align: #{OL(align)}\"\n\t\t@lRows.push {\n\t\t\topcode: 'title'\n\t\t\ttitle\n\t\t\talign\n\t\t\t}\n\t\tdbgReturn 'title'\n\t\treturn\n\n\t# ..........................................................\n\n\ttotals: () ->\n\n\t\tdbgEnter 'totals'\n\t\tassert ! @closed, \"table is closed\"\n\t\tlRow = @lColTotals.map (item, colNum) =>\n\t\t\treturn @formatItem(item, colNum)\n\t\t@adjustColWidths lRow\n\t\t@lRows.push {\n\t\t\topcode: 'totals'\n\t\t\tlRow\n\t\t\t}\n\t\tdbgReturn 'totals'\n\t\treturn\n\n\t# ..........................................................\n\n\tsubtotals: () ->\n\n\t\tdbgEnter 'subtotals'\n\t\tassert ! @closed, \"table is closed\"\n\t\tlRow = @lColSubTotals.map (item, colNum) =>\n\t\t\treturn @formatItem(item, colNum)\n\t\t@resetSubTotals()\n\t\t@adjustColWidths lRow\n\t\t@lRows.push {\n\t\t\topcode: 'subtotals'\n\t\t\tlRow\n\t\t\t}\n\t\tdbgReturn 'subtotals'\n\t\treturn\n\n\t# ..........................................................\n\n\tclose: () ->\n\n\t\tdbgEnter 'close'\n\n\t\t# --- Allow multiple calls to close()\n\t\tif @closed\n\t\t\tdbg \"already closed, returning\"\n\t\t\tdbgCall () => @dumpInternals()\n\t\t\tdbgReturn 'close'\n\t\t\treturn\n\n\t\t# --- We can now compute some other stuff\n\t\t@totalWidth = @lColWidths.reduce(\n\t\t\t(acc, n) => acc+n,\n\t\t\t0) + (@numCols - 1)\n\n\t\t# --- Go through @lRows, updating 'sep' entries\n\t\tfor h in @lRows\n\t\t\tif (h.opcode == 'sep')\n\t\t\t\th.lRow = @lColWidths.map((w) =>\n\t\t\t\t\th.ch.repeat(w))\n\n\t\t@closed = true\n\t\tdbgCall () => @dumpInternals()\n\t\tdbgReturn 'close'\n\t\treturn\n\n\t# ..........................................................\n\n\tasString: (hOptions={}) ->\n\n\t\tdbgEnter 'asString'\n\t\t@close()\n\n\t\t{hide} = getOptions hOptions, {\n\t\t\thide: ''\n\t\t\t}\n\n\t\tif isEmpty(hide)\n\t\t\twidth = @totalWidth\n\t\t\tlHide = []\n\t\telse\n\t\t\tif isInteger(hide)\n\t\t\t\tlHide = [hide]\n\t\t\telse\n\t\t\t\tlHide = hide.split(',').map((s) => parseInt(s))\n\n\t\t\t# --- We have to compute width\n\t\t\twidth = 0\n\t\t\tfor w,i in @lColWidths\n\t\t\t\tif ! lHide.includes(i)\n\t\t\t\t\twidth += w+1\n\t\t\twidth -= 1\n\n\t\tdbg 'lHide', lHide\n\t\tdbg 'width', width\n\n\t\t# --- Map each item in @lRows to a string\n\t\tlLines = @lRows.map (hRow) =>\n\t\t\t{opcode, title, lRow, ch, align} = hRow\n\t\t\tif defined(lRow)\n\t\t\t\tnumCols = 0\n\t\t\t\thColWidth = {}\n\t\t\t\thColAlign = {}\n\t\t\t\tlRow = lRow.filter((elem, index) =>\n\t\t\t\t\tif lHide.includes(index)\n\t\t\t\t\t\treturn false\n\t\t\t\t\telse\n\t\t\t\t\t\thColWidth[numCols] = @lColWidths[index]\n\t\t\t\t\t\thColAlign[numCols] = @lColAligns[index]\n\t\t\t\t\t\t++numCols\n\t\t\t\t\t\treturn true\n\t\t\t\t\t)\n\t\t\tswitch opcode\n\t\t\t\twhen 'title'\n\t\t\t\t\treturn pad(title, width, \"justify=#{align}\")\n\t\t\t\twhen 'sep'\n\t\t\t\t\treturn lRow.join(' ')\n\t\t\t\twhen 'fullsep'\n\t\t\t\t\treturn ch.repeat(width)\n\t\t\t\twhen 'labels'\n\t\t\t\t\t# --- labels are always center aligned\n\t\t\t\t\treturn lRow.map((item, colNum) =>\n\t\t\t\t\t\tw = hColWidth[colNum]\n\t\t\t\t\t\ta = hColAlign[colNum]\n\t\t\t\t\t\treturn pad(item, w, \"justify=center\")\n\t\t\t\t\t\t).join(' ')\n\t\t\t\twhen 'data','totals','subtotals'\n\t\t\t\t\treturn lRow.map((item, colNum) =>\n\t\t\t\t\t\tw = hColWidth[colNum]\n\t\t\t\t\t\ta = hColAlign[colNum]\n\t\t\t\t\t\treturn pad(item, w, \"justify=#{a}\")\n\t\t\t\t\t\t).join(' ')\n\n\t\ttable = toBlock(lLines)\n\t\tdbgReturn 'asString', table\n\t\treturn table"
  ]
}