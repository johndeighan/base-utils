{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\to-nice.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# to-nice.coffee\n\nimport {\n\tundef, defined, notdefined, escapeStr, getOptions,\n\tjsType, toArray, toBlock, untabify, isInteger, OL,\n\tisArray, isBoolean, isFunction, delimitBlock,\n\t} from '@jdeighan/base-utils'\n\n# ---------------------------------------------------------------------------\n\nexport needsQuotes = (str) =>\n\n\t# --- if it looks like an array item, it needs quotes\n\tif str.match(/^\\s*-/)\n\t\treturn true\n\n\t# --- if it looks like a hash key, it needs quotes\n\tif str.match(/^\\s*\\S+\\s*:/)\n\t\treturn true\n\n\t# --- if it looks like a number, it needs quotes\n\tif str.match(/^\\s*\\d+(?:\\.\\d*)?/)\n\t\treturn true\n\n\treturn false\n\n# ---------------------------------------------------------------------------\n# --- There is only one type of quote:\n#        « (ALT+0171) » (ALT+0187)\n\nexport formatString = (str) =>\n\n\tfstr = escapeStr(str, {\n\t\t' ': '˳'\n\t\t\"\\t\": '→  '\n\t\t\"\\r\": '◄'\n\t\t\"\\n\": '▼'\n\t\t'«': \"\\\\«\"\n\t\t'»': \"\\\\»\"\n\t\t})\n\tif needsQuotes(str)\n\t\treturn \"«\" + fstr + \"»\"\n\telse\n\t\treturn fstr\n\n# ---------------------------------------------------------------------------\n\nexport shouldSplit = (type) =>\n\n\treturn ['hash','array','class','object'].includes(type)\n\n# ---------------------------------------------------------------------------\n\nexport baseCompare = (a, b) =>\n\n\tif (a < b)\n\t\treturn -1\n\telse if (a > b)\n\t\treturn 1\n\telse\n\t\treturn 0\n\n# ---------------------------------------------------------------------------\n\nexport indentBlock = (block, level, oneIndent) =>\n\n\tlLines = toArray(block)\n\tlNewLines = for line in lLines\n\t\toneIndent.repeat(level) + line\n\treturn toBlock(lNewLines)\n\n# ---------------------------------------------------------------------------\n\nexport toNICE = (obj, hOptions={}) =>\n\n\t{sortKeys, indent, oneIndent, label, delimit, width,\n\t\t} = getOptions hOptions, {\n\t\tsortKeys: false    # --- can be boolean/array/function\n\t\tindent: 0          # --- integer number of levels\n\t\toneIndent: \"\\t\"\n\t\tlabel: undef\n\t\tdelimit: false\n\t\twidth: 40\n\t\t}\n\n\tif isArray(sortKeys)\n\t\t# --- Convert to a function\n\t\th = {}\n\t\tfor key,i in sortKeys\n\t\t\th[key] = i+1\n\n\t\tsortKeys = (aKey, bKey) ->\n\t\t\taVal = h[aKey]\n\t\t\tbVal = h[bKey]\n\n\t\t\tif defined(aVal)\n\t\t\t\tif defined(bVal)\n\t\t\t\t\t# --- compare numerically\n\t\t\t\t\treturn baseCompare(aVal, bVal)\n\t\t\t\telse\n\t\t\t\t\treturn -1\n\t\t\telse\n\t\t\t\tif defined(bVal)\n\t\t\t\t\treturn 1\n\t\t\t\telse\n\t\t\t\t\t# --- compare keys alphabetically\n\t\t\t\t\treturn baseCompare(aKey, bKey)\n\telse\n\t\ttype = typeof sortKeys\n\t\tif (type != 'boolean') && (type != 'function')\n\t\t\tthrow new Error(\"sortKeys not boolean or function\")\n\n\t[type, subtype] = jsType(obj)\n\tswitch type\n\t\twhen 'function'\n\t\t\tif defined(subtype)\n\t\t\t\tresult = \"[Function #{subtype}]\"\n\t\t\telse\n\t\t\t\tresult = \"[Function]\"\n\t\twhen 'class'\n\t\t\tif defined(subtype)\n\t\t\t\tresult = \"[Class #{subtype}]\"\n\t\t\telse\n\t\t\t\tresult = \"[Class]\"\n\t\twhen undef\n\t\t\tif (subtype == 'null')\n\t\t\t\tresult = '.null.'\n\t\t\telse\n\t\t\t\tresult = '.undef.'\n\t\twhen 'number', 'bigint'\n\t\t\tif (subtype == 'NaN')\n\t\t\t\tresult = '.NaN.'\n\t\t\telse\n\t\t\t\tresult = obj.toString()\n\t\twhen 'string'\n\t\t\tresult = formatString(obj)\n\t\twhen 'boolean'\n\t\t\tif obj\n\t\t\t\tresult = '.true.'\n\t\t\telse\n\t\t\t\tresult = '.false.'\n\t\twhen 'array'\n\t\t\tlLines = []\n\t\t\tfor item in obj\n\t\t\t\tblock = toNICE(item)\n\t\t\t\tif shouldSplit(jsType(item)[0])\n\t\t\t\t\tlLines.push '-'\n\t\t\t\t\tlLines.push indentBlock(block, 1, oneIndent)\n\t\t\t\telse\n\t\t\t\t\tlLines.push \"- #{block}\"\n\t\t\tresult = toBlock(lLines)\n\t\twhen 'hash','object'\n\t\t\tlLines = []\n\t\t\tlKeys = Object.keys(obj)\n\t\t\tif (sortKeys == true)\n\t\t\t\tlKeys.sort()\n\t\t\telse if isFunction(sortKeys)\n\t\t\t\tlKeys.sort(sortKeys)\n\t\t\tfor key in lKeys\n\t\t\t\tval = obj[key]\n\t\t\t\tblock = toNICE(val)\n\t\t\t\tif shouldSplit(jsType(val)[0])\n\t\t\t\t\tlLines.push \"#{key}:\"\n\t\t\t\t\tlLines.push indentBlock(block, 1, oneIndent)\n\t\t\t\telse\n\t\t\t\t\tlLines.push \"#{key}: #{block}\"\n\t\t\tresult = toBlock(lLines)\n\n\tif delimit\n\t\tresult = delimitBlock(result, {label, width})\n\telse if label\n\t\tresult = \"#{label}\\n#{result}\"\n\n\tif (indent != 0)\n\t\tif !Number.isInteger(indent)\n\t\t\tthrow new Error(\"Bad indent: #{indent}\")\n\t\tresult = indentBlock(result, indent, oneIndent)\n\treturn result"
  ]
}