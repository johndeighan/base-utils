{
  "version": 3,
  "file": "cmd-args.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\cmd-args.coffee"
  ],
  "names": [],
  "mappings": "AAAiB;AAAA,IAAA;;AAEjB,OAAO,SAAP,MAAA;;AACA,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,QAD7B;EACuC,MADvC;EAC+C,OAD/C;CAAA,MAAA;;AAGA,OAAA;EAAQ,GAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,MAAR;EAAgB,KAAhB;CAAA,MAAA,kCAPiB;;;AAWjB,eAAA,GAAkB,CAAC,QAAD,CAAA,GAAA;EAEjB,IAAG,OAAA,CAAQ,QAAR,CAAH;IACC,GAAA,CAAI,QAAJ,EADD;GAAA,MAAA;IAGC,GAAA,CAAI,mBAAJ,EAHD;;AAFiB,EAXD;;;;AAsBjB,OAAA,IAAO,OAAA,GAAU,CAAC,QAAD,EAAW,QAAM,OAAO,CAAC,IAAI,CAAC,KAAb,CAAmB,CAAnB,CAAjB,EAAwC,WAAS,KAAjD,CAAA,GAAA;AACjB,MAAA,KAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,QAAA,EAAA,GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BC,MAAA,CAAO,MAAA,CAAO,QAAP,CAAP,EAAyB,yBAAzB;EACA,IAAG,QAAQ,CAAC,cAAT,CAAwB,OAAxB,CAAH;IACC,KAAA,GAAQ,QAAQ,CAAC;IACjB,OAAO,QAAQ,CAAC,MAFjB;;EAGA,IAAG,QAAQ,CAAC,cAAT,CAAwB,QAAxB,CAAH;IACC,QAAA,GAAW,QAAQ,CAAC;IACpB,IAAG,QAAQ,CAAC,cAAT,CAAwB,QAAxB,CAAH;MACC,QAAQ,CAAC,MAAT,GAAkB,CAAC,GAAA,QAAQ,CAAC,MAAV,EAAqB,QAArB,EADnB;KAAA,MAAA;MAGC,QAAQ,CAAC,MAAT,GAAkB,SAHnB;;IAIA,OAAO,QAAQ,CAAC,OANjB;;EAOA,IAAG,QAAA,CAAS,KAAT,CAAH;IACC,KAAA,GAAQ,KAAK,CAAC,IAAN,CAAA,CAAY,CAAC,KAAb,CAAmB,KAAnB;IACR,IAAG,KAAH;MACC,GAAA,CAAI,KAAJ,EADD;KAFD;GAAA,MAAA;IAKC,MAAA,CAAO,OAAA,CAAQ,KAAR,CAAP,EAAuB,wBAAvB,EALD;GAtCD;;EA8CC,IAAG,UAAA,CAAW,QAAQ,CAAC,OAApB,CAAH;IACC,QAAQ,CAAC,OAAT,GAAmB,CAAC,GAAD,CAAA,GAAA;MAClB,IAAG,GAAG,CAAC,UAAJ,CAAe,GAAf,CAAH;QACC,eAAA,CAAgB,QAAhB;QACA,KAAA,CAAM,CAAA,gBAAA,CAAA,CAAmB,GAAnB,CAAA,CAAA,CAAN,EAFD;;IADkB,EADpB;;EAMA,KAAA,GAAQ,SAAA,CAAU,KAAV,EAAiB,QAAjB;EACR,IAAG,OAAA,CAAQ,QAAR,CAAH;IACC,KAAA,0CAAA;;MACC,KAAK,CAAC,GAAD,CAAL,GAAa,UAAA,CAAW,KAAK,CAAC,GAAD,CAAhB;IADd,CADD;;EAGA,IAAG,KAAK,CAAC,CAAT;IACC,eAAA,CAAgB,QAAhB,EADD;;AAEA,SAAO;AA3DS",
  "sourcesContent": [
    "# cmd-args.coffee\r\n\r\nimport parseArgs from 'minimist'\r\nimport {\r\n\tundef, defined, notdefined, isString, isHash, isArray,\r\n\t} from '@jdeighan/base-utils'\r\nimport {LOG} from '@jdeighan/base-utils/log'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\ndisplayHelpText = (helpText) =>\r\n\r\n\tif defined(helpText)\r\n\t\tLOG helpText\r\n\telse\r\n\t\tLOG \"No help available\"\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- By default, throws error if unexpected args are seen\r\n\r\nexport getArgs = (hOptions, lArgs=process.argv.slice(2), helpText=undef) =>\r\n\t# --- hOptions should include keys for types of args\r\n\t#        with value being an array of option keys, e.g.\r\n\t#\r\n\t#        {\r\n\t#           boolean: ['a','b','c','h']\r\n\t#           string: ['name','count']\r\n\t#           default: {\r\n\t#              a: true\r\n\t#              }\r\n\t#           unknown: (opt) =>\r\n\t#              LOG \"Unknown option '#{opt}'\"\r\n\t#           }\r\n\t#\r\n\t#     when invoked with:\r\n\t#        <script> -c --name=abc --count=5 def ghi`\r\n\t#     will return:\r\n\t#        {\r\n\t#           c: true,          # explicitly on cmd line\r\n\t#           a: true,          # default value\r\n\t#           name: 'abc',\r\n\t#           count: 5          # returned as a number\r\n\t#           _: ['def','ghi']  # non-options\r\n\t#           }\r\n\t#\r\n\t#     if lArgs is a string, it's split on whitespace\r\n\t#     hArgs._ contains and array of all non-options\r\n\r\n\tassert isHash(hOptions), \"hOptions must be a hash\"\r\n\tif hOptions.hasOwnProperty('debug')\r\n\t\tdebug = hOptions.debug\r\n\t\tdelete hOptions.debug\r\n\tif hOptions.hasOwnProperty('number')\r\n\t\tlNumbers = hOptions.number\r\n\t\tif hOptions.hasOwnProperty('string')\r\n\t\t\thOptions.string = [hOptions.string..., lNumbers]\r\n\t\telse\r\n\t\t\thOptions.string = lNumbers\r\n\t\tdelete hOptions.number\r\n\tif isString(lArgs)\r\n\t\tlArgs = lArgs.trim().split(/\\s+/)\r\n\t\tif debug\r\n\t\t\tLOG lArgs\r\n\telse\r\n\t\tassert isArray(lArgs), \"lArgs must be an array\"\r\n\r\n\t# --- If no 'unknown' key in hOptions, add a default one\r\n\tif notdefined(hOptions.unknown)\r\n\t\thOptions.unknown = (opt) =>\r\n\t\t\tif opt.startsWith('-')\r\n\t\t\t\tdisplayHelpText helpText\r\n\t\t\t\tcroak \"Unknown option '#{opt}'\"\r\n\t\t\treturn\r\n\thArgs = parseArgs(lArgs, hOptions)\r\n\tif defined(lNumbers)\r\n\t\tfor key in lNumbers\r\n\t\t\thArgs[key] = parseFloat(hArgs[key])\r\n\tif hArgs.h\r\n\t\tdisplayHelpText helpText\r\n\treturn hArgs\r\n"
  ]
}