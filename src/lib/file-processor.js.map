{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\file-processor.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# file-processor.coffee\n\nimport {globSync as glob} from 'glob'\n\nimport {\n\tundef, defined, notdefined, getOptions, add_s, isEmpty, nonEmpty,\n\tisString, isHash, toJSON, jsType, OL,\n\thasKey, hasAnyKey, addNewKey, toBlock, toArray,\n\tsortedArrayOfHashes,\n\t} from '@jdeighan/base-utils'\nimport {toTAML} from '@jdeighan/base-utils/taml'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {\n\tmkpath, mkDir, pathType, parsePath, subPath,\n\tslurp, barf, isFile,\n\t} from '@jdeighan/base-utils/fs'\nimport {\n\tallFilesMatching, readTextFile,\n\t} from '@jdeighan/base-utils/read-file'\nimport {\n\tdbgEnter, dbgReturn, dbg,\n\t} from '@jdeighan/base-utils/debug'\nimport {indented} from '@jdeighan/base-utils/indent'\n\n# ---------------------------------------------------------------------------\n\nexport class FileProcessor\n\n\tconstructor: (@pattern=undef, hOptions={}) ->\n\t\t# --- pattern is a glob pattern\n\t\t#     if pattern is undef, use process.cwd() + \"/*\"\n\t\t# --- Valid options\n\t\t#        allowOverwrite - allow overwrite of original files\n\t\t#        hGlobOptions - options to pass to glob()\n\t\t#        eager - include content of files in hFile\n\t\t# --- Valid glob options:\n\t\t#        ignore - glob pattern for files to ignore\n\t\t#        dot - include dot files/directories (default: false)\n\t\t#        cwd - change working directory\n\n\t\tdbgEnter 'FileProcessor', @pattern, hOptions\n\t\t@hOptions = getOptions hOptions, {\n\t\t\tallowOverwrite: false\n\t\t\teager: false\n\t\t\thGlobOptions: {}\n\t\t\t}\n\n\t\t@lUserData = []  # --- filled in by readAll()\n\t\tdbgReturn 'FileProcessor'\n\n\t# ..........................................................\n\n\tgetUserData: () ->\n\n\t\treturn @lUserData\n\n\t# ..........................................................\n\n\tgetSortedUserData: () ->\n\n\t\treturn sortedArrayOfHashes(@lUserData, 'filePath')\n\n\t# ..........................................................\n\n\tdumpdata: (h) ->\n\n\t\tdbgEnter 'FileProcessor.dumpdata', h\n\t\ttaml = toTAML(h, '!useTabs !useDashes indent=1')\n\t\tconsole.log taml\n\t\tdbgReturn 'FileProcessor.dumpdata'\n\t\treturn\n\n\t# ..........................................................\n\n\tdumpUserData: (format='nice') ->\n\t\t# --- formats: 'nice', 'json', 'taml'\n\n\t\tdbgEnter 'FileProcessor.dumpUserData', format\n\t\tswitch format.toLowerCase()\n\t\t\twhen 'nice'\n\t\t\t\tfor h in @lUserData\n\t\t\t\t\t{fileName} = parsePath(h.filePath)\n\t\t\t\t\tdbg \"dump info for file '#{fileName}'\"\n\t\t\t\t\tstr = '-'.repeat(10)\n\t\t\t\t\tconsole.log \"#{str} #{fileName} #{str}\"\n\t\t\t\t\t@dumpdata(h)\n\t\t\twhen 'json'\n\t\t\t\tconsole.log toJSON(@lUserData, '!useTabs')\n\t\t\twhen 'taml'\n\t\t\t\tconsole.log toTAML(@lUserData, '!useTabs')\n\t\t\telse\n\t\t\t\tcroak \"Bad format: #{format}\"\n\t\tdbgReturn 'FileProcessor.dumpUserData'\n\t\treturn\n\n\t# ..........................................................\n\n\treadAll: () ->\n\n\t\tdbgEnter 'FileProcessor.readAll'\n\t\tnumFiles = 0\n\n\t\thOptions = {\n\t\t\thGlobOptions: @hOptions.hGlobOptions\n\t\t\teager: @hOptions.eager\n\t\t\t}\n\t\tdbg \"Find files matching #{OL(@pattern)}\"\n\t\tif nonEmpty(hOptions)\n\t\t\tdbg 'hOptions', hOptions\n\t\tfor hFile from allFilesMatching(@pattern, hOptions)\n\t\t\t{filePath} = hFile\n\t\t\tif @filterFile hFile\n\t\t\t\tdbg \"[#{numFiles}] #{filePath} - Handle\"\n\t\t\t\th = @handleFile @transformFile(hFile)\n\t\t\t\tif defined(h)\n\t\t\t\t\tassert isHash(h), \"handleFile() returned non-hash\"\n\t\t\t\t\taddNewKey h, 'filePath', filePath\n\t\t\t\t\t@lUserData.push h\n\t\t\t\tnumFiles += 1\n\t\t\telse\n\t\t\t\tdbg \"[#{numFiles}] #{hFile.fileName} - Skip\"\n\n\t\tdbg \"#{numFiles} file#{add_s(numFiles)} processed\"\n\t\tdbgReturn 'FileProcessor.readAll', @lUserData\n\t\treturn @lUserData\n\n\t# ..........................................................\n\n\ttransformFile: (hFile) ->\n\n\t\treturn hFile\n\n\t# ..........................................................\n\n\tfilterFile: (hFile) ->\n\n\t\tdbgEnter 'FileProcessor.filterFile', hFile\n\t\tdbgReturn 'FileProcessor.filterFile', true\n\t\treturn true    # by default, handle all files in dir\n\n\t# ..........................................................\n\n\thandleFile: (hFile) ->\n\t\t# --- does nothing, returns nothing\n\n\t\tdbgEnter 'FileProcessor.handleFile', hFile.fileName\n\t\tdbgReturn 'FileProcessor.handleFile'\n\t\treturn\n\n\t# ..........................................................\n\n\twriteAll: () ->\n\n\t\t# --- Cycle through @lUserData, rewriting files as needed\n\t\t#     Items in @lUserData are hashes with key 'filePath'\n\t\t#        and whatever was returned from @handleFile()\n\n\t\tfor hUserData in @lUserData\n\t\t\tnewpath = @writeFileTo hUserData\n\t\t\tif defined(newpath)\n\t\t\t\t@writeFile newpath, hUserData\n\t\treturn\n\n\t# ..........................................................\n\t# SHOULD OVERRIDE if you want to write files anywhere\n\t#    other than the default 'temp' subfolder\n\t#\n\t# --- return undef to not write this file\n\n\twriteFileTo: (hUserData) ->\n\n\t\t# --- by default, write to a parallel directory\n\t\treturn subPath hUserData.filePath, 'temp'\n\n\t# ..........................................................\n\t# --- SHOULD OVERRIDE if you intend to write files\n\n\twriteFile: (path, hUserData) ->\n\t\t# --- path may be a new path\n\n\t\treturn    # by default, does nothing\n\n# ---------------------------------------------------------------------------\n\nexport class LineProcessor extends FileProcessor\n\n\tdumpdata: (hUserData) ->\n\n\t\t{lineNum, lRecipe} = hUserData\n\t\tconsole.log \"LINE #{lineNum}:\"\n\t\tconsole.log toTAML(lRecipe)\n\t\treturn\n\n\t# ..........................................................\n\n\thandleMetaData: (hMetaData) ->\n\n\t\treturn    # --- by default, does nothing\n\n\t# ..........................................................\n\n\thandleFile: (hFile) ->\n\n\t\tdbgEnter 'LineProcessor.handleFile', hFile.fileName\n\t\t{filePath} = hFile\n\t\tassert isString(filePath), \"not a string: #{OL(filePath)}\"\n\t\tlRecipe = []   # --- array of hashes\n\t\tnumLines = 0\n\t\tfileChanged = false\n\n\t\taddToRecipe = (item, orgLine) =>\n\t\t\tswitch jsType(item)[0]\n\t\t\t\twhen 'string'\n\t\t\t\t\tlRecipe.push item\n\t\t\t\t\tif (item == orgLine)\n\t\t\t\t\t\tdbg \"RECIPE: '#{item}'\"\n\t\t\t\t\telse\n\t\t\t\t\t\tfileChanged = true\n\t\t\t\t\t\tdbg \"RECIPE: '#{item}' - changed\"\n\t\t\t\twhen 'hash'\n\t\t\t\t\tfileChanged = true\n\t\t\t\t\taddNewKey item, 'lineNum', numLines\n\t\t\t\t\tdbg \"RECIPE:\", item\n\t\t\t\t\tlRecipe.push item\n\t\t\t\twhen 'array'\n\t\t\t\t\tfileChanged = true\n\t\t\t\t\tfor subitem in item\n\t\t\t\t\t\taddToRecipe subitem, orgLine\n\t\t\t\telse\n\t\t\t\t\tassert notdefined(item), \"bad return from handleLine()\"\n\t\t\t\t\tfileChanged = true\n\t\t\t\t\tdbg \"RECIPE: line '#{line}' removed\"\n\n\n\t\t[hMetaData, reader, numLines] = readTextFile(filePath)\n\t\t@handleMetaData hMetaData\n\t\tfor line from reader()\n\t\t\tdbg \"LINE: #{OL(line)}\"\n\t\t\tif defined(line)\n\t\t\t\tnumLines += 1\n\n\t\t\t\t# --- handleLine should return:\n\t\t\t\t#     - undef to ignore line\n\t\t\t\t#     - string to write a line literally\n\t\t\t\t#     - a hash which cannot contain key 'lineNum'\n\n\t\t\t\tobj = @transformLine(line, numLines, filePath)\n\t\t\t\tnewline = @handleLine obj, numLines, filePath\n\t\t\t\taddToRecipe newline, line\n\t\t\telse\n\t\t\t\tdbg \"line was undef\"\n\t\t\t\tbreak\n\n\t\tif fileChanged\n\t\t\tresult = {lRecipe}\n\t\telse\n\t\t\tresult = {}\n\n\t\tdbg \"#{numLines} lines processed\"\n\t\tdbgReturn 'LineProcessor.handleFile', result\n\t\treturn result\n\n\t# ..........................................................\n\t# --- SHOULD OVERRIDE, to transform a line\n\n\ttransformLine: (line, lineNum, filePath) ->\n\n\t\treturn line   # by default, returns original line\n\n\t# ..........................................................\n\t# --- SHOULD OVERRIDE, to save data for a given line\n\n\thandleLine: (line, lineNum, filePath) ->\n\n\t\treturn   # by default, returns nothing\n\n\t# ..........................................................\n\n\twriteFile: (newPath, hUserData) ->\n\n\t\tdbgEnter 'LineProcessor.writeFile', newPath, hUserData\n\t\t{lRecipe, filePath} = hUserData\n\n\t\tif ! @hOptions.allowOverwrite\n\t\t\tassert (newPath != filePath), \"Attempt to write org file\"\n\n\t\tif defined(lRecipe)\n\t\t\tlOutput = []\n\t\t\tfor item in lRecipe\n\t\t\t\tif isString(item)\n\t\t\t\t\tlOutput.push item\n\t\t\t\telse\n\t\t\t\t\tassert isHash(item), \"Bad item in recipe: #{OL(item)}\"\n\t\t\t\t\ttext = @writeLine item\n\t\t\t\t\tif defined(text)\n\t\t\t\t\t\tassert isString(text), \"text not a string\"\n\t\t\t\t\t\tlOutput.push text\n\n\t\t\t# --- Now write out the text in lOutput\n\t\t\tif (lOutput.length > 0)\n\t\t\t\tbarf toBlock(lOutput), newPath\n\t\tdbgReturn 'LineProcessor.writeFile'\n\t\treturn\n\n\t# ..........................................................\n\t# --- SHOULD OVERRIDE, to write data for a given line\n\n\twriteLine: (h) ->\n\n\t\treturn    # --- by default, returns nothing"
  ]
}