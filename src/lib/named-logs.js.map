{
  "version": 3,
  "file": "named-logs.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\named-logs.coffee"
  ],
  "names": [],
  "mappings": "AAAmB;AAAA,IAAA;;AAEnB,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,MAD7B;EACqC,UADrC;CAAA,MAAA;;AAGA,OAAA;EAAQ,MAAR;EAAgB,KAAhB;CAAA,MAAA,kCALmB;;;AASnB,OAAA,IAAa,YAAN,MAAA,UAAA;EAEN,WAAa,CAAA,CAAA,EAAA;;;;;IAMZ,IAAC,CAAA,KAAD,GAAS,CAAA;EANG,CAAd;;;EAUC,IAAM,CAAA,CAAA;IAEL,OAAO,CAAC,GAAR,CAAY,QAAZ;IACA,OAAO,CAAC,GAAR,CAAY,IAAI,CAAC,SAAL,CAAe,IAAC,CAAA,KAAhB,EAAuB,IAAvB,EAA6B,CAA7B,CAAZ;EAHK,CAVP;;;EAkBC,GAAK,CAAC,IAAD,EAAO,GAAP,CAAA;IAEJ,IAAG,MAAA,CAAO,IAAC,CAAA,KAAR,EAAe,IAAf,CAAH;MACC,IAAC,CAAA,KAAK,CAAC,IAAD,CAAM,CAAC,IAAb,CAAkB,GAAlB,EADD;KAAA,MAAA;MAGC,IAAC,CAAA,KAAK,CAAC,IAAD,CAAN,GAAe,CAAC,GAAD,EAHhB;;EAFI,CAlBN;;;;;EA8BC,OAAS,CAAC,IAAD,EAAO,OAAK,KAAZ,CAAA;AAEV,QAAA;IAAE,IAAG,CAAE,MAAA,CAAO,IAAC,CAAA,KAAR,EAAe,IAAf,CAAL;AACC,aAAO,GADR;;IAEA,KAAA,GAAQ,IAAC,CAAA,KAAK,CAAC,IAAD;IACd,IAAG,OAAA,CAAQ,IAAR,CAAH;MACC,MAAA,CAAO,UAAA,CAAW,IAAX,CAAP,EAAyB,uBAAzB;AACA,aAAO,KAAK,CAAC,MAAN,CAAa,IAAb,CAAkB,CAAC,IAAnB,CAAwB,IAAxB,EAFR;KAAA,MAAA;AAIC,aAAO,KAAK,CAAC,IAAN,CAAW,IAAX,EAJR;;EALQ,CA9BV;;;EA2CC,UAAY,CAAC,OAAK,KAAN,CAAA;AAEb,QAAA,CAAA,EAAA,QAAA,EAAA,IAAA,EAAA;IAAE,QAAA,GAAW;AACX;IAAA,KAAA,WAAA;;;MACC,QAAQ,CAAC,IAAT,CAAc,IAAC,CAAA,OAAD,CAAS,IAAT,EAAe,IAAf,CAAd;IADD;AAEA,WAAO,QAAQ,CAAC,IAAT,CAAc,IAAd;EALI,CA3Cb;;;EAoDC,KAAO,CAAC,IAAD,CAAA;IAEN,IAAG,MAAA,CAAO,IAAC,CAAA,KAAR,EAAe,IAAf,CAAH;MACC,OAAO,IAAC,CAAA,KAAK,CAAC,IAAD,EADd;;EAFM,CApDR;;;EA4DC,YAAc,CAAA,CAAA;IAEb,IAAC,CAAA,KAAD,GAAS,CAAA;EAFI;;AA9DR",
  "sourcesContent": [
    "# named-logs.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, hasKey, isFunction,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class NamedLogs\r\n\r\n\tconstructor: () ->\r\n\r\n\t\t# --- {\r\n\t\t#        <name>: [<str>, ...],\r\n\t\t#        ...\r\n\t\t#        }\r\n\t\t@hLogs = {}\r\n\r\n\t# ..........................................................\r\n\r\n\tdump: () ->\r\n\r\n\t\tconsole.log \"hLogs:\"\r\n\t\tconsole.log JSON.stringify(@hLogs, null, 3)\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tlog: (name, str) ->\r\n\r\n\t\tif hasKey(@hLogs, name)\r\n\t\t\t@hLogs[name].push str\r\n\t\telse\r\n\t\t\t@hLogs[name] = [str]\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- func is a function to filter lines returned\r\n\t#     returns a block, i.e. multi-line string\r\n\r\n\tgetLogs: (name, func=undef) ->\r\n\r\n\t\tif ! hasKey(@hLogs, name)\r\n\t\t\treturn ''\r\n\t\tlLogs = @hLogs[name]\r\n\t\tif defined(func)\r\n\t\t\tassert isFunction(func), \"filter not a function\"\r\n\t\t\treturn lLogs.filter(func).join(\"\\n\")\r\n\t\telse\r\n\t\t\treturn lLogs.join(\"\\n\")\r\n\r\n\t# ..........................................................\r\n\r\n\tgetAllLogs: (func=undef) ->\r\n\r\n\t\tlAllLogs = []\r\n\t\tfor own name,h of @hLogs\r\n\t\t\tlAllLogs.push @getLogs(name, func)\r\n\t\treturn lAllLogs.join(\"\\n\")\r\n\r\n\t# ..........................................................\r\n\r\n\tclear: (name) ->\r\n\r\n\t\tif hasKey(@hLogs, name)\r\n\t\t\tdelete @hLogs[name]\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tclearAllLogs: () ->\r\n\r\n\t\t@hLogs = {}\r\n\t\treturn\r\n"
  ]
}