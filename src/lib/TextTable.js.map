{
  "version": 3,
  "file": "TextTable.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\TextTable.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# --- TextTable.coffee\r\n\r\nimport {sprintf} from 'sprintf-js'\r\nimport {\r\n\tundef, defined, notdefined, getOptions, words, OL, range,\r\n\tpad, toBlock, LOG, nonEmpty,\r\n\tjsType, isString, isNumber, isArray,\r\n\t} from '@jdeighan/base-utils'\r\nimport {\r\n\tassert, croak,\r\n\t} from '@jdeighan/base-utils/exceptions'\r\nimport {\r\n\tdbgEnter, dbgReturn, dbg, dbgCall,\r\n\t} from '@jdeighan/base-utils/debug'\r\n\r\nhAlignCodes = {\r\n\tl: 'left'\r\n\tc: 'center'\r\n\tr: 'right'\r\n\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class TextTable\r\n\r\n\tconstructor: (formatStr, hOptions={}) ->\r\n\t\t# --- currently no options\r\n\r\n\t\tdbgEnter 'TextTable', formatStr, hOptions\r\n\t\tassert defined(formatStr), \"missing format string\"\r\n\t\t@lColFormats = words(formatStr).map (str) =>\r\n\t\t\tif (lMatches = str.match(/^(l|c|r)(\\%.*)?$/))\r\n\t\t\t\t[_, align, fmt] = lMatches\r\n\t\t\t\treturn [hAlignCodes[align], fmt]\r\n\t\t\telse\r\n\t\t\t\tcroak \"Bad format string: #{OL(formatStr)}\"\r\n\t\tdbg 'lColFormats', @lColFormats\r\n\r\n\t\t@numCols = @lColFormats.length\r\n\t\tdbg 'numCols', @numCols\r\n\r\n\t\t# --- Items in @lRows can be:\r\n\t\t#        an Array of labels\r\n\t\t#        an Array of values\r\n\t\t#        a string of length 1 (separator line)\r\n\t\t#        the word 'total'\r\n\t\t@lRows = []\r\n\t\t@lLabelRows = []      # --- [<index>, ...]\r\n\t\t@lFormattedRows = []  # --- copy of @lRows with\r\n\t\t                      #     formats applied, but not aligned\r\n\t\t@lColWidths = []\r\n\t\t@closed = false\r\n\r\n\t# ..........................................................\r\n\r\n\tisLabelRow: (rowNum) ->\r\n\r\n\t\treturn @lLabelRows.includes(rowNum)\r\n\r\n\t# ..........................................................\r\n\r\n\tdumpInternals: () ->\r\n\r\n\t\tLOG 'lColFormats:', @lColFormats\r\n\t\tLOG 'numCols:', @numCols\r\n\t\tif nonEmpty(@lRows)\r\n\t\t\tLOG 'lRows:', @lRows\r\n\t\tif nonEmpty(@lLabelRows)\r\n\t\t\tLOG 'lLabelRows:', @lLabelRows\r\n\t\tif nonEmpty(@lFormattedRows)\r\n\t\t\tLOG 'lFormattedRows:', @lFormattedRows\r\n\t\tif nonEmpty(@lColWidths)\r\n\t\t\tLOG 'lColWidths:', @lColWidths\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddLabels: (lRow) ->\r\n\r\n\t\tdbgEnter 'addLabels'\r\n\t\tassert ! @closed, \"table is closed\"\r\n\t\tassert (lRow.length == @numCols), \"lRow = #{OL(lRow)}\"\r\n\t\tdbg 'lRow', lRow\r\n\t\t@lLabelRows.push @lRows.length\r\n\t\t@lRows.push lRow\r\n\t\tdbgReturn 'addLabels'\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddSep: (ch='-') ->\r\n\r\n\t\tdbgEnter 'addSep'\r\n\t\tassert ! @closed, \"table is closed\"\r\n\t\tassert (ch.length == 1), \"Non-char arg\"\r\n\t\t@lRows.push ch\r\n\t\tdbgReturn 'addSep'\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddData: (lRow) ->\r\n\r\n\t\tdbgEnter 'addData'\r\n\t\tassert ! @closed, \"table is closed\"\r\n\t\tassert (lRow.length == @numCols), \"lRow = #{OL(lRow)}\"\r\n\t\tdbg 'lRow', lRow\r\n\t\t@lRows.push lRow\r\n\t\tdbgReturn 'addData'\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddTotals: () ->\r\n\r\n\t\tdbgEnter 'addTotals'\r\n\t\tassert ! @closed, \"table is closed\"\r\n\t\t@lRows.push 'total'\r\n\t\tdbgReturn 'addTotals'\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- Create @lFormattedRows from @lRows\r\n\t#     Calculate @lColWidths\r\n\r\n\tclose: () ->\r\n\r\n\t\tdbgEnter 'close'\r\n\r\n\t\t# --- Allow multiple calls to close()\r\n\t\tif @closed\r\n\t\t\tdbg \"already closed, returning\"\r\n\t\t\tdbgReturn 'close'\r\n\t\t\treturn\r\n\r\n\t\t# --- Calculate column widths as max of all values in col\r\n\t\t#     Keep running totals for each column, which\r\n\t\t#        may affect column widths\r\n\r\n\t\tdbg \"Calculate column widths, build lFormattedRows\"\r\n\r\n\t\t@lColWidths = @lColFormats.map (x) => 0\r\n\t\t@lColTotals = @lColFormats.map (x) => 0\r\n\t\tfor row,rowNum in @lRows\r\n\t\t\tif (row == 'total')\r\n\t\t\t\tlFormattedItems = for colNum in range(@numCols)\r\n\t\t\t\t\ttotal = @lColTotals[colNum]\r\n\t\t\t\t\tif defined(total)\r\n\t\t\t\t\t\t[align, fmt] = @lColFormats[colNum]\r\n\t\t\t\t\t\tformatted = sprintf(fmt, total)\r\n\t\t\t\t\t\tif (formatted.length > @lColWidths[colNum])\r\n\t\t\t\t\t\t\t@lColWidths[colNum] = formatted.length\r\n\t\t\t\t\t\tformatted\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t''\r\n\t\t\t\t@lFormattedRows.push lFormattedItems\r\n\t\t\telse if isString(row)\r\n\t\t\t\t@lFormattedRows.push row\r\n\t\t\telse if isArray(row)\r\n\t\t\t\tif @isLabelRow(rowNum)\r\n\t\t\t\t\t@lFormattedRows.push row\r\n\t\t\t\telse\r\n\t\t\t\t\tlFormattedItems = row.map (item, colNum) =>\r\n\t\t\t\t\t\tif notdefined(item)\r\n\t\t\t\t\t\t\treturn ''\r\n\t\t\t\t\t\tif isNumber(item)\r\n\t\t\t\t\t\t\t@lColTotals[colNum] += item\r\n\t\t\t\t\t\t[align, fmt] = @lColFormats[colNum]\r\n\t\t\t\t\t\t# LOG \"format = '#{fmt}'\"\r\n\t\t\t\t\t\t# LOG \"item = #{OL(item)}\"\r\n\t\t\t\t\t\tif defined(fmt)\r\n\t\t\t\t\t\t\tformatted = sprintf(fmt, item)\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tformatted = item\r\n\t\t\t\t\t\tif (formatted.length > @lColWidths[colNum])\r\n\t\t\t\t\t\t\t@lColWidths[colNum] = formatted.length\r\n\t\t\t\t\t\treturn formatted\r\n\t\t\t\t\t@lFormattedRows.push lFormattedItems\r\n\t\t\telse\r\n\t\t\t\t@lFormattedRows.push row\r\n\r\n\t\t# --- Now that we have all column widths, we can\r\n\t\t#     expand separator rows\r\n\r\n\t\tdbg \"Expand separator rows\"\r\n\r\n\t\tfor row, rowNum in @lFormattedRows\r\n\t\t\tif isString(row)\r\n\t\t\t\t@lFormattedRows[rowNum] = range(@numCols).map((colNum) =>\r\n\t\t\t\t\trow.repeat(@lColWidths[colNum])\r\n\t\t\t\t\t)\r\n\r\n\t\t@closed = true\r\n\t\tdbgCall () => @dumpInternals()\r\n\t\tdbgReturn 'close'\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tasString: () ->\r\n\r\n\t\tdbgEnter 'asString'\r\n\t\t@close()\r\n\r\n\t\t# --- Map each item in @lFormattedRows to a string\r\n\t\tlLines = @lFormattedRows.map (row, rowNum) =>\r\n\t\t\tassert isArray(row), \"lFormattedRows contains #{OL(row)}\"\r\n\t\t\tif @isLabelRow(rowNum)\r\n\t\t\t\treturn row.map((item, colNum) =>\r\n\t\t\t\t\tif notdefined(item)\r\n\t\t\t\t\t\t''\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tassert isString(item), \"item not a string: #{OL(item)}\"\r\n\t\t\t\t\t\tpad(item, @lColWidths[colNum], 'justify=center')).join(' ')\r\n\t\t\telse\r\n\t\t\t\treturn row.map((item, colNum) =>\r\n\t\t\t\t\tassert isString(item), \"item not a string\"\r\n\t\t\t\t\talign = @lColFormats[colNum][0]\r\n\t\t\t\t\tpad(item, @lColWidths[colNum], \"justify=#{align}\")\r\n\t\t\t\t\t).join(' ')\r\n\r\n\t\ttable = toBlock(lLines)\r\n\t\tdbgReturn 'asString', table\r\n\t\treturn table\r\n"
  ]
}