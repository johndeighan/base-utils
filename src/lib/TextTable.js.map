{
  "version": 3,
  "file": "TextTable.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\TextTable.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# --- TextTable.coffee\r\n\r\nimport {sprintf} from 'sprintf-js'\r\nimport {\r\n\tundef, defined, notdefined, getOptions, words, OL, range, hasKey,\r\n\tpad, toBlock, LOG, isEmpty, nonEmpty, isNonEmptyString,\r\n\tjsType, isString, isNumber, isArray, isArrayOfStrings,\r\n\tisFunction,\r\n\t} from '@jdeighan/base-utils'\r\nimport {\r\n\tassert, croak,\r\n\t} from '@jdeighan/base-utils/exceptions'\r\nimport {\r\n\tdbgEnter, dbgReturn, dbg, dbgCall,\r\n\t} from '@jdeighan/base-utils/debug'\r\n\r\nhAlignWords = {\r\n\tl: 'left'\r\n\tc: 'center'\r\n\tr: 'right'\r\n\t}\r\n\r\nlOpCodes = words('labels data sep fullsep total subtotal literal')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class TextTable\r\n\r\n\tconstructor: (formatStr, hOptions={}) ->\r\n\t\t# --- Valid options:\r\n\t\t#        decPlaces - used for numbers with no % style format\r\n\t\t#                    default: 2\r\n\t\t#        parseNumbers - string data that looks like a number\r\n\t\t#                       is treated as a number, default: false\r\n\r\n\t\tdbgEnter 'TextTable', formatStr, hOptions\r\n\t\tassert defined(formatStr), \"missing format string\"\r\n\t\t@hOptions = getOptions hOptions, {\r\n\t\t\tdecPlaces: 2\r\n\t\t\tparseNumbers: false\r\n\t\t\t}\r\n\r\n\t\tlWords = words(formatStr)\r\n\t\t@numCols = lWords.length\r\n\t\tdbg 'numCols', @numCols\r\n\r\n\t\t@lColAligns  = new Array(@numCols)\r\n\t\t@lColFormats = new Array(@numCols)\r\n\r\n\t\tfor word,colNum in lWords\r\n\t\t\tif (lMatches = word.match(/^(l|c|r)(\\%\\S+)?$/))\r\n\t\t\t\t[_, align, fmt] = lMatches\r\n\t\t\t\talignWord = hAlignWords[align]\r\n\t\t\t\tassert defined(alignWord), \"Bad format string: #{OL(formatStr)}\"\r\n\t\t\t\t@lColAligns[colNum] = alignWord\r\n\t\t\t\t@lColFormats[colNum] = fmt       # may be undef\r\n\t\t\telse\r\n\t\t\t\tcroak \"Bad format string: #{OL(formatStr)}\"\r\n\r\n\t\tdbg 'lColFormats', @lColFormats\r\n\t\tdbg 'lColAligns', @lColAligns\r\n\r\n\t\t# --- Items in @lRows must be a hash w/key 'opcode'\r\n\t\t@lRows = []\r\n\t\t@lColWidths = new Array(@numCols).fill(0)\r\n\t\t@totalWidth = undef\r\n\t\t@closed = false\r\n\r\n\t\t# --- Accumulate totals and subtotals\r\n\t\t#     When a subtotal row is added, subtotals are reset to 0\r\n\t\t@lColTotals    = new Array(@numCols).fill(undef)\r\n\t\t@lColSubTotals = new Array(@numCols).fill(undef)\r\n\r\n\t# ..........................................................\r\n\r\n\tresetSubTotals: () ->\r\n\r\n\t\t@lColSubTotals.fill(undef)\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\talignItem: (item, colNum) ->\r\n\r\n\t\tassert @closed, \"table not closed\"\r\n\t\tassert isString(item), \"Not a string: #{OL(item)}\"\r\n\t\tif (item.length == width)\r\n\t\t\treturn item\r\n\t\talign = @lColAligns[colNum]\r\n\t\tassert ['left','center','right'].includes(align), \\\r\n\t\t\t\t\"Bad align parm: #{OL(align)}\"\r\n\t\twidth = @lColWidths[colNum]\r\n\t\treturn pad(item, width, \"justify=#{align}\")\r\n\r\n\t# ..........................................................\r\n\r\n\tformatItem: (item, colNum) ->\r\n\r\n\t\tif notdefined(item)\r\n\t\t\treturn ''\r\n\t\tfmt = @lColFormats[colNum]\r\n\t\tif defined(fmt)\r\n\t\t\treturn sprintf(fmt, item)\r\n\t\telse if isString(item)\r\n\t\t\treturn item\r\n\t\telse if isNumber(item)\r\n\t\t\treturn item.toFixed(@hOptions.decPlaces)\r\n\t\telse\r\n\t\t\treturn OL(item)\r\n\r\n\t# ..........................................................\r\n\r\n\tdumpInternals: () ->\r\n\r\n\t\tLOG 'lColAligns', @lColAligns\r\n\t\tLOG 'lColFormats:', @lColFormats\r\n\t\tLOG 'numCols:', @numCols\r\n\t\tif nonEmpty(@lRows)\r\n\t\t\tLOG 'lRows:', @lRows\r\n\t\tif nonEmpty(@lColWidths)\r\n\t\t\tLOG 'lColWidths:', @lColWidths\r\n\t\tif defined(@totalWidth)\r\n\t\t\tLOG 'totalWidth', @totalWidth\r\n\t\tif nonEmpty(@lColTotals)\r\n\t\t\tLOG 'lColTotals:', @lColTotals\r\n\t\tif nonEmpty(@lColSubTotals)\r\n\t\t\tLOG 'lColSubTotals:', @lColSubTotals\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tadjustColWidths: (lFormatted) ->\r\n\r\n\t\tfor str,colNum in lFormatted\r\n\t\t\tassert isString(str), \"Not a string: #{OL(str)}\"\r\n\t\t\tif (str.length > @lColWidths[colNum])\r\n\t\t\t\t@lColWidths[colNum] = str.length\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taccum: (num, colNum) ->\r\n\r\n\t\tassert isNumber(num), \"Not a number: #{OL(num)}\"\r\n\r\n\t\tif defined(@lColTotals[colNum])\r\n\t\t\t@lColTotals[colNum] += num\r\n\t\telse\r\n\t\t\t@lColTotals[colNum] = num\r\n\r\n\t\tif defined(@lColSubTotals[colNum])\r\n\t\t\t@lColSubTotals[colNum] += num\r\n\t\telse\r\n\t\t\t@lColSubTotals[colNum] = num\r\n\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tflatten: (lRow) ->\r\n\r\n\t\tif (lRow.length == 1) && isArray(lRow[0])\r\n\t\t\treturn lRow[0]\r\n\t\treturn lRow\r\n\r\n\t# ..........................................................\r\n\r\n\tlabels: (lRow...) ->\r\n\r\n\t\tlRow = @flatten(lRow)\r\n\t\tdbgEnter 'labels', lRow\r\n\t\tassert ! @closed, \"table is closed\"\r\n\t\tassert isArray(lRow), \"Not an array: #{OL(lRow)}\"\r\n\t\tassert (lRow.length == @numCols), \"lRow = #{OL(lRow)}\"\r\n\t\t@adjustColWidths lRow\r\n\t\t@lRows.push {\r\n\t\t\topcode: 'labels'\r\n\t\t\tlFormatted: lRow\r\n\t\t\t}\r\n\t\tdbgReturn 'labels'\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tdata: (lRow...) ->\r\n\r\n\t\tlRow = @flatten(lRow)\r\n\t\tdbgEnter 'data', lRow\r\n\t\tassert ! @closed, \"table is closed\"\r\n\t\tassert (lRow.length == @numCols), \"lRow = #{OL(lRow)}\"\r\n\t\tlFormatted = lRow.map (item, colNum) =>\r\n\t\t\tswitch jsType(item)[0]\r\n\t\t\t\twhen undef\r\n\t\t\t\t\tdbg \"item is undef\"\r\n\t\t\t\t\treturn ''\r\n\t\t\t\twhen 'string'\r\n\t\t\t\t\tdbg \"item is a string\"\r\n\t\t\t\t\tif @hOptions.parseNumbers && item.match(///^\r\n\t\t\t\t\t\t\t\\d+         # one or more digits\r\n\t\t\t\t\t\t\t(\\.\\d*)?    # optional decimal part\r\n\t\t\t\t\t\t\t([Ee]\\d+)?  # optional exponent\r\n\t\t\t\t\t\t\t$///)\r\n\t\t\t\t\t\tdbg \"checking if '#{item}' is a number\"\r\n\t\t\t\t\t\tnum = parseFloat(item)\r\n\t\t\t\t\t\tdbg 'num', num\r\n\t\t\t\t\t\t@accum num, colNum\r\n\t\t\t\t\t\tformatted = @formatItem(num, colNum)\r\n\t\t\t\t\t\tdbg 'formatted', formatted\r\n\t\t\t\t\t\treturn formatted\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\treturn item\r\n\t\t\t\twhen 'number'\r\n\t\t\t\t\tdbg \"item is a number\"\r\n\t\t\t\t\t@accum item, colNum\r\n\t\t\t\t\tformatted = @formatItem(item, colNum)\r\n\t\t\t\t\tdbg 'formatted', formatted\r\n\t\t\t\t\treturn formatted\r\n\t\t\t\telse\r\n\t\t\t\t\tdbg \"item is not a number or string\"\r\n\t\t\t\t\tformatted = @formatItem(num, colNum)\r\n\t\t\t\t\tdbg 'formatted', formatted\r\n\t\t\t\t\treturn formatted\r\n\t\t@adjustColWidths lFormatted\r\n\t\t@lRows.push {\r\n\t\t\topcode: 'data'\r\n\t\t\tlFormatted\r\n\t\t\t}\r\n\t\tdbgReturn 'data'\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tliteral: (str) ->\r\n\r\n\t\tassert isString(str), \"Not a string: #{OL(str)}\"\r\n\t\t@lRows.push {\r\n\t\t\topcode: 'literal'\r\n\t\t\tliteral: str\r\n\t\t\t}\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tcallback: (func) ->\r\n\r\n\t\tassert isFunction(func), \"Not a function: #{OL(func)}\"\r\n\t\t@lRows.push {\r\n\t\t\topcode: 'callback'\r\n\t\t\tcallback: func\r\n\t\t\t}\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tsep: (ch='-') ->\r\n\r\n\t\tdbgEnter 'addSep'\r\n\t\tassert ! @closed, \"table is closed\"\r\n\t\tassert (ch.length == 1), \"Non-char arg\"\r\n\t\t@lRows.push {\r\n\t\t\topcode: 'sep'\r\n\t\t\tsep: ch\r\n\t\t\t}\r\n\t\tdbgReturn 'addSep'\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tfullsep: (ch='-') ->\r\n\r\n\t\tdbgEnter 'fullsep'\r\n\t\tassert ! @closed, \"table is closed\"\r\n\t\tassert (ch.length == 1), \"Non-char arg\"\r\n\t\t@lRows.push {\r\n\t\t\topcode: 'fullsep'\r\n\t\t\tfullsep: ch\r\n\t\t\t}\r\n\t\tdbgReturn 'fullsep'\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\ttitle: (title, align='center') ->\r\n\r\n\t\tdbgEnter 'title'\r\n\t\tassert ! @closed, \"table is closed\"\r\n\t\tassert isNonEmptyString(title), \"Bad title: '@{title}'\"\r\n\t\tassert ['left','center','right'].includes(align),\r\n\t\t\t\"Bad align: #{OL(align)}\"\r\n\t\t@lRows.push {\r\n\t\t\topcode: 'title'\r\n\t\t\ttitle\r\n\t\t\talign\r\n\t\t\t}\r\n\t\tdbgReturn 'title'\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\ttotals: () ->\r\n\r\n\t\tdbgEnter 'totals'\r\n\t\tassert ! @closed, \"table is closed\"\r\n\t\tlFormatted = @lColTotals.map (item, colNum) =>\r\n\t\t\treturn @formatItem(item, colNum)\r\n\t\t@adjustColWidths lFormatted\r\n\t\t@lRows.push {\r\n\t\t\topcode: 'totals'\r\n\t\t\tlFormatted\r\n\t\t\t}\r\n\t\tdbgReturn 'totals'\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tsubtotals: () ->\r\n\r\n\t\tdbgEnter 'subtotals'\r\n\t\tassert ! @closed, \"table is closed\"\r\n\t\tlFormatted = @lColSubTotals.map (item, colNum) =>\r\n\t\t\treturn @formatItem(item, colNum)\r\n\t\t@resetSubTotals()\r\n\t\t@adjustColWidths lFormatted\r\n\t\t@lRows.push {\r\n\t\t\topcode: 'subtotals'\r\n\t\t\tlFormatted\r\n\t\t\t}\r\n\t\tdbgReturn 'subtotals'\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tclose: () ->\r\n\r\n\t\tdbgEnter 'close'\r\n\r\n\t\t# --- Allow multiple calls to close()\r\n\t\tif @closed\r\n\t\t\tdbg \"already closed, returning\"\r\n\t\t\tdbgReturn 'close'\r\n\t\t\treturn\r\n\r\n\t\t# --- We can now compute some other stuff\r\n\t\t@totalWidth = @lColWidths.reduce(\r\n\t\t\t(acc, n) => acc+n,\r\n\t\t\t0) + (@numCols - 1)\r\n\r\n\t\t# --- Go through @lRows, updating some items\r\n\t\tfor hRow in @lRows\r\n\t\t\tswitch hRow.opcode\r\n\t\t\t\twhen 'sep'\r\n\t\t\t\t\thRow.lFormatted = @lColWidths.map((w) =>\r\n\t\t\t\t\t\thRow.sep.repeat(w))\r\n\t\t\t\twhen 'fullsep'\r\n\t\t\t\t\thRow.literal = hRow.fullsep.repeat(@totalWidth)\r\n\t\t\t\twhen 'title'\r\n\t\t\t\t\t{title, align} = hRow\r\n\t\t\t\t\thRow.literal = pad(title, @totalWidth, \"justify=#{align}\")\r\n\r\n\t\t@closed = true\r\n\t\tdbgCall () => @dumpInternals()\r\n\t\tdbgReturn 'close'\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tasString: () ->\r\n\r\n\t\tdbgEnter 'asString'\r\n\t\t@close()\r\n\r\n\t\t# --- Map each item in @lRows to a string\r\n\t\tlLines = @lRows.map (hRow) =>\r\n\t\t\t{opcode, literal, lFormatted} = hRow\r\n\t\t\tif (opcode == 'sep')\r\n\t\t\t\treturn lFormatted.join(' ')\r\n\t\t\telse if defined(literal)\r\n\t\t\t\treturn literal\r\n\t\t\telse if defined(lFormatted)\r\n\t\t\t\treturn lFormatted.map((item, colNum) =>\r\n\t\t\t\t\tw = @lColWidths[colNum]\r\n\t\t\t\t\ta = @lColAligns[colNum]\r\n\t\t\t\t\treturn pad(item, w, \"justify=#{a}\")\r\n\t\t\t).join(' ')\r\n\r\n\t\ttable = toBlock(lLines)\r\n\t\tdbgReturn 'asString', table\r\n\t\treturn table\r\n"
  ]
}