{
  "version": 3,
  "file": "taml.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\taml.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# taml.coffee\r\n\r\nimport YAML from 'yaml'\r\n\r\nimport {\r\n\tundef, defined, notdefined, OL, hasChar, getOptions,\r\n\tisEmpty, nonEmpty,\r\n\tisString, isFunction, isBoolean, isArray, isInteger,\r\n\tblockToArray, arrayToBlock, escapeStr, rtrim, spaces,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {indented} from '@jdeighan/base-utils/indent'\r\n\r\n# ---------------------------------------------------------------------------\r\n#   isTAML - is the string valid TAML?\r\n\r\nexport isTAML = (text) =>\r\n\r\n\treturn isString(text) && text.match(/^---$/m)\r\n\r\n# ---------------------------------------------------------------------------\r\n#   fromTAML - convert valid TAML string to a JavaScript value\r\n\r\nexport fromTAML = (text) =>\r\n\r\n\tassert defined(text), \"text is undef\"\r\n\tassert isTAML(text), \"string #{OL(text)} isn't TAML\"\r\n\r\n\t# --- TAML uses TAB characters for indentation\r\n\t#     convert to 2 spaces per TAB\r\n\tlLines = ['---']\r\n\tfor line,i in blockToArray(text)\r\n\t\tif (i == 0)\r\n\t\t\tassert (line == '---'), \"Invalid TAML marker\"\r\n\t\t\tcontinue\r\n\t\t[_, ws, str] = line.match(/^(\\s*)(.*)$/)\r\n\t\tassert ! hasChar(ws, ' '), \"space char in prefix: #{OL(line)}\"\r\n\t\tstr = str.trim()\r\n\r\n\t\t# --- Convert each TAB char to 2 spaces\r\n\t\tlLines.push '  '.repeat(ws.length) + tamlFix(str)\r\n\r\n\tblock = arrayToBlock(lLines)\r\n\ttry\r\n\t\tresult = YAML.parse(block, {skipInvalid: true})\r\n\tcatch err\r\n\t\tconsole.log '---------------------------------------'\r\n\t\tconsole.log \"ERROR in TAML:\"\r\n\t\tconsole.log text\r\n\t\tconsole.log \"BLOCK:\"\r\n\t\tconsole.log block\r\n\t\tconsole.log '---------------------------------------'\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport llSplit = (str) =>\r\n\t# --- Returns [\"<key>: \", <rest>]\r\n\t#        OR   [\"- \", <rest>]\r\n\t#        OR   undef\r\n\r\n\tif lMatches = str.match(///^\r\n\t\t\t([A-Za-z_][A-Za-z0-9_]*)    # the key\r\n\t\t\t\\s*\r\n\t\t\t:\r\n\t\t\t\\s+\r\n\t\t\t(.*)\r\n\t\t\t$///)\r\n\t\t[_, key, rest] = lMatches\r\n\t\tresult = [\"#{key}: \", rest]\r\n\telse if lMatches = str.match(///^\r\n\t\t\t\\-\r\n\t\t\t\\s+\r\n\t\t\t(.*)\r\n\t\t\t$///)\r\n\t\t[_, rest] = lMatches\r\n\t\tresult = ['- ', rest]\r\n\telse\r\n\t\tresult = undef\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport splitTaml = (str) =>\r\n\t# --- returns [ (\"<key>: \" || \"- \"), ..., <val> ] - <val> may be ''\r\n\r\n\tlParts = []\r\n\twhile lResult = llSplit(str)\r\n\t\tlParts.push lResult[0]\r\n\t\tstr = lResult[1]\r\n\tlParts.push fixValStr(str)\r\n\treturn lParts\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport tamlFix = (str) =>\r\n\t# --- str has been trimmed\r\n\r\n\tif (str == '-') || str.match(/^[A-Za-z0-9_]+:$/)\r\n\t\treturn str\r\n\tlParts = splitTaml(str)\r\n\tresult = lParts.join('')\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport fixValStr = (valStr) =>\r\n\r\n\tif isEmpty(valStr) \\\r\n\t\t\t|| (valStr == '[]') \\\r\n\t\t\t|| (valStr == '{}') \\\r\n\t\t\t|| valStr.match(/^\\d+(?:\\.\\d*)?$/) \\   # a number\r\n\t\t\t|| valStr.match(/^\\\".*\\\"$/) \\          # \" quoted string\r\n\t\t\t|| valStr.match(/^\\'.*\\'$/) \\          # ' quoted string\r\n\t\t\t|| (valStr == 'true') || (valStr == 'false')\r\n\t\tresult = valStr\r\n\telse\r\n\t\tresult = \"'\" + valStr.replace(/'/g, \"''\") + \"'\"\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- a replacer is (key, value) -> newvalue\r\n\r\nmyReplacer = (name, value) =>\r\n\r\n\tif (value == undef)\r\n\t\t# --- We need this, otherwise js-yaml\r\n\t\t#     will convert undef to null\r\n\t\tresult = \"<UNDEFINED_VALUE>\"\r\n\telse if isString(value)\r\n\t\tresult = escapeStr(value)\r\n\telse if isFunction(value)\r\n\t\tresult = \"[Function: #{value.name}]\"\r\n\telse\r\n\t\tresult = value\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport baseCompare = (a, b) =>\r\n\r\n\tif (a < b)\r\n\t\treturn -1\r\n\telse if (a > b)\r\n\t\treturn 1\r\n\telse\r\n\t\treturn 0\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport toTAML = (obj, hOptions={}) =>\r\n\r\n\t{useDashes, sortKeys, indent, oneIndent\r\n\t\t} = getOptions hOptions, {\r\n\t\tuseDashes: true\r\n\t\tsortKeys: true    # --- can be boolean/array/function\r\n\t\tindent: 0         # --- integer number of levels\r\n\t\toneIndent: \"\\t\"\r\n\t\t}\r\n\r\n\tassert isInteger(indent), \"indent = #{OL(indent)}\"\r\n\tassert isString(oneIndent), \"oneIndent = #{OL(oneIndent)}\"\r\n\r\n\tpre = if useDashes then \"---\\n\" else \"\"\r\n\tswitch obj\r\n\t\twhen undef\r\n\t\t\treturn \"#{pre}undef\"\r\n\t\twhen null\r\n\t\t\treturn \"#{pre}null\"\r\n\t\twhen true\r\n\t\t\treturn \"#{pre}true\"\r\n\t\twhen false\r\n\t\t\treturn \"#{pre}false\"\r\n\r\n\tif isArray(sortKeys)\r\n\t\th = {}\r\n\t\tfor key,i in sortKeys\r\n\t\t\th[key] = i+1\r\n\t\tsortKeys = (aVal, bVal) ->\r\n\t\t\ta = Object.entries(aVal)[0][1]\r\n\t\t\tb = Object.entries(bVal)[0][1]\r\n\r\n\t\t\tif defined(h[a])\r\n\t\t\t\tif defined(h[b])\r\n\t\t\t\t\treturn baseCompare(h[a], h[b])\r\n\t\t\t\telse\r\n\t\t\t\t\treturn -1\r\n\t\t\telse\r\n\t\t\t\tif defined(h[b])\r\n\t\t\t\t\treturn 1\r\n\t\t\t\telse\r\n\t\t\t\t\t# --- compare keys alphabetically\r\n\t\t\t\t\treturn baseCompare(a, b)\r\n\telse\r\n\t\tassert isBoolean(sortKeys) || isFunction(sortKeys),\r\n\t\t\t\t\"sortKeys = #{OL(sortKeys)}\"\r\n\r\n\tstr = YAML.stringify(obj, myReplacer, {\r\n\t\tsortMapEntries: sortKeys\r\n\t\t})\r\n\tstr = str.replace(/<UNDEFINED_VALUE>/g, 'undef')\r\n\tstr = rtrim(str)\r\n\tstr = str.replaceAll(\"  \", oneIndent)\r\n\tstr = pre + str\r\n\tif (indent == 0)\r\n\t\treturn str\r\n\telse\r\n\t\treturn indented(str, indent, oneIndent)\r\n\r\n"
  ]
}