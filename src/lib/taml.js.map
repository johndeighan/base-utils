{
  "version": 3,
  "file": "taml.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\taml.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# taml.coffee\r\n\r\nimport {parse, stringify} from 'yaml'\r\n\r\nimport {\r\n\tundef, defined, notdefined, OL, hasChar, getOptions,\r\n\tisEmpty, isString, isFunction, isBoolean, isArray,\r\n\tblockToArray, arrayToBlock, escapeStr, rtrim, spaces,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {indented} from '@jdeighan/base-utils/indent'\r\n\r\n# ---------------------------------------------------------------------------\r\n#   isTAML - is the string valid TAML?\r\n\r\nexport isTAML = (text) =>\r\n\r\n\treturn isString(text) && text.match(/^---$/m)\r\n\r\n# ---------------------------------------------------------------------------\r\n#   fromTAML - convert valid TAML string to a JavaScript value\r\n\r\nexport fromTAML = (text) =>\r\n\r\n\tassert defined(text), \"text is undef\"\r\n\tassert isTAML(text), \"string #{OL(text)} isn't TAML\"\r\n\r\n\t# --- TAML uses TAB characters for indentation\r\n\t#     convert to 2 spaces per TAB\r\n\tlLines = ['---']\r\n\tfor line,i in blockToArray(text)\r\n\t\tif (i == 0)\r\n\t\t\tassert (line == '---'), \"Invalid TAML marker\"\r\n\t\t\tcontinue\r\n\t\t[_, ws, str] = line.match(/^(\\s*)(.*)$/)\r\n\t\tassert ! hasChar(ws, ' '), \"space char in prefix: #{OL(line)}\"\r\n\t\tstr = str.trim()\r\n\r\n\t\t# --- Convert each TAB char to 2 spaces\r\n\t\tlLines.push '  '.repeat(ws.length) + tamlFix(str)\r\n\r\n\tblock = arrayToBlock(lLines)\r\n\ttry\r\n\t\tresult = parse(block, {skipInvalid: true})\r\n\tcatch err\r\n\t\tconsole.log '---------------------------------------'\r\n\t\tconsole.log \"ERROR in TAML:\"\r\n\t\tconsole.log text\r\n\t\tconsole.log \"BLOCK:\"\r\n\t\tconsole.log block\r\n\t\tconsole.log '---------------------------------------'\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport llSplit = (str) =>\r\n\t# --- Returns [\"<key>: \", <rest>]\r\n\t#        OR   [\"- \", <rest>]\r\n\t#        OR   undef\r\n\r\n\tif lMatches = str.match(///^\r\n\t\t\t([A-Za-z_][A-Za-z0-9_]*)    # the key\r\n\t\t\t\\s*\r\n\t\t\t:\r\n\t\t\t\\s+\r\n\t\t\t(.*)\r\n\t\t\t$///)\r\n\t\t[_, key, rest] = lMatches\r\n\t\tresult = [\"#{key}: \", rest]\r\n\telse if lMatches = str.match(///^\r\n\t\t\t\\-\r\n\t\t\t\\s+\r\n\t\t\t(.*)\r\n\t\t\t$///)\r\n\t\t[_, rest] = lMatches\r\n\t\tresult = ['- ', rest]\r\n\telse\r\n\t\tresult = undef\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport splitTaml = (str) =>\r\n\t# --- returns [ (\"<key>: \" || \"- \"), ..., <val> ] - <val> may be ''\r\n\r\n\tlParts = []\r\n\twhile lResult = llSplit(str)\r\n\t\tlParts.push lResult[0]\r\n\t\tstr = lResult[1]\r\n\tlParts.push fixValStr(str)\r\n\treturn lParts\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport tamlFix = (str) =>\r\n\t# --- str has been trimmed\r\n\r\n\tif (str == '-') || str.match(/^[A-Za-z0-9_]+:$/)\r\n\t\treturn str\r\n\tlParts = splitTaml(str)\r\n\tresult = lParts.join('')\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport fixValStr = (valStr) =>\r\n\r\n\tif isEmpty(valStr) \\\r\n\t\t\t|| (valStr == '[]') \\\r\n\t\t\t|| (valStr == '{}') \\\r\n\t\t\t|| valStr.match(/^\\d+(?:\\.\\d*)?$/) \\   # a number\r\n\t\t\t|| valStr.match(/^\\\".*\\\"$/) \\          # \" quoted string\r\n\t\t\t|| valStr.match(/^\\'.*\\'$/) \\          # ' quoted string\r\n\t\t\t|| (valStr == 'true') || (valStr == 'false')\r\n\t\tresult = valStr\r\n\telse\r\n\t\tresult = \"'\" + valStr.replace(/'/g, \"''\") + \"'\"\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- a replacer is (key, value) -> newvalue\r\n\r\nmyReplacer = (name, value) =>\r\n\r\n\tif (value == undef)\r\n\t\t# --- We need this, otherwise js-yaml will convert undef to null\r\n\t\tresult = \"<UNDEFINED_VALUE>\"\r\n\telse if isString(value)\r\n\t\tresult = escapeStr(value)\r\n\telse if isFunction(value)\r\n\t\tresult = \"[Function: #{value.name}]\"\r\n\telse\r\n\t\tresult = value\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport toTAML = (obj, hOptions={}) =>\r\n\r\n\thDefaults = {\r\n\t\tuseTabs: true\r\n\t\tsortKeys: true\r\n\t\tuseDashes: true\r\n\t\tindent: undef\r\n\t\t}\r\n\t{useTabs, sortKeys, useDashes, indent, escape, replacer\r\n\t\t} = getOptions(hOptions, hDefaults)\r\n\r\n\t# --- define a compare function for sorting\r\n\tcompareFunc = (a, b) =>\r\n\r\n\t\tif (a < b)\r\n\t\t\treturn -1\r\n\t\telse if (a > b)\r\n\t\t\treturn 1\r\n\t\telse\r\n\t\t\treturn 0\r\n\r\n\tif (obj == undef)\r\n\t\treturn \"---\\nundef\"\r\n\r\n\tif (obj == null)\r\n\t\treturn \"---\\nnull\"\r\n\r\n\tif notdefined(replacer)\r\n\t\treplacer = myReplacer\r\n\r\n\tif isArray(sortKeys)\r\n\t\th = {}\r\n\t\tfor key,i in sortKeys\r\n\t\t\th[key] = i+1\r\n\t\tsortKeys = (a, b) ->\r\n\t\t\tif defined(h[a])\r\n\t\t\t\tif defined(h[b])\r\n\t\t\t\t\treturn compareFunc(h[a], h[b])\r\n\t\t\t\telse\r\n\t\t\t\t\treturn -1\r\n\t\t\telse\r\n\t\t\t\tif defined(h[b])\r\n\t\t\t\t\treturn 1\r\n\t\t\t\telse\r\n\t\t\t\t\t# --- compare keys alphabetically\r\n\t\t\t\t\treturn compareFunc(a, b)\r\n\tassert isBoolean(sortKeys) || isFunction(sortKeys),\r\n\t\t\"option sortKeys must be boolean, array or function\"\r\n\r\n\thStrOptions = {sortMapEntries: true}\r\n\tstr = stringify(obj, myReplacer, hStrOptions)\r\n\tstr = str.replace(/<UNDEFINED_VALUE>/g, 'undef')\r\n\tstr = rtrim(str)\r\n\tif useTabs\r\n\t\tstr = str.replace(/  /g, \"\\t\")\r\n\tif useDashes\r\n\t\tstr = \"---\\n\" + str\r\n\tif indent\r\n\t\tif useTabs\r\n\t\t\treturn indented(str, indent)\r\n\t\telse\r\n\t\t\treturn indented(str, indent, '  ')\r\n\telse\r\n\t\treturn str\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nsquote = (text) =>\r\n\r\n\treturn \"'\" + text.replace(/'/g, \"''\") + \"'\"\r\n"
  ]
}