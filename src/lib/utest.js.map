{
  "version": 3,
  "file": "utest.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\utest.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# utest.coffee\r\n\r\nimport test from 'ava'\r\n\r\nimport {\r\n\tundef, defined, pass, isInteger, OL, LOG,\r\n\t} from '@jdeighan/base-utils'\r\nimport {\r\n\tassert, croak, exReset, exGetLog,\r\n\t} from '@jdeighan/base-utils/exceptions'\r\nimport {isFile, parsePath, fileExt} from '@jdeighan/base-utils/ll-fs'\r\nimport {mapLineNum} from '@jdeighan/base-utils/source-map'\r\nimport {getMyOutsideCaller} from '@jdeighan/base-utils/v8-stack'\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Available tests w/num required params\r\n#        equal 2\r\n#        truthy 1\r\n#        falsy 1\r\n#        like 2\r\n#        throws 1 (a function)\r\n#        succeeds 1 (a function)\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class UnitTester\r\n\r\n\tconstructor: () ->\r\n\r\n\t\t@debug = false\r\n\t\t@hFound = {}   # used line numbers\r\n\r\n\t# ........................................................................\r\n\r\n\tdoDebug: () =>\r\n\r\n\t\t@debug = true\r\n\t\treturn\r\n\r\n\t# ........................................................................\r\n\r\n\tgetLineNum: () =>\r\n\r\n\t\t# --- We need to figure out the line number of the caller\r\n\t\t{filePath, line, column} = getMyOutsideCaller()\r\n\t\tif @debug\r\n\t\t\tLOG \"getLineNum()\"\r\n\t\t\tLOG \"   filePath = '#{filePath}'\"\r\n\t\t\tLOG \"   line = #{line}, col = #{column}\"\r\n\r\n\t\tassert isInteger(line), \"getMyOutsideCaller() line = #{OL(line)}\"\r\n\t\tassert (fileExt(filePath) == '.js'),\r\n\t\t\t\"caller not a JS file: #{OL(filePath)}\"\r\n\r\n\t\t# --- Attempt to use source map to get true line number\r\n\t\tmapFile = \"#{filePath}.map\"\r\n\t\tif isFile(mapFile)\r\n\t\t\ttry\r\n\t\t\t\tmline = mapLineNum filePath, line, column, {debug: @debug}\r\n\t\t\t\tif @debug\r\n\t\t\t\t\tLOG \"   mapped to #{mline}\"\r\n\t\t\t\tassert isInteger(mline), \"not an integer: #{mline}\"\r\n\t\t\t\tline = mline\r\n\t\t\tcatch err\r\n\t\t\t\tpass()\r\n\t\twhile @hFound[line]\r\n\t\t\tline += 1000\r\n\t\t@hFound[line] = true\r\n\t\treturn line\r\n\r\n\t# ........................................................................\r\n\r\n\ttransformValue: (val) ->\r\n\r\n\t\treturn val\r\n\r\n\t# ........................................................................\r\n\r\n\ttransformExpected: (expected) ->\r\n\r\n\t\treturn expected\r\n\r\n\t# ..........................................................\r\n\t# ..........................................................\r\n\r\n\tequal: (val, expected) ->\r\n\r\n\t\tlineNum = @getLineNum()\r\n\t\ttest \"line #{lineNum}\", (t) =>\r\n\t\t\tt.deepEqual(@transformValue(val), @transformExpected(expected))\r\n\r\n\t# ..........................................................\r\n\r\n\tlike: (val, expected) ->\r\n\r\n\t\tlineNum = @getLineNum()\r\n\t\ttest \"line #{lineNum}\", (t) =>\r\n\t\t\tt.like(@transformValue(val), @transformExpected(expected))\r\n\r\n\t# ..........................................................\r\n\r\n\tnotequal: (val, expected) ->\r\n\r\n\t\tlineNum = @getLineNum()\r\n\t\ttest \"line #{lineNum}\", (t) =>\r\n\t\t\tt.notDeepEqual(@transformValue(val), @transformExpected(expected))\r\n\r\n\t# ..........................................................\r\n\r\n\ttruthy: (bool) ->\r\n\r\n\t\tlineNum = @getLineNum()\r\n\t\ttest \"line #{lineNum}\", (t) =>\r\n\t\t\tt.truthy(@transformValue(bool))\r\n\r\n\t# ..........................................................\r\n\r\n\tfalsy: (bool) ->\r\n\r\n\t\tlineNum = @getLineNum()\r\n\t\ttest \"line #{lineNum}\", (t) =>\r\n\t\t\tt.falsy(@transformValue(bool))\r\n\r\n\t# ..........................................................\r\n\r\n\tthrows: (func) ->\r\n\r\n\t\tlineNum = @getLineNum()\r\n\t\tassert (typeof func == 'function'), \"function expected\"\r\n\t\ttry\r\n\t\t\texReset()   # suppress logging of errors\r\n\t\t\tfunc()\r\n\t\t\tok = true\r\n\t\tcatch err\r\n\t\t\tok = false\r\n\t\tlog = exGetLog()   # we really don't care about log\r\n\r\n\t\ttest \"line #{lineNum}\", (t) => t.falsy(ok)\r\n\r\n\t# ..........................................................\r\n\r\n\tsucceeds: (func) ->\r\n\r\n\t\tlineNum = @getLineNum()\r\n\t\tassert (typeof func == 'function'), \"function expected\"\r\n\t\ttry\r\n\t\t\tfunc()\r\n\t\t\tok = true\r\n\t\tcatch err\r\n\t\t\tconsole.error err\r\n\t\t\tok = false\r\n\r\n\t\ttest \"line #{lineNum}\", (t) => t.truthy(ok)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport u = new UnitTester()\r\nexport transformValue = (func) => u.transformValue = func\r\nexport transformExpected = (func) => u.transformExpected = func\r\nexport equal = (arg1, arg2) => return u.equal(arg1, arg2)\r\nexport like = (arg1, arg2) => return u.like(arg1, arg2)\r\nexport notequal = (arg1, arg2) => return u.notequal(arg1, arg2)\r\nexport truthy = (arg) => return u.truthy(arg)\r\nexport falsy = (arg) => return u.falsy(arg)\r\nexport throws = (func) => return u.throws(func)\r\nexport succeeds = (func) => return u.succeeds(func)\r\n"
  ]
}