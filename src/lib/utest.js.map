{
  "version": 3,
  "file": "utest.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\utest.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# utest.coffee\r\n\r\nimport test from 'ava'\r\n\r\nimport {defined, isInteger} from '@jdeighan/base-utils'\r\nimport {\r\n\tassert, croak, exReset, exGetLog,\r\n\t} from '@jdeighan/base-utils/exceptions'\r\nimport {isFile, parsePath, fileExt} from '@jdeighan/base-utils/ll-fs'\r\nimport {mapLineNum} from '@jdeighan/base-utils/source-map'\r\nimport {getMyOutsideCaller} from '@jdeighan/base-utils/v8-stack'\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Available tests w/num required params (aside from line num)\r\n#        equal 2\r\n#        truthy 1\r\n#        falsy 1\r\n#        like 2\r\n#        throws 1 (a function)\r\n#        succeeds 1 (a function)\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class UnitTester\r\n\r\n\tconstructor: () ->\r\n\r\n\t\t@debug = false\r\n\t\t@hFound = {}   # used line numbers\r\n\r\n\t# ........................................................................\r\n\r\n\tdoDebug: () =>\r\n\r\n\t\t@debug = true\r\n\t\treturn\r\n\r\n\t# ........................................................................\r\n\r\n\tgetParms: (lParms, nExpected) =>\r\n\r\n\t\tnParms = lParms.length\r\n\t\tif @debug\r\n\t\t\tconsole.log \"getParms(): #{nParms} parameters\"\r\n\t\tif (nParms == nExpected)\r\n\t\t\tif @debug\r\n\t\t\t\tconsole.log \"   find correct line number\"\r\n\r\n\t\t\t# --- We need to figure out the line number of the caller\r\n\t\t\t{filePath, line, column} = getMyOutsideCaller()\r\n\t\t\tif @debug\r\n\t\t\t\tconsole.log \"   filePath = '#{filePath}'\"\r\n\t\t\t\tconsole.log \"   line = #{line}, col = #{column}\"\r\n\r\n\t\t\tif ! isInteger(line)\r\n\t\t\t\tconsole.log \"getMyOutsideCaller() returned non-integer\"\r\n\t\t\t\tconsole.log {filePath, line, column}\r\n\t\t\tassert fileExt(filePath) == '.js', \"caller not a JS file\", \"fileExt(filePath) == '.js'\"\r\n\r\n\t\t\t# --- Attempt to use source map to get true line number\r\n\t\t\tmapFile = \"#{filePath}.map\"\r\n\t\t\ttry\r\n\t\t\t\tassert isFile(mapFile), \"Missing map file for #{filePath}\", \"isFile(mapFile)\"\r\n\t\t\t\tmline = mapLineNum filePath, line, column, {debug: @debug}\r\n\t\t\t\tif @debug\r\n\t\t\t\t\tconsole.log \"   mapped to #{mline}\"\r\n\t\t\t\tassert isInteger(mline), \"not an integer: #{mline}\", \"isInteger(mline)\"\r\n\t\t\t\treturn [@dedupLine(mline), lParms...]\r\n\t\t\tcatch err\r\n\t\t\t\treturn [@dedupLine(line), lParms...]\r\n\t\telse if (nParms = nExpected + 1)\r\n\t\t\tline = lParms[0]\r\n\t\t\tassert isInteger(line), \"not an integer #{line}\", \"isInteger(line)\"\r\n\t\t\tlParms[0] = @dedupLine(lParms[0])\r\n\t\t\treturn lParms\r\n\t\telse\r\n\t\t\tcroak \"Bad parameters to utest function\"\r\n\r\n\t# ..........................................................\r\n\r\n\tdedupLine: (line) ->\r\n\r\n\t\tassert isInteger(line), \"#{line} is not an integer\"\r\n\t\t# --- patch line to avoid duplicates\r\n\t\twhile @hFound[line]\r\n\t\t\tline += 10000\r\n\t\t@hFound[line] = true\r\n\t\treturn line\r\n\r\n\t# ........................................................................\r\n\r\n\ttransformValue: (val) ->\r\n\r\n\t\treturn val\r\n\r\n\t# ........................................................................\r\n\r\n\ttransformExpected: (expected) ->\r\n\r\n\t\treturn expected\r\n\r\n\t# ..........................................................\r\n\t# ..........................................................\r\n\r\n\tequal: (lParms...) ->\r\n\r\n\t\t[lineNum, val, expected] = @getParms lParms, 2\r\n\t\ttest \"line #{lineNum}\", (t) =>\r\n\t\t\tt.deepEqual(@transformValue(val), @transformExpected(expected))\r\n\r\n\t# ..........................................................\r\n\r\n\tnotequal: (lParms...) ->\r\n\r\n\t\t[lineNum, val, expected] = @getParms lParms, 2\r\n\t\ttest \"line #{lineNum}\", (t) =>\r\n\t\t\tt.notDeepEqual(@transformValue(val), @transformExpected(expected))\r\n\r\n\t# ..........................................................\r\n\r\n\ttruthy: (lParms...) ->\r\n\r\n\t\t[lineNum, bool] = @getParms lParms, 1\r\n\t\ttest \"line #{lineNum}\", (t) =>\r\n\t\t\tt.truthy(@transformValue(bool))\r\n\r\n\t# ..........................................................\r\n\r\n\tfalsy: (lParms...) ->\r\n\r\n\t\t[lineNum, bool] = @getParms lParms, 1\r\n\t\ttest \"line #{lineNum}\", (t) =>\r\n\t\t\tt.falsy(@transformValue(bool))\r\n\r\n\t# ..........................................................\r\n\r\n\tlike: (lParms...) ->\r\n\r\n\t\t[lineNum, val, expected] = @getParms lParms, 2\r\n\t\ttest \"line #{lineNum}\", (t) =>\r\n\t\t\tt.like(@transformValue(val), @transformExpected(expected))\r\n\r\n\t# ..........................................................\r\n\r\n\tthrows: (lParams...) ->\r\n\r\n\t\t[lineNum, func] = @getParms lParams, 1\r\n\t\tif (typeof func != 'function')\r\n\t\t\tthrow new Error(\"function expected\")\r\n\t\ttry\r\n\t\t\texReset()   # suppress logging of errors\r\n\t\t\tfunc()\r\n\t\t\tok = true\r\n\t\tcatch err\r\n\t\t\tok = false\r\n\t\tlog = exGetLog()   # we really don't care about log\r\n\r\n\t\ttest \"line #{lineNum}\", (t) => t.falsy(ok)\r\n\r\n\t# ..........................................................\r\n\r\n\tsucceeds: (lParams...) ->\r\n\r\n\t\t[lineNum, func] = @getParms lParams, 1\r\n\t\tif (typeof func != 'function')\r\n\t\t\tthrow new Error(\"function expected\")\r\n\t\ttry\r\n\t\t\tfunc()\r\n\t\t\tok = true\r\n\t\tcatch err\r\n\t\t\tok = false\r\n\r\n\t\ttest \"line #{lineNum}\", (t) => t.truthy(ok)\r\n\r\nexport utest = new UnitTester()\r\nexport u = new UnitTester()\r\n"
  ]
}