{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\utest.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# utest.coffee\n\nimport test from 'ava'\n\nimport {\n\tundef, defined, pass, OL, jsType, rtrim,\n\tisString, isInteger, isRegExp, nonEmpty, isClass, isFunction,\n\ttoArray, fileExt,\n\t} from '@jdeighan/base-utils'\nimport {\n\tassert, croak, exReset, exGetLog,\n\t} from '@jdeighan/base-utils/exceptions'\nimport {isFile, parsePath} from '@jdeighan/base-utils/ll-fs'\nimport {mapLineNum} from '@jdeighan/base-utils/source-map'\nimport {getMyOutsideCaller} from '@jdeighan/base-utils/v8-stack'\n\n# ---------------------------------------------------------------------------\n# --- Available tests w/num required params\n#        equal 2\n#        truthy 1\n#        falsy 1\n#        includes 2\n#        matches 2\n#        like 2\n#        fails 1 (a function)\n#        succeeds 1 (a function)\n# ---------------------------------------------------------------------------\n\nexport class UnitTester\n\n\tconstructor: () ->\n\n\t\t@debug = false\n\t\t@hFound = {}   # used line numbers\n\n\t# ........................................................................\n\n\tdoDebug: () =>\n\n\t\t@debug = true\n\t\treturn\n\n\t# ........................................................................\n\t# --- returns, e.g. \"line 42\"\n\n\tgetTestName: () =>\n\n\t\t# --- We need to figure out the line number of the caller\n\t\t{filePath, line, column} = getMyOutsideCaller()\n\t\tif @debug\n\t\t\tconsole.log \"getTestName()\"\n\t\t\tconsole.log \"   filePath = '#{filePath}'\"\n\t\t\tconsole.log \"   line = #{line}, col = #{column}\"\n\n\t\tassert isInteger(line), \"getMyOutsideCaller() line = #{OL(line)}\"\n\t\tassert (fileExt(filePath) == '.js') || (fileExt(filePath) == '.coffee'),\n\t\t\t\"caller not a JS or Coffee file: #{OL(filePath)}\"\n\n# \t\t# --- Attempt to use source map to get true line number\n# \t\tmapFile = \"#{filePath}.map\"\n# \t\tif isFile(mapFile)\n# \t\t\ttry\n# \t\t\t\tmline = mapLineNum filePath, line, column, {debug: @debug}\n# \t\t\t\tif @debug\n# \t\t\t\t\tconsole.log \"   mapped to #{mline}\"\n# \t\t\t\tassert isInteger(mline), \"not an integer: #{mline}\"\n# \t\t\t\tline = mline\n# \t\t\tcatch err\n# \t\t\t\tpass()\n\t\twhile @hFound[line]\n\t\t\tline += 1000\n\t\t@hFound[line] = true\n\n\t\treturn \"line #{line}\"\n\n\t# ........................................................................\n\n\ttransformValue: (val) ->\n\n\t\treturn val\n\n\t# ........................................................................\n\n\ttransformExpected: (expected) ->\n\n\t\treturn expected\n\n\t# ..........................................................\n\t# ..........................................................\n\n\tequal: (val, expected) ->\n\n\t\tval = @transformValue(val)\n\t\texpected = @transformExpected(expected)\n\t\ttest @getTestName(), (t) =>\n\t\t\tt.deepEqual(val, expected)\n\t\treturn\n\n\t# ..........................................................\n\n\tlike: (val, expected) ->\n\n\t\tval = @transformValue(val)\n\t\texpected = @transformExpected(expected)\n\t\tif isString(val) && isString(expected)\n\t\t\tval = rtrim(val).replaceAll(\"\\r\", \"\")\n\t\t\texpected = rtrim(expected).replaceAll(\"\\r\", \"\")\n\t\t\ttest @getTestName(), (t) =>\n\t\t\t\tt.deepEqual(val, expected)\n\t\telse\n\t\t\ttest @getTestName(), (t) =>\n\t\t\t\tt.like(val, expected)\n\t\treturn\n\n\t# ..........................................................\n\n\tsamelines: (val, expected) ->\n\n\t\tval = @transformValue(val)\n\t\texpected = @transformExpected(expected)\n\t\tassert isString(val), \"not a string: #{OL(val)}\"\n\t\tassert isString(expected), \"not a string: #{OL(expected)}\"\n\n\t\tlValLines = toArray(val).filter((line) => return nonEmpty(line)).sort()\n\t\tlExpLines = toArray(expected).filter((line) => return nonEmpty(line)).sort()\n\n\t\ttest @getTestName(), (t) =>\n\t\t\tt.deepEqual(lValLines, lExpLines)\n\t\treturn\n\n\t# ..........................................................\n\n\tnotequal: (val, expected) ->\n\n\t\tval = @transformValue(val)\n\t\texpected = @transformExpected(expected)\n\t\ttest @getTestName(), (t) =>\n\t\t\tt.notDeepEqual(val, expected)\n\t\treturn\n\n\t# ..........................................................\n\n\ttruthy: (bool) ->\n\n\t\ttest @getTestName(), (t) =>\n\t\t\tt.truthy(bool)\n\t\treturn\n\n\t# ..........................................................\n\n\tfalsy: (bool) ->\n\n\t\ttest @getTestName(), (t) =>\n\t\t\tt.falsy(bool)\n\t\treturn\n\n\t# ..........................................................\n\n\tincludes: (val, expected) ->\n\n\t\tval = @transformValue(val)\n\t\texpected = @transformExpected(expected)\n\t\tswitch jsType(val)[0]\n\t\t\twhen 'string'\n\t\t\t\ttest @getTestName(), (t) =>\n\t\t\t\t\tt.truthy(val.includes(expected))\n\t\t\twhen 'array'\n\t\t\t\ttest @getTestName(), (t) =>\n\t\t\t\t\tt.truthy(val.includes(expected))\n\t\t\telse\n\t\t\t\tcroak \"Bad arg to includes: #{OL(val)}\"\n\t\treturn\n\n\t# ..........................................................\n\n\tmatches: (val, regexp) ->\n\n\t\tassert isString(val), \"Not a string: #{OL(val)}\"\n\n\t\t# --- convert strings to regular expressions\n\t\tif isString(regexp)\n\t\t\tregexp = new RegExp(regexp)\n\t\tassert isRegExp(regexp), \"Not a string or regexp: #{OL(regexp)}\"\n\t\ttest @getTestName(), (t) =>\n\t\t\tt.truthy(defined(val.match(regexp)))\n\t\treturn\n\n\t# ..........................................................\n\n\tfails: (func) ->\n\n\t\tassert (typeof func == 'function'), \"function expected\"\n\t\ttry\n\t\t\texReset()   # suppress logging of errors\n\t\t\tfunc()\n\t\t\tfailed = false\n\t\tcatch err\n\t\t\tfailed = true\n\t\tlog = exGetLog()   # we really don't care about log\n\n\t\ttest @getTestName(), (t) => t.truthy(failed)\n\t\treturn\n\n\t# ..........................................................\n\n\tthrows: (func, errClass) ->\n\n\t\tassert (typeof func == 'function'), \"Not a function: #{OL(func)}\"\n\t\tassert isClass(errClass) || isFunction(errClass),\n\t\t\t\"Not a class or function: #{OL(errClass)}\"\n\t\terrObj = undef\n\t\ttry\n\t\t\texReset()   # suppress logging of errors\n\t\t\tfunc()\n\t\t\tfailed = false\n\t\tcatch err\n\t\t\terrObj = err\n\t\t\tfailed = true\n\t\tlog = exGetLog()   # we really don't care about log\n\n\t\ttest @getTestName(), (t) =>\n\t\t\tt.truthy(failed && errObj instanceof errClass)\n\t\treturn\n\n\t# ..........................................................\n\n\tsucceeds: (func) ->\n\n\t\tassert (typeof func == 'function'), \"function expected\"\n\t\ttry\n\t\t\tfunc()\n\t\t\tok = true\n\t\tcatch err\n\t\t\tconsole.error err\n\t\t\tok = false\n\n\t\ttest @getTestName(), (t) => t.truthy(ok)\n\t\treturn\n\n# ---------------------------------------------------------------------------\n\nexport u = new UnitTester()\nexport transformValue = (func) => u.transformValue = func\nexport transformExpected = (func) => u.transformExpected = func\nexport equal = (arg1, arg2) => return u.equal(arg1, arg2)\nexport like = (arg1, arg2) => return u.like(arg1, arg2)\nexport samelines = (arg1, arg2) => return u.samelines(arg1, arg2)\nexport notequal = (arg1, arg2) => return u.notequal(arg1, arg2)\nexport truthy = (arg) => return u.truthy(arg)\nexport falsy = (arg) => return u.falsy(arg)\nexport includes = (arg1, arg2) => return u.includes(arg1, arg2)\nexport matches = (str, regexp) => return u.matches(str, regexp)\nexport succeeds = (func) => return u.succeeds(func)\nexport fails = (func) => return u.fails(func)\nexport throws = (func, errClass) => return u.throws(func, errClass)"
  ]
}