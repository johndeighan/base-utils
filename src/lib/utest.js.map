{
  "version": 3,
  "file": "utest.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\utest.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# utest.coffee\r\n\r\nimport test from 'ava'\r\nimport {defined, isInteger} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {isFile, parsePath, fileExt, withExt} from '@jdeighan/base-utils/ll-fs'\r\nimport {mapLineNum} from '@jdeighan/base-utils/source-map'\r\nimport {getMyOutsideCaller} from '@jdeighan/base-utils/ll-v8-stack'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\ngetParms = (lParms, nExpected) =>\r\n\r\n\tnParms = lParms.length\r\n\tif (nParms == nExpected)\r\n\t\t# --- Disable this feature for now\r\n\t\tthrow new Error('Currently you must provide a line number in unit tests')\r\n\r\n\t\t# --- We need to figure out the line number of the caller\r\n\t\t{filePath, line, col} = getMyOutsideCaller()\r\n\t\tif (fileExt(filePath) == '.js')\r\n\t\t\tconsole.log \"file is a JS file\"\r\n\t\t\tmapFile = \"#{filePath}.map\"\r\n\t\t\tconsole.log \"map file is #{mapFile}\"\r\n\t\t\tif isFile(mapFile)\r\n\t\t\t\tconsole.log \"map file exists\"\r\n\t\t\t\t# --- Attempt to use source map to get true line number\r\n\t\t\t\tline = mapLineNum filePath, line\r\n\t\t\t\tif defined(line)\r\n\t\t\t\t\tconsole.log \"SOURCE MAP: #{line}\"\r\n\t\t\telse\r\n\t\t\t\tconsole.log \"map file does not exist\"\r\n\t\tassert isInteger(line), \"line number not an integer\"\r\n\t\tconsole.log \"AUTO LINE NUM: #{line}\"\r\n\t\treturn [line, lParms...]\r\n\telse if (nParms = nExpected + 1)\r\n\t\treturn lParms\r\n\telse\r\n\t\tcroak \"Bad parameters to utest function\"\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Available tests w/num required params (aside from line num)\r\n#        equal 2\r\n#        truthy 1\r\n#        falsy 1\r\n#        like 2\r\n#        throws/fails 1 (a function)\r\n#        succeeds 1 (a function)\r\n# ---------------------------------------------------------------------------\r\n\r\nclass SimpleUnitTester\r\n\r\n\tconstructor: () ->\r\n\r\n\t\t@hFound = {}   # used line numbers\r\n\r\n\t# ..........................................................\r\n\r\n\tgetLineNum: (lineNum) ->\r\n\r\n\t\tassert isInteger(lineNum), \"#{lineNum} is not an integer\"\r\n\t\t# --- patch lineNum to avoid duplicates\r\n\t\twhile @hFound[lineNum]\r\n\t\t\tlineNum += 1000\r\n\t\t@hFound[lineNum] = true\r\n\t\treturn lineNum\r\n\r\n\t# ..........................................................\r\n\r\n\tequal: (lParms...) ->\r\n\r\n\t\t[lineNum, val1, val2] = getParms lParms, 2\r\n\t\tlineNum = @getLineNum(lineNum)\r\n\t\ttest \"line #{lineNum}\", (t) => t.deepEqual(val1, val2)\r\n\r\n\t# ..........................................................\r\n\r\n\ttruthy: (lineNum, bool) ->\r\n\r\n\t\tlineNum = @getLineNum(lineNum)\r\n\t\ttest \"line #{lineNum}\", (t) => t.truthy(bool)\r\n\r\n\t# ..........................................................\r\n\r\n\tfalsy: (lineNum, bool) ->\r\n\r\n\t\tlineNum = @getLineNum(lineNum)\r\n\t\ttest \"line #{lineNum}\", (t) => t.falsy(bool)\r\n\r\n\t# ..........................................................\r\n\r\n\tlike: (lineNum, val1, val2) ->\r\n\r\n\t\tlineNum = @getLineNum(lineNum)\r\n\t\ttest \"line #{lineNum}\", (t) => t.like(val1, val2)\r\n\r\n\t# ..........................................................\r\n\r\n\tthrows: (lineNum, func) ->\r\n\r\n\t\tlineNum = @getLineNum(lineNum)\r\n\t\tif (typeof func != 'function')\r\n\t\t\tthrow new Error(\"SimpleUnitTester.fails(): function expected\")\r\n\t\ttry\r\n\t\t\tfunc()\r\n\t\t\tok = true\r\n\t\tcatch err\r\n\t\t\tok = false\r\n\r\n\t\ttest \"line #{lineNum}\", (t) => t.falsy(ok)\r\n\r\n\tfails: (lineNum, func) ->\r\n\r\n\t\treturn @throws(lineNum, func)\r\n\r\n\t# ..........................................................\r\n\r\n\tsucceeds: (lineNum, func) ->\r\n\r\n\t\tlineNum = @getLineNum(lineNum)\r\n\t\tif (typeof func != 'function')\r\n\t\t\tthrow new Error(\"SimpleUnitTester.fails(): function expected\")\r\n\t\ttry\r\n\t\t\tfunc()\r\n\t\t\tok = true\r\n\t\tcatch err\r\n\t\t\tok = false\r\n\r\n\t\ttest \"line #{lineNum}\", (t) => t.truthy(ok)\r\n\r\nexport utest = new SimpleUnitTester()\r\n"
  ]
}