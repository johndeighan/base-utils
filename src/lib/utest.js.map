{
  "version": 3,
  "file": "utest.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\utest.coffee"
  ],
  "names": [],
  "mappings": "AAAc;AAAA,IAAA;;AAEd,OAAO,IAAP,MAAA;;AACA,OAAA;EAAQ,SAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,MAAR;CAAA,MAAA,kCAJc;;;AAQR,mBAAN,MAAA,iBAAA;EAEC,WAAa,CAAA,CAAA;IAEZ,IAAC,CAAA,MAAD,GAAU,CAAA,EAFE;EAAA,CAAd;;;;EAMC,UAAY,CAAC,OAAD,CAAA;IAEX,MAAA,CAAO,SAAA,CAAU,OAAV,CAAP,EAA2B,CAAA,CAAA,CAAG,OAAH,CAAA,kBAAA,CAA3B,EAAF;;AAEE,WAAM,IAAC,CAAA,MAAM,CAAC,OAAD,CAAb;MACC,OAAA,IAAW;IADZ;IAEA,IAAC,CAAA,MAAM,CAAC,OAAD,CAAP,GAAmB;AACnB,WAAO;EAPI,CANb;;;EAiBC,MAAQ,CAAC,OAAD,EAAU,IAAV,CAAA;IAEP,OAAA,GAAU,IAAC,CAAA,UAAD,CAAY,OAAZ;WACV,IAAA,CAAK,CAAA,KAAA,CAAA,CAAQ,OAAR,CAAA,CAAL,EAAwB,CAAC,CAAD,CAAA,GAAA;aAAO,CAAC,CAAC,MAAF,CAAS,IAAT;IAAP,CAAxB;EAHO,CAjBT;;;EAwBC,KAAO,CAAC,OAAD,EAAU,IAAV,CAAA;IAEN,OAAA,GAAU,IAAC,CAAA,UAAD,CAAY,OAAZ;WACV,IAAA,CAAK,CAAA,KAAA,CAAA,CAAQ,OAAR,CAAA,CAAL,EAAwB,CAAC,CAAD,CAAA,GAAA;aAAO,CAAC,CAAC,KAAF,CAAQ,IAAR;IAAP,CAAxB;EAHM,CAxBR;;;EA+BC,KAAO,CAAC,OAAD,EAAU,IAAV,EAAgB,IAAhB,CAAA;IAEN,OAAA,GAAU,IAAC,CAAA,UAAD,CAAY,OAAZ;WACV,IAAA,CAAK,CAAA,KAAA,CAAA,CAAQ,OAAR,CAAA,CAAL,EAAwB,CAAC,CAAD,CAAA,GAAA;aAAO,CAAC,CAAC,SAAF,CAAY,IAAZ,EAAkB,IAAlB;IAAP,CAAxB;EAHM,CA/BR;;;EAsCC,KAAO,CAAC,OAAD,EAAU,IAAV,CAAA;AAER,QAAA,GAAA,EAAA;IAAE,OAAA,GAAU,IAAC,CAAA,UAAD,CAAY,OAAZ;IACV,IAAI,OAAO,IAAP,KAAe,UAAnB;MACC,MAAM,IAAI,KAAJ,CAAU,6CAAV,EADP;;AAEA;MACC,IAAA,CAAA;MACA,EAAA,GAAK,KAFN;KAGA,aAAA;MAAM;MACL,EAAA,GAAK,MADN;;WAGA,IAAA,CAAK,CAAA,KAAA,CAAA,CAAQ,OAAR,CAAA,CAAL,EAAwB,CAAC,CAAD,CAAA,GAAA;aAAO,CAAC,CAAC,KAAF,CAAQ,EAAR;IAAP,CAAxB;EAXM,CAtCR;;;EAqDC,QAAU,CAAC,OAAD,EAAU,IAAV,CAAA;AAEX,QAAA,GAAA,EAAA;IAAE,OAAA,GAAU,IAAC,CAAA,UAAD,CAAY,OAAZ;IACV,IAAI,OAAO,IAAP,KAAe,UAAnB;MACC,MAAM,IAAI,KAAJ,CAAU,6CAAV,EADP;;AAEA;MACC,IAAA,CAAA;MACA,EAAA,GAAK,KAFN;KAGA,aAAA;MAAM;MACL,EAAA,GAAK,MADN;;WAGA,IAAA,CAAK,CAAA,KAAA,CAAA,CAAQ,OAAR,CAAA,CAAL,EAAwB,CAAC,CAAD,CAAA,GAAA;aAAO,CAAC,CAAC,MAAF,CAAS,EAAT;IAAP,CAAxB;EAXS;;AAvDX;;AAoEA,OAAA,IAAO,KAAA,GAAQ,IAAI,gBAAJ,CAAA",
  "sourcesContent": [
    "# utest.coffee\r\n\r\nimport test from 'ava'\r\nimport {isInteger} from '@jdeighan/base-utils'\r\nimport {assert} from '@jdeighan/base-utils/exceptions'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nclass SimpleUnitTester\r\n\r\n\tconstructor: () ->\r\n\r\n\t\t@hFound = {}   # used line numbers\r\n\r\n\t# ..........................................................\r\n\r\n\tgetLineNum: (lineNum) ->\r\n\r\n\t\tassert isInteger(lineNum), \"#{lineNum} is not an integer\"\r\n\t\t# --- patch lineNum to avoid duplicates\r\n\t\twhile @hFound[lineNum]\r\n\t\t\tlineNum += 1000\r\n\t\t@hFound[lineNum] = true\r\n\t\treturn lineNum\r\n\r\n\t# ..........................................................\r\n\r\n\ttruthy: (lineNum, bool) ->\r\n\r\n\t\tlineNum = @getLineNum(lineNum)\r\n\t\ttest \"line #{lineNum}\", (t) => t.truthy(bool)\r\n\r\n\t# ..........................................................\r\n\r\n\tfalsy: (lineNum, bool) ->\r\n\r\n\t\tlineNum = @getLineNum(lineNum)\r\n\t\ttest \"line #{lineNum}\", (t) => t.falsy(bool)\r\n\r\n\t# ..........................................................\r\n\r\n\tequal: (lineNum, val1, val2) ->\r\n\r\n\t\tlineNum = @getLineNum(lineNum)\r\n\t\ttest \"line #{lineNum}\", (t) => t.deepEqual(val1, val2)\r\n\r\n\t# ..........................................................\r\n\r\n\tfails: (lineNum, func) ->\r\n\r\n\t\tlineNum = @getLineNum(lineNum)\r\n\t\tif (typeof func != 'function')\r\n\t\t\tthrow new Error(\"SimpleUnitTester.fails(): function expected\")\r\n\t\ttry\r\n\t\t\tfunc()\r\n\t\t\tok = true\r\n\t\tcatch err\r\n\t\t\tok = false\r\n\r\n\t\ttest \"line #{lineNum}\", (t) => t.falsy(ok)\r\n\r\n\t# ..........................................................\r\n\r\n\tsucceeds: (lineNum, func) ->\r\n\r\n\t\tlineNum = @getLineNum(lineNum)\r\n\t\tif (typeof func != 'function')\r\n\t\t\tthrow new Error(\"SimpleUnitTester.fails(): function expected\")\r\n\t\ttry\r\n\t\t\tfunc()\r\n\t\t\tok = true\r\n\t\tcatch err\r\n\t\t\tok = false\r\n\r\n\t\ttest \"line #{lineNum}\", (t) => t.truthy(ok)\r\n\r\nexport utest = new SimpleUnitTester()\r\n"
  ]
}