{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\state-machine.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# state-machine.coffee\n\nimport {\n\tundef, defined, notdefined, OL,\n\tisString, isHash, isArray, isNonEmptyString,\n\t} from '@jdeighan/base-utils'\nimport {LOG, LOGVALUE} from '@jdeighan/base-utils/log'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {dbgEnter, dbgReturn, dbg} from '@jdeighan/base-utils/debug'\n\n# ---------------------------------------------------------------------------\n# You should override this class,\n#    adding methods (uppercase by convention)\n#    that expect one or more states and assign a new state\n# then only use those methods, not setState() directly\n\nexport class StateMachine\n\n\tconstructor: (@state='start', @hData={}) ->\n\n\t\tdbgEnter 'StateMachine', @state, @hData\n\t\tassert isNonEmptyString(@state),\n\t\t\t\t\"not a non-empty string: #{OL(@state)}\"\n\t\tassert isHash(@hData), \"data not a hash\"\n\t\tdbgReturn 'StateMachine'\n\n\t# ..........................................................\n\n\tinState: (x) ->\n\n\t\treturn (@state == x)\n\n\t# ..........................................................\n\n\tsetState: (newState, hNewData={}) ->\n\n\t\tassert isHash(hNewData), \"new data not a hash\"\n\t\tfor own key,val of hNewData\n\t\t\tif defined(val)\n\t\t\t\t@hData[key] = val\n\t\t\telse\n\t\t\t\tdelete @hData[key]\n\t\t@state = newState\n\t\treturn\n\n\t# ..........................................................\n\n\texpectState: (lStates...) ->\n\n\t\tif ! lStates.includes(@state)\n\t\t\tif lStates.length == 1\n\t\t\t\tcroak \"state is '#{@state}', expected #{lStates[0]}\"\n\t\t\telse\n\t\t\t\tcroak \"state is '#{@state}', expected one of #{OL(lStates)}\"\n\t\treturn\n\n\t# ..........................................................\n\n\tdefined: (name) ->\n\n\t\treturn defined(@hData[name])\n\n\t# ..........................................................\n\n\tallDefined: (lNames...) ->\n\n\t\tfor name in lNames\n\t\t\tif notdefined(@hData[name])\n\t\t\t\treturn false\n\t\treturn true\n\n\t# ..........................................................\n\n\tanyDefined: (lNames...) ->\n\n\t\tfor name in lNames\n\t\t\tif defined(@hData[name])\n\t\t\t\treturn true\n\t\treturn false\n\n\t# ..........................................................\n\n\tsetVar: (name, value) ->\n\n\t\t@hData[name] = value\n\t\treturn\n\n\t# ..........................................................\n\n\tappendVar: (name, value) ->\n\n\t\tassert @defined(name), \"#{name} not defined\"\n\t\tlItems = @hData[name]\n\t\tassert isArray(lItems), \"Not an array: #{OL(lItems)}\"\n\t\tlItems.push value\n\t\treturn\n\n\t# ..........................................................\n\n\tgetVar: (name) ->\n\n\t\tassert @allDefined(name), \"#{name} is not defined\"\n\t\treturn @hData[name]"
  ]
}