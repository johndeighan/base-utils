{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\state-machine.coffee"
  ],
  "names": [],
  "mappings": "AAAsB;AAAA,IAAA;;AAEtB,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,EAD7B;EAEC,QAFD;EAEW,MAFX;EAEmB,gBAFnB;CAAA,MAAA;;AAIA,OAAA;EAAQ,MAAR;EAAgB,KAAhB;CAAA,MAAA;;AACA,OAAA;EAAQ,QAAR;EAAkB,SAAlB;EAA6B,GAA7B;CAAA,MAAA,6BAPsB;;;;;;AActB,OAAA,IAAa,eAAN,MAAA,aAAA;EAEN,WAAa,MAAA,UAAgB,CAAA,CAAhB,CAAA;IAAC,IAAC,CAAA;IAAO,IAAC,CAAA;IAEtB,QAAA,CAAS,cAAT,EAAyB,IAAC,CAAA,KAA1B,EAAiC,IAAC,CAAA,KAAlC;IACA,MAAA,CAAO,gBAAA,CAAiB,IAAC,CAAA,KAAlB,CAAP,EAAiC,wBAAjC;IACA,MAAA,CAAO,MAAA,CAAO,IAAC,CAAA,KAAR,CAAP,EAAuB,iBAAvB;IACA,SAAA,CAAU,cAAV,EAA0B,IAA1B;EALY,CAAd;;;EASC,OAAS,CAAC,CAAD,CAAA;AAER,WAAQ,IAAC,CAAA,KAAD,KAAU;EAFV,CATV;;;EAeC,QAAU,CAAC,QAAD,EAAW,WAAS,CAAA,CAApB,CAAA;AAEX,QAAA,GAAA,EAAA;IAAE,MAAA,CAAO,MAAA,CAAO,QAAP,CAAP,EAAyB,qBAAzB;IACA,KAAA,eAAA;;;MACC,IAAG,OAAA,CAAQ,GAAR,CAAH;QACC,IAAC,CAAA,KAAK,CAAC,GAAD,CAAN,GAAc,IADf;OAAA,MAAA;QAGC,OAAO,IAAC,CAAA,KAAK,CAAC,GAAD,EAHd;;IADD;IAKA,IAAC,CAAA,KAAD,GAAS;EARA,CAfX;;;EA4BC,WAAa,CAAA,GAAC,OAAD,CAAA;IAEZ,IAAG,CAAE,OAAO,CAAC,QAAR,CAAiB,IAAC,CAAA,KAAlB,CAAL;MACC,IAAG,OAAO,CAAC,MAAR,KAAkB,CAArB;QACC,KAAA,CAAM,CAAA,UAAA,CAAA,CAAa,IAAC,CAAA,KAAd,CAAA,YAAA,CAAA,CAAkC,OAAO,CAAC,CAAD,CAAzC,CAAA,CAAN,EADD;OAAA,MAAA;QAGC,KAAA,CAAM,CAAA,UAAA,CAAA,CAAa,IAAC,CAAA,KAAd,CAAA,mBAAA,CAAA,CAAyC,EAAA,CAAG,OAAH,CAAzC,CAAA,CAAN,EAHD;OADD;;EAFY,CA5Bd;;;EAuCC,aAAe,CAAA,GAAC,SAAD,CAAA;AAEhB,QAAA,CAAA,EAAA,GAAA,EAAA;IAAE,KAAA,2CAAA;;MACC,MAAA,CAAO,OAAA,CAAQ,IAAC,CAAA,KAAK,CAAC,OAAD,CAAd,CAAP,EAAiC,CAAA,CAAA,CAAG,OAAH,CAAA,kBAAA,CAAjC;IADD;EAFc,CAvChB;;;EA+CC,MAAQ,CAAC,OAAD,CAAA;IAEP,IAAC,CAAA,aAAD,CAAe,OAAf;AACA,WAAO,IAAC,CAAA,KAAK,CAAC,OAAD;EAHN,CA/CT;;;EAsDC,MAAQ,CAAC,OAAD,EAAU,KAAV,CAAA;IAEP,IAAC,CAAA,KAAK,CAAC,OAAD,CAAN,GAAkB;EAFX;;AAxDF",
  "sourcesContent": [
    "# state-machine.coffee\n\nimport {\n\tundef, defined, notdefined, OL,\n\tisString, isHash, isNonEmptyString,\n\t} from '@jdeighan/base-utils'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {dbgEnter, dbgReturn, dbg} from '@jdeighan/base-utils/debug'\n\n# ---------------------------------------------------------------------------\n# You should override this class, adding methods (uppercase by convention)\n#    that expect one or more states and assign a new state\n# then only use those methods, not setState() directly\n\nexport class StateMachine\n\n\tconstructor: (@state, @hData={}) ->\n\n\t\tdbgEnter 'StateMachine', @state, @hData\n\t\tassert isNonEmptyString(@state), \"not a non-empty string\"\n\t\tassert isHash(@hData), \"data not a hash\"\n\t\tdbgReturn 'StateMachine', this\n\n\t# ..........................................................\n\n\tinState: (x) ->\n\n\t\treturn (@state == x)\n\n\t# ..........................................................\n\n\tsetState: (newState, hNewData={}) ->\n\n\t\tassert isHash(hNewData), \"new data not a hash\"\n\t\tfor own key,val of hNewData\n\t\t\tif defined(val)\n\t\t\t\t@hData[key] = val\n\t\t\telse\n\t\t\t\tdelete @hData[key]\n\t\t@state = newState\n\t\treturn\n\n\t# ..........................................................\n\n\texpectState: (lStates...) ->\n\n\t\tif ! lStates.includes(@state)\n\t\t\tif lStates.length == 1\n\t\t\t\tcroak \"state is '#{@state}', expected #{lStates[0]}\"\n\t\t\telse\n\t\t\t\tcroak \"state is '#{@state}', expected one of #{OL(lStates)}\"\n\t\treturn\n\n\t# ..........................................................\n\n\texpectDefined: (lVarNames...) ->\n\n\t\tfor varname in lVarNames\n\t\t\tassert defined(@hData[varname]), \"#{varname} should be defined\"\n\t\treturn\n\n\t# ..........................................................\n\n\tgetVar: (varname) ->\n\n\t\t@expectDefined varname\n\t\treturn @hData[varname]\n\n\t# ..........................................................\n\n\tsetVar: (varname, value) ->\n\n\t\t@hData[varname] = value\n\t\treturn"
  ]
}