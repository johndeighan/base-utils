{
  "version": 3,
  "file": "fs.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\fs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# fs.coffee\r\n\r\nimport pathLib from 'node:path'\r\nimport urlLib from 'url'\r\nimport fs from 'fs'\r\nimport NReadLines from 'n-readlines'\r\nimport {globSync as glob} from 'glob'\r\n\r\nimport {\r\n\tundef, defined, nonEmpty, toBlock, toArray, getOptions,\r\n\tisString, isNumber, isHash, isArray, isIterable,\r\n\tfromJSON, toJSON, OL, forEachItem,\r\n\t} from '@jdeighan/base-utils'\r\nimport {\r\n\tfileExt, workingDir, myself, mydir, mkpath, withExt,\r\n\tmkDir, clearDir, touch, isFile, isDir, rename,\r\n\tpathType, rmFile, rmDir, parsePath,\r\n\tparentDir, parallelPath, subPath,\r\n\tfileDirPath, mkDirsForFile,\r\n\t} from '@jdeighan/base-utils/ll-fs'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {LOG, LOGVALUE} from '@jdeighan/base-utils/log'\r\nimport {dbgEnter, dbgReturn, dbg} from '@jdeighan/base-utils/debug'\r\nimport {toTAML, fromTAML} from '@jdeighan/base-utils/taml'\r\nimport {\r\n\tallLinesIn, forEachLineInFile,\r\n\t} from '@jdeighan/base-utils/readline'\r\n\r\nexport {\r\n\tfileExt, workingDir, myself, mydir, mkpath, withExt,\r\n\tmkDir, clearDir, touch, isFile, isDir, rename,\r\n\tpathType, rmFile, rmDir, parsePath,\r\n\tparentDir, parallelPath, subPath,\r\n\tfileDirPath,  mkDirsForFile,\r\n\tallLinesIn, forEachLineInFile,\r\n\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getPkgJsonDir = () =>\r\n\r\n\tpkgJsonDir = undef\r\n\r\n\t# --- First, get the directory this file is in\r\n\tdir = mydir(import.meta.url)\r\n\r\n\t# --- parse into parts\r\n\t{root, lDirs} = parsePath(dir)\r\n\r\n\t# --- search upward for package.json\r\n\twhile (lDirs.length > 0)\r\n\t\tpath = mkpath(root, lDirs, 'package.json')\r\n\t\tif isFile(path)\r\n\t\t\treturn mkpath(root, lDirs)\r\n\t\tlDirs.pop()\r\n\r\n\t\tdir = mkpath('..', dir)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getPkgJsonPath = () =>\r\n\r\n\tfilePath = mkpath(process.cwd(), 'package.json')\r\n\tassert isFile(filePath), \"Missing pacakge.json at cur dir\"\r\n\treturn filePath\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getTextFileContents = (filePath) =>\r\n\t# --- handles metadata if present\r\n\r\n\tdbgEnter 'getTextFileContents', filePath\r\n\tlMetaLines = undef\r\n\tinMeta = false\r\n\r\n\tlLines = []\r\n\r\n\tnumLines = 0\r\n\tfor line from allLinesIn(filePath)\r\n\t\tif (numLines == 0) && (line == '---')\r\n\t\t\tlMetaLines = ['---']\r\n\t\t\tinMeta = true\r\n\t\telse if inMeta\r\n\t\t\tif (line == '---')\r\n\t\t\t\tinMeta = false\r\n\t\t\telse\r\n\t\t\t\tlMetaLines.push line\r\n\t\telse\r\n\t\t\tlLines.push line\r\n\t\tnumLines += 1\r\n\r\n\tif defined(lMetaLines)\r\n\t\tmetadata = fromTAML(toBlock(lMetaLines))\r\n\telse\r\n\t\tmetadata = undef\r\n\thResult = {\r\n\t\tmetadata\r\n\t\tlLines\r\n\t\t}\r\n\tdbgReturn 'getTextFileContents', hResult\r\n\treturn hResult\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport allFilesIn = (dir, hOptions={}) ->\r\n\t# --- yields hFile with keys:\r\n\t#        path, type, root, dir, base, fileName,\r\n\t#        name, stub, ext, purpose\r\n\t#        (if eager) metadata, lLines\r\n\t# --- dir must be a directory\r\n\t# --- Valid options:\r\n\t#        recursive - descend into subdirectories\r\n\t#        eager - read the file and add keys metadata, contents\r\n\r\n\tdbgEnter 'allFilesIn', dir, hOptions\r\n\t{recursive, eager} = getOptions(hOptions, {\r\n\t\trecursive: true\r\n\t\teager: false\r\n\t\t})\r\n\tdir = mkpath dir\r\n\tassert isDir(dir), \"Not a directory: #{dir}\"\r\n\thOptions = {withFileTypes: true, recursive}\r\n\tfor ent in fs.readdirSync(dir, hOptions)\r\n\t\tdbg \"ENT:\", ent\r\n\t\tif ent.isFile()\r\n\t\t\tpath = mkpath(ent.path, ent.name)\r\n\t\t\tdbg \"PATH = #{path}\"\r\n\t\t\thFile = parsePath(path)\r\n\t\t\tassert isHash(hFile), \"hFile = #{OL(hFile)}\"\r\n\t\t\tif eager\r\n\t\t\t\thContents = getTextFileContents(path)\r\n\t\t\t\tObject.assign hFile, hContents\r\n\t\t\tdbg 'hFile', hFile\r\n\t\t\tyield hFile\r\n\tdbgReturn 'allFilesIn'\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport dirContents = (dirPath, pattern='*', hOptions={}) ->\r\n\r\n\t{absolute, cwd, dot, filesOnly, dirsOnly\r\n\t\t} = getOptions hOptions, {\r\n\t\tabsolute: true\r\n\t\tdot: false\r\n\t\tfilesOnly: false\r\n\t\tdirsOnly: false\r\n\t\t}\r\n\r\n\tassert ! (filesOnly && dirsOnly), \"Incompatible options\"\r\n\tlPaths = glob(pattern, {absolute, cwd: dirPath, dot})\r\n\tif filesOnly\r\n\t\treturn lPaths.filter((path) => isFile(path))\r\n\telse if dirsOnly\r\n\t\treturn lPaths.filter((path) => isDir(path))\r\n\telse\r\n\t\treturn lPaths\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport forEachFileInDir = (dir, func, hContext={}) =>\r\n\t# --- callback will get parms (filePath, hContext)\r\n\t#     DOES NOT RECURSE INTO SUBDIRECTORIES\r\n\r\n\tfor ent in fs.readdirSync(dir, {withFileTypes: true})\r\n\t\tif ent.isFile()\r\n\t\t\tfunc(ent.name, dir, hContext)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n#   slurp - read a file into a string\r\n\r\nexport slurp = (lParts...) =>\r\n\t# --- last argument can be an options hash\r\n\t#     Valid options:\r\n\t#        maxLines: <int>\r\n\r\n\tdbgEnter 'slurp', lParts\r\n\tassert (lParts.length > 0), \"No parameters\"\r\n\tif isHash(lParts[lParts.length - 1])\r\n\t\thOptions = lParts.pop()\r\n\t\tassert (lParts.length > 0), \"Options hash but no parameters\"\r\n\t\t{maxLines} = hOptions\r\n\r\n\tfilePath = mkpath(lParts...)\r\n\tif defined(maxLines)\r\n\t\tdbg \"maxLines = #{maxLines}\"\r\n\t\tlLines = []\r\n\t\tfor line from allLinesIn(filePath)\r\n\t\t\tlLines.push line\r\n\t\t\tif (lLines.length == maxLines)\r\n\t\t\t\tbreak\r\n\t\tdbg 'lLines', lLines\r\n\t\tblock = toBlock(lLines)\r\n\telse\r\n\t\tblock = fs.readFileSync(filePath, 'utf8') \\\r\n\t\t\t\t.toString() \\\r\n\t\t\t\t.replaceAll('\\r', '')\r\n\tdbg 'block', block\r\n\r\n\tdbgReturn 'slurp', block\r\n\treturn block\r\n\r\n# ---------------------------------------------------------------------------\r\n#   slurpJSON - read a file into a hash\r\n\r\nexport slurpJSON = (lParts...) =>\r\n\r\n\treturn fromJSON(slurp(lParts...))\r\n\r\n# ---------------------------------------------------------------------------\r\n#   slurpTAML - read a file into a hash\r\n\r\nexport slurpTAML = (lParts...) =>\r\n\r\n\treturn fromTAML(slurp(lParts...))\r\n\r\n# ---------------------------------------------------------------------------\r\n#   slurpPkgJSON - read package.json into a hash\r\n\r\nexport slurpPkgJSON = (lParts...) =>\r\n\r\n\tif (lParts.length == 0)\r\n\t\tpkgJsonPath = getPkgJsonPath()\r\n\telse\r\n\t\tpkgJsonPath = mkpath(lParts...)\r\n\t\tassert isFile(pkgJsonPath), \"Missing package.json at cur dir\"\r\n\treturn slurpJSON(pkgJsonPath)\r\n\r\n# ---------------------------------------------------------------------------\r\n#   barf - write a string to a file\r\n#          will ensure that all necessary directories exist\r\n\r\nexport barf = (text, lParts...) =>\r\n\r\n\tassert (lParts.length > 0), \"Missing file path\"\r\n\tfilePath = mkpath(lParts...)\r\n\tmkDirsForFile(filePath)\r\n\tfs.writeFileSync(filePath, text)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n#   barfJSON - write a string to a file\r\n\r\nexport barfJSON = (hJson, lParts...) =>\r\n\r\n\tassert isHash(hJson), \"hJson not a hash\"\r\n\tbarf(toJSON(hJson), lParts...)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n#   barfTAML - write a string to a file\r\n\r\nexport barfTAML = (ds, lParts...) =>\r\n\r\n\tassert isHash(ds) || isArray(ds), \"ds not a hash or array\"\r\n\tbarf(toTAML(ds), lParts...)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n#   barfPkgJSON - write a string to a file\r\n\r\nexport barfPkgJSON = (hJson, lParts...) =>\r\n\r\n\tif (lParts.length == 0)\r\n\t\tpkgJsonPath = getPkgJsonPath()\r\n\telse\r\n\t\tpkgJsonPath = mkpath(lParts...)\r\n\t\tassert isFile(pkgJsonPath), \"Missing package.json at cur dir\"\r\n\tbarfJSON(hJson, pkgJsonPath)\r\n\treturn\r\n\r\n # ---------------------------------------------------------------------------\r\n\r\nexport class FileWriter\r\n\r\n\tconstructor: (@filePath) ->\r\n\r\n\t\tassert isString(@filePath), \"Not a string: #{@filePath}\"\r\n\t\t@writer = fs.createWriteStream(@filePath)\r\n\r\n\tDESTROY: () ->\r\n\r\n\t\tif defined(@writer)\r\n\t\t\t@end()\r\n\t\treturn\r\n\r\n\twrite: (lStrings...) ->\r\n\r\n\t\tassert defined(@writer), \"Write after end()\"\r\n\t\tfor str in lStrings\r\n\t\t\tassert isString(str), \"Not a string: '#{str}'\"\r\n\t\t\t@writer.write str\r\n\t\treturn\r\n\r\n\twriteln: (lStrings...) ->\r\n\r\n\t\tassert defined(@writer), \"Write after end()\"\r\n\t\tfor str in lStrings\r\n\t\t\tassert isString(str), \"Not a string: '#{str}'\"\r\n\t\t\t@writer.write str\r\n\t\t\t@writer.write \"\\n\"\r\n\t\treturn\r\n\r\n\tend: () ->\r\n\r\n\t\t@writer.end()\r\n\t\t@writer = undef\r\n\t\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class FileWriterSync\r\n\r\n\tconstructor: (@filePath) ->\r\n\r\n\t\tassert isString(@filePath), \"Not a string: #{@filePath}\"\r\n\t\t@fullPath = mkpath(@filePath)\r\n\t\tassert isString(@fullPath), \"Bad path: #{@filePath}\"\r\n\t\t@fd = fs.openSync(@fullPath, 'w')\r\n\r\n\tDESTROY: () ->\r\n\r\n\t\tif defined(@fd)\r\n\t\t\t@end()\r\n\t\treturn\r\n\r\n\twrite: (lStrings...) ->\r\n\r\n\t\tassert defined(@fd), \"Write after end()\"\r\n\t\tfor str in lStrings\r\n\t\t\tif isNumber(str)\r\n\t\t\t\tfs.writeSync @fd, str.toString()\r\n\t\t\telse\r\n\t\t\t\tassert isString(str), \"Not a string: '#{str}'\"\r\n\t\t\t\tfs.writeSync @fd, str\r\n\t\treturn\r\n\r\n\twriteln: (lStrings...) ->\r\n\r\n\t\t@write lStrings...\r\n\t\t@write \"\\n\"\r\n\t\treturn\r\n\r\n\tend: () ->\r\n\r\n\t\tfs.closeSync(@fd)\r\n\t\t@fd = undef\r\n\t\treturn\r\n\r\n"
  ]
}