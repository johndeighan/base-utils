{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\fs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# fs.coffee\n\nimport pathLib from 'node:path'\nimport urlLib from 'url'\nimport fs from 'fs'\nimport NReadLines from 'n-readlines'\nimport {open} from 'node:fs/promises'\n\nimport {\n\tundef, defined, notdefined, nonEmpty, words, truncateStr,\n\ttoBlock, toArray, getOptions, isNonEmptyString,\n\tisString, isNumber, isInteger, deepCopy,\n\tisHash, isArray, isIterable, isRegExp, removeKeys,\n\tfromJSON, toJSON, OL, forEachItem, jsType, hasKey,\n\tfileExt, withExt, newerDestFilesExist, centeredText,\n\t} from '@jdeighan/base-utils'\nimport {\n\tworkingDir, myself, mydir, mkpath, samefile, relpath,\n\tmkDir, clearDir, touch, isFile, isDir, rename,\n\tpathType, rmFile, rmDir, parsePath, dirListing,\n\tparentDir, parallelPath, subPath, dirContents,\n\tfileDirPath, mkDirsForFile, getFileStats, lStatFields,\n\t} from '@jdeighan/base-utils/ll-fs'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {LOG, LOGVALUE} from '@jdeighan/base-utils/log'\nimport {\n\tdbgEnter, dbgReturn, dbg, dbgYield, dbgResume,\n\t} from '@jdeighan/base-utils/debug'\nimport {toTAML, fromTAML} from '@jdeighan/base-utils/taml'\nimport {\n\tisMetaDataStart, convertMetaData,\n\t} from '@jdeighan/base-utils/metadata'\nexport {\n\tfileExt, workingDir, myself, mydir, mkpath, samefile, relpath,\n\tmkDir, clearDir, touch, isFile, isDir, rename,\n\tpathType, rmFile, rmDir, parsePath, withExt,\n\tparentDir, parallelPath, subPath, lStatFields,\n\tfileDirPath,  mkDirsForFile, getFileStats,\n\tnewerDestFilesExist, dirContents, dirListing,\n\t}\n\nlDirs = []\n\n# ---------------------------------------------------------------------------\n\nexport pushCWD = (dir) =>\n\n\tlDirs.push process.cwd()\n\tprocess.chdir(dir)\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport popCWD = () =>\n\n\tassert (lDirs.length > 0), \"directory stack is empty\"\n\tdir = lDirs.pop()\n\tprocess.chdir(dir)\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport isProjRoot = (dir='.', hOptions={}) =>\n\n\t{strict} = getOptions hOptions, {\n\t\tstrict: false\n\t\t}\n\n\tfilePath = \"#{dir}/package.json\"\n\tif !isFile(filePath)\n\t\treturn false\n\n\tif !strict\n\t\treturn true\n\n\tlExpectedFiles = [\n\t\t'package-lock.json'\n\t\t'README.md'\n\t\t'.gitignore'\n\t\t]\n\n\tfor name in lExpectedFiles\n\t\tfilePath = \"#{dir}/#{name}\"\n\t\tif !isFile(filePath)\n\t\t\treturn false\n\n\tlExpectedDirs = [\n\t\t'node_modules'\n\t\t'.git'\n\t\t'src'\n\t\t'src/lib'\n\t\t'src/bin'\n\t\t'test'\n\t\t]\n\tfor name in lExpectedDirs\n\t\tdirPath = \"#{dir}/#{name}\"\n\t\tif !isDir(dirPath)\n\t\t\treturn false\n\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport getPkgJsonDir = () =>\n\n\tpkgJsonDir = undef\n\n\t# --- First, get the directory this file is in\n\tdir = mydir(import.meta.url)\n\n\t# --- parse into parts\n\t{root, lDirs} = parsePath(dir)\n\n\t# --- search upward for package.json\n\twhile (lDirs.length > 0)\n\t\tpath = mkpath(root, lDirs, 'package.json')\n\t\tif isFile(path)\n\t\t\treturn mkpath(root, lDirs)\n\t\tlDirs.pop()\n\n\t\tdir = mkpath('..', dir)\n\n# ---------------------------------------------------------------------------\n\nexport getPkgJsonPath = () =>\n\n\tfilePath = mkpath(process.cwd(), 'package.json')\n\tassert isFile(filePath), \"Missing pacakge.json at cur dir\"\n\treturn filePath\n\n# ---------------------------------------------------------------------------\n\nexport isFakeFile = (filePath) =>\n\n\tif ! fs.existsSync(filePath)\n\t\tthrow new Error(\"file #{filePath} does not exist\")\n\treader = new NReadLines(filePath)\n\tfirstLine = reader.next().toString()\n\treturn firstLine.match(/// \\/ \\/ \\s* fake///)\n\n# ---------------------------------------------------------------------------\n# --- return true to include file\n\nfileFilter = (filePath) =>\n\n\treturn isFile(filePath) && notdefined(filePath.match(/\\bnode_modules\\b/))\n\n# ---------------------------------------------------------------------------\n#   slurp - read a file into a string\n\nexport slurp = (filePath, hOptions) =>\n\n\tdbgEnter 'slurp', filePath, hOptions\n\tassert isNonEmptyString(filePath), \"empty path\"\n\tfilePath = mkpath(filePath)\n\tassert isFile(filePath), \"Not a file: #{OL(filePath)}\"\n\tblock = fs.readFileSync(filePath, 'utf8') \\\n\t\t\t.toString() \\\n\t\t\t.replaceAll('\\r', '')\n\tdbgReturn 'slurp', block\n\treturn block\n\n# ---------------------------------------------------------------------------\n#   slurpJSON - read a file into a hash\n\nexport slurpJSON = (filePath) =>\n\n\treturn fromJSON(slurp(filePath))\n\n# ---------------------------------------------------------------------------\n#   slurpTAML - read a file into a hash\n\nexport slurpTAML = (filePath) =>\n\n\treturn fromTAML(slurp(filePath))\n\n# ---------------------------------------------------------------------------\n#   slurpPkgJSON - read package.json into a hash\n\nexport slurpPkgJSON = () =>\n\n\tpkgJsonPath = getPkgJsonPath()\n\tassert isFile(pkgJsonPath),\n\t\t\t\"Missing package.json at cur dir #{OL(process.cwd())}\"\n\treturn slurpJSON(pkgJsonPath)\n\n# ---------------------------------------------------------------------------\n#   barf - write a string to a file\n#          will ensure that all necessary directories exist\n\nexport barf = (text, lParts...) =>\n\n\tassert (lParts.length > 0), \"Missing file path\"\n\tfilePath = mkpath(lParts...)\n\tmkDirsForFile(filePath)\n\tfs.writeFileSync(filePath, text)\n\treturn\n\n# ---------------------------------------------------------------------------\n#   barfJSON - write a string to a file\n\nexport barfJSON = (hJson, lParts...) =>\n\n\tassert isHash(hJson), \"hJson not a hash\"\n\tbarf(toJSON(hJson), lParts...)\n\treturn\n\n# ---------------------------------------------------------------------------\n#   barfTAML - write a string to a file\n\nexport barfTAML = (ds, lParts...) =>\n\n\tassert isHash(ds) || isArray(ds), \"ds not a hash or array\"\n\tbarf(toTAML(ds), lParts...)\n\treturn\n\n# ---------------------------------------------------------------------------\n#   barfAST - write AST to a file\n#      Valid options:\n#         full = write out complete AST\n\nexport barfAST = (hAST, filePath, hOptions={}) =>\n\n\t{full} = getOptions hOptions, {\n\t\tfull: false\n\t\t}\n\tlSortBy = words(\"type params body left right\")\n\tif full\n\t\tbarf toTAML(hAST, {sortKeys: lSortBy}), filePath\n\telse\n\t\thCopy = deepCopy hAST\n\t\tremoveKeys hCopy, words(\n\t\t\t'start end extra declarations loc range tokens comments',\n\t\t\t'assertions implicit optional async generate hasIndentedBody'\n\t\t\t)\n\t\tbarf toTAML(hCopy, {sortKeys: lSortBy}), filePath\n\treturn\n\n# ---------------------------------------------------------------------------\n#   barfPkgJSON - write a string to a file\n\nexport barfPkgJSON = (hJson) =>\n\n\tbarfJSON(hJson, getPkgJsonPath())\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport FileWriter = class\n\n\tconstructor: (@filePath, hOptions) ->\n\n\t\t@hOptions = getOptions hOptions, {\n\t\t\tasync: false\n\t\t\t}\n\t\t@async = @hOptions.async\n\t\t@fullPath = mkpath(@filePath)\n\n\t# ..........................................................\n\n\tconvert: (item) ->\n\t\t# --- convert arbitrary value into a string\n\n\t\tswitch jsType(item)[0]\n\t\t\twhen 'string'\n\t\t\t\treturn item\n\t\t\twhen 'number'\n\t\t\t\treturn item.toString()\n\t\t\telse\n\t\t\t\treturn OL(item)\n\n\t# ..........................................................\n\n\twrite: (lItems...) ->\n\n\t\tlStrings = []\n\t\tfor item in lItems\n\t\t\tlStrings.push @convert(item)\n\n\t\t# --- open on first use\n\t\tif @async\n\t\t\tif notdefined(@writer)\n\t\t\t\t@fd = await open(@fullPath, 'w')\n\t\t\t\t@writer = @fd.createWriteStream()\n\t\t\tfor str in lStrings\n\t\t\t\t@writer.write str\n\t\telse\n\t\t\tif notdefined(@fd)\n\t\t\t\t@fd = fs.openSync(@fullPath, 'w')\n\t\t\tfor str in lStrings\n\t\t\t\tfs.writeSync @fd, str\n\t\treturn\n\n\t# ..........................................................\n\n\twriteln: (lItems...) ->\n\n\t\tawait @write lItems..., \"\\n\"\n\t\treturn\n\n\t# ..........................................................\n\n\tDESTROY: () ->\n\n\t\t@end()\n\t\treturn\n\n\t# ..........................................................\n\n\tclose: () ->\n\n\t\tif @async\n\t\t\tif defined(@writer)\n\t\t\t\tawait @writer.close()\n\t\t\t\t@writer = undef\n\t\telse\n\t\t\tif defined(@fd)\n\t\t\t\tfs.closeSync(@fd)\n\t\t\t\t@fd = undef\n\n\t\treturn"
  ]
}