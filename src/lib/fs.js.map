{
  "version": 3,
  "file": "fs.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\fs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# fs.coffee\r\n\r\nimport pathLib from 'node:path'\r\nimport urlLib from 'url'\r\nimport fs from 'fs'\r\nimport NReadLines from 'n-readlines'\r\nimport {globSync as glob} from 'glob'\r\nimport {open} from 'node:fs/promises'\r\n\r\nimport {\r\n\tundef, defined, notdefined, nonEmpty, words,\r\n\ttoBlock, toArray, getOptions, isNonEmptyString,\r\n\tisString, isNumber, isInteger,\r\n\tisHash, isArray, isIterable, isRegExp,\r\n\tfromJSON, toJSON, OL, forEachItem, jsType, hasKey,\r\n\t} from '@jdeighan/base-utils'\r\nimport {\r\n\tfileExt, workingDir, myself, mydir, mkpath, withExt,\r\n\tmkDir, clearDir, touch, isFile, isDir, rename,\r\n\tpathType, rmFile, rmDir, parsePath,\r\n\tparentDir, parallelPath, subPath,\r\n\tfileDirPath, mkDirsForFile, getFileStats, lStatFields,\r\n\t} from '@jdeighan/base-utils/ll-fs'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {LOG, LOGVALUE} from '@jdeighan/base-utils/log'\r\nimport {\r\n\tdbgEnter, dbgReturn, dbg, dbgYield, dbgResume,\r\n\t} from '@jdeighan/base-utils/debug'\r\nimport {toTAML, fromTAML} from '@jdeighan/base-utils/taml'\r\n\r\nexport {\r\n\tfileExt, workingDir, myself, mydir, mkpath, withExt,\r\n\tmkDir, clearDir, touch, isFile, isDir, rename,\r\n\tpathType, rmFile, rmDir, parsePath,\r\n\tparentDir, parallelPath, subPath,\r\n\tfileDirPath,  mkDirsForFile, getFileStats,\r\n\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getPkgJsonDir = () =>\r\n\r\n\tpkgJsonDir = undef\r\n\r\n\t# --- First, get the directory this file is in\r\n\tdir = mydir(import.meta.url)\r\n\r\n\t# --- parse into parts\r\n\t{root, lDirs} = parsePath(dir)\r\n\r\n\t# --- search upward for package.json\r\n\twhile (lDirs.length > 0)\r\n\t\tpath = mkpath(root, lDirs, 'package.json')\r\n\t\tif isFile(path)\r\n\t\t\treturn mkpath(root, lDirs)\r\n\t\tlDirs.pop()\r\n\r\n\t\tdir = mkpath('..', dir)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getPkgJsonPath = () =>\r\n\r\n\tfilePath = mkpath(process.cwd(), 'package.json')\r\n\tassert isFile(filePath), \"Missing pacakge.json at cur dir\"\r\n\treturn filePath\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getTextFileContents = (filePath) =>\r\n\t# --- handles metadata if present\r\n\r\n\tdbgEnter 'getTextFileContents', filePath\r\n\tlMetaLines = undef\r\n\tinMeta = false\r\n\r\n\tlLines = []\r\n\r\n\tnumLines = 0\r\n\tfor line from allLinesIn(filePath)\r\n\t\tif (numLines == 0) && (line == '---')\r\n\t\t\tlMetaLines = ['---']\r\n\t\t\tinMeta = true\r\n\t\telse if inMeta\r\n\t\t\tif (line == '---')\r\n\t\t\t\tinMeta = false\r\n\t\t\telse\r\n\t\t\t\tlMetaLines.push line\r\n\t\telse\r\n\t\t\tlLines.push line\r\n\t\tnumLines += 1\r\n\r\n\tif defined(lMetaLines)\r\n\t\tmetadata = fromTAML(toBlock(lMetaLines))\r\n\telse\r\n\t\tmetadata = undef\r\n\thResult = {\r\n\t\tmetadata\r\n\t\tlLines\r\n\t\t}\r\n\tdbgReturn 'getTextFileContents', hResult\r\n\treturn hResult\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- yield hFile with keys:\r\n#        path, filePath\r\n#        type\r\n#        root\r\n#        dir\r\n#        base, fileName\r\n#        name, stub\r\n#        ext\r\n#        purpose\r\n#     ...plus stat fields\r\n\r\nexport globFiles = (pattern='*', hGlobOptions={}) ->\r\n\r\n\tdbgEnter 'globFiles', pattern, hGlobOptions\r\n\r\n\thGlobOptions = getOptions hGlobOptions, {\r\n\t\twithFileTypes: true\r\n\t\tstat: true\r\n\t\t}\r\n\r\n\tdbg 'pattern', pattern\r\n\tdbg 'hGlobOptions', hGlobOptions\r\n\r\n\tfor ent in glob(pattern, hGlobOptions)\r\n\t\tfilePath = mkpath(ent.fullpath())\r\n\t\t{root, dir, base, name, ext} = pathLib.parse(filePath)\r\n\t\tif lMatches = name.match(///\r\n\t\t\t\t\\.\r\n\t\t\t\t([A-Za-z_]+)\r\n\t\t\t\t$///)\r\n\t\t\tpurpose = lMatches[1]\r\n\t\telse\r\n\t\t\tpurpose = undef\r\n\t\tif ent.isDirectory()\r\n\t\t\ttype = 'dir'\r\n\t\telse if ent.isFile()\r\n\t\t\ttype = 'file'\r\n\t\telse\r\n\t\t\ttype = 'unknown'\r\n\t\thFile = {\r\n\t\t\tpath: filePath\r\n\t\t\tfilePath\r\n\t\t\ttype\r\n\t\t\troot\r\n\t\t\tdir\r\n\t\t\tbase\r\n\t\t\tfileName: base\r\n\t\t\tname\r\n\t\t\tstub: name\r\n\t\t\text\r\n\t\t\tpurpose\r\n\t\t\t}\r\n\t\tfor key in lStatFields\r\n\t\t\thFile[key] = ent[key]\r\n\t\tdbgYield 'globFiles', hFile\r\n\t\tyield hFile\r\n\t\tdbgResume 'globFiles'\r\n\r\n\tdbgReturn 'globFiles'\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport newerDestFileExists = (srcPath, destPath) =>\r\n\r\n\tif ! fs.existsSync(destPath)\r\n\t\treturn false\r\n\tsrcModTime = fs.statSync(srcPath).mtimeMs\r\n\tdestModTime = fs.statSync(destPath).mtimeMs\r\n\treturn (destModTime >= srcModTime)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport allFilesIn = (pattern='*', hOptions={}) ->\r\n\t# --- yields hFile with keys:\r\n\t#        path, filePath,\r\n\t#        type, root, dir, base, fileName,\r\n\t#        name, stub, ext, purpose\r\n\t#        (if eager) metadata, lLines\r\n\t# --- Valid options:\r\n\t#        hGlobOptions - options to pass to glob\r\n\t#        eager - read the file and add keys metadata, contents\r\n\t# --- Valid glob options:\r\n\t#        ignore - glob pattern for files to ignore\r\n\t#        dot - include dot files/directories (default: false)\r\n\t#        cwd - change working directory\r\n\r\n\tdbgEnter 'allFilesIn', pattern, hOptions\r\n\t{hGlobOptions, eager} = getOptions(hOptions, {\r\n\t\thGlobOptions: {\r\n\t\t\tignore: \"node_modules\"\r\n\t\t\t}\r\n\t\teager: false\r\n\t\t})\r\n\r\n\tdbg \"pattern = #{OL(pattern)}\"\r\n\tdbg \"hGlobOptions = #{OL(hGlobOptions)}\"\r\n\tdbg \"eager = #{OL(eager)}\"\r\n\r\n\tfor hFile from globFiles(pattern, hGlobOptions)\r\n\t\t{filePath} = hFile\r\n\t\tif ! filePath.includes('node_modules')\r\n\t\t\tif eager\r\n\t\t\t\thContents = getTextFileContents(hFile.path)\r\n\t\t\t\tObject.assign hFile, hContents\r\n\t\t\tdbgYield 'allFilesIn', hFile\r\n\t\t\tyield hFile\r\n\t\t\tdbgResume 'allFilesIn'\r\n\tdbgReturn 'allFilesIn'\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport dirContents = (dirPath, pattern='*', hOptions={}) ->\r\n\r\n\t{absolute, cwd, dot, filesOnly, dirsOnly\r\n\t\t} = getOptions hOptions, {\r\n\t\tabsolute: true\r\n\t\tdot: false\r\n\t\tfilesOnly: false\r\n\t\tdirsOnly: false\r\n\t\t}\r\n\r\n\tassert ! (filesOnly && dirsOnly), \"Incompatible options\"\r\n\tlPaths = glob(pattern, {absolute, cwd: dirPath, dot})\r\n\tif filesOnly\r\n\t\treturn lPaths.filter((path) => isFile(path))\r\n\telse if dirsOnly\r\n\t\treturn lPaths.filter((path) => isDir(path))\r\n\telse\r\n\t\treturn lPaths\r\n\r\n# ---------------------------------------------------------------------------\r\n#   slurp - read a file into a string\r\n\r\nexport slurp = (filePath, hOptions) =>\r\n\t# --- Valid options:\r\n\t#        maxLines: <int>\r\n\r\n\tdbgEnter 'slurp', filePath, hOptions\r\n\tassert isNonEmptyString(filePath), \"empty path\"\r\n\t{maxLines} = getOptions hOptions, {\r\n\t\tmaxLines: undef\r\n\t\t}\r\n\tif defined(maxLines)\r\n\t\tassert isInteger(maxLines), \"maxLines must be an integer\"\r\n\tfilePath = mkpath(filePath)\r\n\tif defined(maxLines)\r\n\t\tdbg \"maxLines = #{maxLines}\"\r\n\t\tlLines = []\r\n\t\tfor line from allLinesIn(filePath)\r\n\t\t\tlLines.push line\r\n\t\t\tif (lLines.length == maxLines)\r\n\t\t\t\tbreak\r\n\t\tdbg 'lLines', lLines\r\n\t\tblock = toBlock(lLines)\r\n\telse\r\n\t\tblock = fs.readFileSync(filePath, 'utf8') \\\r\n\t\t\t\t.toString() \\\r\n\t\t\t\t.replaceAll('\\r', '')\r\n\tdbg 'block', block\r\n\r\n\tdbgReturn 'slurp', block\r\n\treturn block\r\n\r\n# ---------------------------------------------------------------------------\r\n#   slurpJSON - read a file into a hash\r\n\r\nexport slurpJSON = (filePath) =>\r\n\r\n\treturn fromJSON(slurp(filePath))\r\n\r\n# ---------------------------------------------------------------------------\r\n#   slurpTAML - read a file into a hash\r\n\r\nexport slurpTAML = (filePath) =>\r\n\r\n\treturn fromTAML(slurp(filePath))\r\n\r\n# ---------------------------------------------------------------------------\r\n#   slurpPkgJSON - read package.json into a hash\r\n\r\nexport slurpPkgJSON = () =>\r\n\r\n\tpkgJsonPath = getPkgJsonPath()\r\n\tassert isFile(pkgJsonPath), \"Missing package.json at cur dir\"\r\n\treturn slurpJSON(pkgJsonPath)\r\n\r\n# ---------------------------------------------------------------------------\r\n#   barf - write a string to a file\r\n#          will ensure that all necessary directories exist\r\n\r\nexport barf = (text, lParts...) =>\r\n\r\n\tassert (lParts.length > 0), \"Missing file path\"\r\n\tfilePath = mkpath(lParts...)\r\n\tmkDirsForFile(filePath)\r\n\tfs.writeFileSync(filePath, text)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n#   barfJSON - write a string to a file\r\n\r\nexport barfJSON = (hJson, lParts...) =>\r\n\r\n\tassert isHash(hJson), \"hJson not a hash\"\r\n\tbarf(toJSON(hJson), lParts...)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n#   barfTAML - write a string to a file\r\n\r\nexport barfTAML = (ds, lParts...) =>\r\n\r\n\tassert isHash(ds) || isArray(ds), \"ds not a hash or array\"\r\n\tbarf(toTAML(ds), lParts...)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n#   barfPkgJSON - write a string to a file\r\n\r\nexport barfPkgJSON = (hJson, lParts...) =>\r\n\r\n\tif (lParts.length == 0)\r\n\t\tpkgJsonPath = getPkgJsonPath()\r\n\telse\r\n\t\tpkgJsonPath = mkpath(lParts...)\r\n\t\tassert isFile(pkgJsonPath), \"Missing package.json at cur dir\"\r\n\tbarfJSON(hJson, pkgJsonPath)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport allLinesIn = (filePath) ->\r\n\r\n\treader = new NReadLines(filePath)\r\n\twhile buffer = reader.next()\r\n\t\tyield buffer.toString().replaceAll('\\r', '')\r\n\t# --- reader.close() fails with error if EOF reached\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport forEachLineInFile = (filePath, func, hContext={}) =>\r\n\t# --- func gets (line, hContext)\r\n\t#     hContext will include keys:\r\n\t#        filePath\r\n\t#        lineNum - first line is line 1\r\n\r\n\tlinefunc = (line, hContext) =>\r\n\t\thContext.filePath = filePath\r\n\t\thContext.lineNum = hContext.index + 1\r\n\t\treturn func(line, hContext)\r\n\r\n\treturn forEachItem(\r\n\t\tallLinesIn(filePath),\r\n\t\tlinefunc,\r\n\t\thContext\r\n\t\t)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class FileWriter\r\n\r\n\tconstructor: (@filePath, hOptions) ->\r\n\r\n\t\t@hOptions = getOptions hOptions, {\r\n\t\t\tasync: false\r\n\t\t\t}\r\n\t\t@async = @hOptions.async\r\n\t\t@fullPath = mkpath(@filePath)\r\n\r\n\t# ..........................................................\r\n\r\n\tconvert: (item) ->\r\n\t\t# --- convert arbitrary value into a string\r\n\r\n\t\tswitch jsType(item)[0]\r\n\t\t\twhen 'string'\r\n\t\t\t\treturn item\r\n\t\t\twhen 'number'\r\n\t\t\t\treturn item.toString()\r\n\t\t\telse\r\n\t\t\t\treturn OL(item)\r\n\r\n\t# ..........................................................\r\n\r\n\twrite: (lItems...) ->\r\n\r\n\t\tlStrings = []\r\n\t\tfor item in lItems\r\n\t\t\tlStrings.push @convert(item)\r\n\r\n\t\t# --- open on first use\r\n\t\tif @async\r\n\t\t\tif notdefined(@writer)\r\n\t\t\t\t@fd = await open(@fullPath, 'w')\r\n\t\t\t\t@writer = @fd.createWriteStream()\r\n\t\t\tfor str in lStrings\r\n\t\t\t\t@writer.write str\r\n\t\telse\r\n\t\t\tif notdefined(@fd)\r\n\t\t\t\t@fd = fs.openSync(@fullPath, 'w')\r\n\t\t\tfor str in lStrings\r\n\t\t\t\tfs.writeSync @fd, str\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\twriteln: (lItems...) ->\r\n\r\n\t\tawait @write lItems..., \"\\n\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tDESTROY: () ->\r\n\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tclose: () ->\r\n\r\n\t\tif @async\r\n\t\t\tif defined(@writer)\r\n\t\t\t\tawait @writer.close()\r\n\t\t\t\t@writer = undef\r\n\t\telse\r\n\t\t\tif defined(@fd)\r\n\t\t\t\tfs.closeSync(@fd)\r\n\t\t\t\t@fd = undef\r\n\r\n\t\treturn\r\n"
  ]
}