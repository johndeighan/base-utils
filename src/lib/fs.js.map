{
  "version": 3,
  "file": "fs.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\fs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# fs.coffee\r\n\r\nimport pathLib from 'node:path'\r\nimport urlLib from 'url'\r\nimport fs from 'fs'\r\nimport {\r\n\treadFile, writeFile, rm, rmdir,   #  rmSync, rmdirSync,\r\n\t} from 'node:fs/promises'\r\nimport NReadLines from 'n-readlines'\r\n\r\nimport {\r\n\tundef, defined, nonEmpty, toBlock, toArray, getOptions,\r\n\tisString, isHash, isArray, isIterable,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {LOG, LOGVALUE} from '@jdeighan/base-utils/log'\r\nimport {dbgEnter, dbgReturn, dbg} from '@jdeighan/base-utils/debug'\r\nimport {toTAML, fromTAML} from '@jdeighan/base-utils/taml'\r\nimport {\r\n\tfixPath, mydir, mkpath, resolve, parsePath,\r\n\t} from '@jdeighan/base-utils/ll-fs'\r\n\r\nexport {fixPath, mydir, mkpath, resolve, parsePath}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getFullPath = (lPaths...) =>\r\n\r\n\treturn fixPath(pathLib.resolve(lPaths...).replaceAll(\"\\\\\", \"/\"))\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport allDirs = (root, lDirs) ->\r\n\r\n\tlen = lDirs.length\r\n\twhile (len > 0)\r\n\t\tyield mkpath(root, lDirs)\r\n\t\tlDirs\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getPkgJsonDir = () =>\r\n\r\n\tpkgJsonDir = undef\r\n\r\n\t# --- First, get the directory this file is in\r\n\tdir = mydir(import.meta.url)\r\n\r\n\t# --- parse into parts\r\n\t{root, lDirs} = parsePath(dir)\r\n\r\n\t# --- search upward for package.json\r\n\twhile (lDirs.length > 0)\r\n\t\tpath = mkpath(root, lDirs, 'package.json')\r\n\t\tif isFile(path)\r\n\t\t\treturn mkpath(root, lDirs)\r\n\t\tlDirs.pop()\r\n\r\n\t\tdir = pathLib.resolve('..', dir)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getPkgJsonPath = () =>\r\n\r\n\tfilePath = mkpath(process.cwd(), 'package.json')\r\n\tassert isFile(filePath), \"Missing pacakge.json at cur dir\"\r\n\treturn filePath\r\n\r\n# ---------------------------------------------------------------------------\r\n#    file functions\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isFile = (lParts...) =>\r\n\r\n\tdbgEnter 'isFile', lParts\r\n\tfilePath = mkpath(lParts...)\r\n\tdbg \"filePath is '#{filePath}'\"\r\n\ttry\r\n\t\tresult = fs.lstatSync(filePath).isFile()\r\n\t\tdbgReturn 'isFile', result\r\n\t\treturn result\r\n\tcatch\r\n\t\tdbgReturn 'isFile', false\r\n\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport rmFile = (filepath) =>\r\n\r\n\tawait rm filepath\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport rmFileSync = (filepath) =>\r\n\r\n\tassert isFile(filepath), \"#{filepath} is not a file\"\r\n\tfs.rmSync filepath\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n#    directory functions\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isDir = (lParts...) =>\r\n\r\n\tdbgEnter 'isDir', lParts\r\n\tdirPath = mkpath(lParts...)\r\n\tdbg \"dirPath is '#{dirPath}'\"\r\n\ttry\r\n\t\tresult = fs.lstatSync(dirPath).isDirectory()\r\n\t\tdbgReturn 'isDir', result\r\n\t\treturn result\r\n\tcatch\r\n\t\tdbgReturn 'isDir', false\r\n\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mkdirSync = (dirpath) =>\r\n\r\n\ttry\r\n\t\tfs.mkdirSync dirpath\r\n\tcatch err\r\n\t\tif (err.code == 'EEXIST')\r\n\t\t\tconsole.log 'Directory exists. Please choose another name'\r\n\t\telse\r\n\t\t\tconsole.log err\r\n\t\tprocess.exit 1\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport rmDir = (dirpath) =>\r\n\r\n\tawait rmdir dirpath, {recursive: true}\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport rmDirSync = (dirpath) =>\r\n\r\n\tfs.rmdirSync dirpath, {recursive: true}\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# ---------------------------------------------------------------------------\r\n\r\nexport fromJSON = (strJson) =>\r\n\t# --- string to data structure\r\n\r\n\treturn JSON.parse(strJson)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport toJSON = (hJson) =>\r\n\t# --- data structure to string\r\n\r\n\treturn JSON.stringify(hJson, null, \"\\t\")\r\n\r\n# ---------------------------------------------------------------------------\r\n#   slurp - read a file into a string\r\n\r\nexport slurp = (lParts...) =>\r\n\t# --- last argument can be an options hash\r\n\t#     Valid options:\r\n\t#        maxLines: <int>\r\n\r\n\tassert (lParts.length > 0), \"No parameters\"\r\n\tif isHash(lParts[lParts.length - 1])\r\n\t\thOptions = lParts.pop()\r\n\t\tassert (lParts.length > 0), \"Options hash but no parameters\"\r\n\t\t{maxLines} = hOptions\r\n\tfilePath = mkpath(lParts...)\r\n\tif defined(maxLines)\r\n\t\tlLines = []\r\n\r\n\t\treader = new NReadLines(filePath)\r\n\t\tnLines = 0\r\n\r\n\t\twhile (buffer = reader.next()) && (nLines < maxLines)\r\n\t\t\tnLines += 1\r\n\t\t\t# --- text is split on \\n chars,\r\n\t\t\t#     we also need to remove \\r chars\r\n\t\t\tlLines.push buffer.toString().replace(/\\r/g, '')\r\n\t\tcontents = toBlock(lLines)\r\n\telse\r\n\t\tcontents = fs.readFileSync(filePath, 'utf8').toString()\r\n\treturn contents\r\n\r\n# ---------------------------------------------------------------------------\r\n#   slurpJSON - read a file into a hash\r\n\r\nexport slurpJSON = (lParts...) =>\r\n\r\n\treturn fromJSON(slurp(lParts...))\r\n\r\n# ---------------------------------------------------------------------------\r\n#   slurpTAML - read a file into a hash\r\n\r\nexport slurpTAML = (lParts...) =>\r\n\r\n\treturn fromTAML(slurp(lParts...))\r\n\r\n# ---------------------------------------------------------------------------\r\n#   slurpPkgJSON - read package.json into a hash\r\n\r\nexport slurpPkgJSON = (lParts...) =>\r\n\r\n\tif (lParts.length == 0)\r\n\t\tpkgJsonPath = getPkgJsonPath()\r\n\telse\r\n\t\tpkgJsonPath = mkpath(lParts...)\r\n\t\tassert isFile(pkgJsonPath), \"Missing package.json at cur dir\"\r\n\treturn slurpJSON(pkgJsonPath)\r\n\r\n# ---------------------------------------------------------------------------\r\n#   barf - write a string to a file\r\n\r\nexport barf = (text, lParts...) =>\r\n\r\n\tassert (lParts.length > 0), \"Missing file path\"\r\n\tfilePath = mkpath(lParts...)\r\n\tfs.writeFileSync(filePath, text)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n#   barfJSON - write a string to a file\r\n\r\nexport barfJSON = (hJson, lParts...) =>\r\n\r\n\tassert isHash(hJson), \"hJson not a hash\"\r\n\tbarf(toJSON(hJson), lParts...)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n#   barfTAML - write a string to a file\r\n\r\nexport barfTAML = (ds, lParts...) =>\r\n\r\n\tassert isHash(ds) || isArray(ds), \"ds not a hash or array\"\r\n\tbarf(toTAML(ds), lParts...)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n#   barfPkgJSON - write a string to a file\r\n\r\nexport barfPkgJSON = (hJson, lParts...) =>\r\n\r\n\tif (lParts.length == 0)\r\n\t\tpkgJsonPath = getPkgJsonPath()\r\n\telse\r\n\t\tpkgJsonPath = mkpath(lParts...)\r\n\t\tassert isFile(pkgJsonPath), \"Missing package.json at cur dir\"\r\n\tbarfJSON(hJson, pkgJsonPath)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport hasPackageJson = (lParts...) =>\r\n\r\n\treturn isFile(lParts...)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport forEachFileInDir = (dir, func, hContext={}) =>\r\n\t# --- callback will get parms (filepath, hContext)\r\n\t#     DOES NOT RECURSE INTO SUBDIRECTORIES\r\n\r\n\tfor ent in fs.readdirSync(dir, {withFileTypes: true})\r\n\t\tif ent.isFile()\r\n\t\t\tfunc(ent.name, dir, hContext)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport forEachItem = (iter, func, hContext={}) =>\r\n\t# --- func() gets (item, hContext)\r\n\r\n\tassert isIterable(iter), \"not an iterable\"\r\n\tlItems = []\r\n\tindex = 0\r\n\tfor item from iter\r\n\t\thContext.index = index\r\n\t\tindex += 1\r\n\t\ttry\r\n\t\t\tresult = func(item, hContext)\r\n\t\t\tif defined(result)\r\n\t\t\t\tlItems.push result\r\n\t\tcatch err\r\n\t\t\treader.close()\r\n\t\t\tif isString(err)\r\n\t\t\t\treturn lItems\r\n\t\t\telse\r\n\t\t\t\tthrow err    # rethrow the error\r\n\treturn lItems\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport allLinesIn = (filepath) ->\r\n\r\n\treader = new NReadLines(filepath)\r\n\twhile (buffer = reader.next())\r\n\t\tyield buffer.toString().replace(/\\r/g, '')\r\n\treturn\r\n\r\nexport lineIterator = allLinesIn     # for backward compatibility\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport forEachLineInFile = (filepath, func, hContext={}) =>\r\n\t# --- func gets (line, hContext) - lineNum starts at 1\r\n\t#     hContext will include keys:\r\n\t#        filepath\r\n\t#        lineNum - first line is line 1\r\n\r\n\tlinefunc = (line, hContext) =>\r\n\t\thContext.filepath = filepath\r\n\t\thContext.lineNum = hContext.index + 1\r\n\t\treturn func(line, hContext)\r\n\r\n\treturn forEachItem(allLinesIn(filepath), linefunc, hContext)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport parseSource = (source) =>\r\n\t# --- returns {\r\n\t#        dir\r\n\t#        fileName, filename\r\n\t#        filePath, filepath\r\n\t#        stub\r\n\t#        ext\r\n\t#        purpose\r\n\t#        }\r\n\t# --- NOTE: source may be a file URL, e.g. import.meta.url\r\n\r\n\tdbgEnter 'parseSource', source\r\n\tassert isString(source), \"parseSource(): source not a string\"\r\n\tif source.match(/^file\\:\\/\\//)\r\n\t\tsource = urlLib.fileURLToPath(source)\r\n\r\n\tif isDir(source)\r\n\t\thSourceInfo = {\r\n\t\t\tdir: source\r\n\t\t\tfilePath: source\r\n\t\t\tfilepath: source\r\n\t\t\t}\r\n\telse\r\n\t\tassert isFile(source), \"source #{source} not a file or directory\"\r\n\t\thInfo = pathLib.parse(source)\r\n\t\tdir = hInfo.dir\r\n\t\tif dir\r\n\t\t\thSourceInfo = {\r\n\t\t\t\tdir: dir.replaceAll(\"\\\\\", \"/\")\r\n\t\t\t\tfilePath: mkpath(dir, hInfo.base)\r\n\t\t\t\tfilepath: mkpath(dir, hInfo.base)\r\n\t\t\t\tfileName: hInfo.base\r\n\t\t\t\tfilename: hInfo.base\r\n\t\t\t\tstub: hInfo.name\r\n\t\t\t\text: hInfo.ext\r\n\t\t\t\t}\r\n\t\telse\r\n\t\t\thSourceInfo = {\r\n\t\t\t\tfileName: hInfo.base\r\n\t\t\t\tfilename: hInfo.base\r\n\t\t\t\tstub: hInfo.name\r\n\t\t\t\text: hInfo.ext\r\n\t\t\t\t}\r\n\r\n\t\t# --- check for a 'purpose'\r\n\t\tif lMatches = hSourceInfo.stub.match(///\r\n\t\t\t\t\\.\r\n\t\t\t\t([A-Za-z_]+)\r\n\t\t\t\t$///)\r\n\t\t\thSourceInfo.purpose = lMatches[1]\r\n\tdbgReturn 'parseSource', hSourceInfo\r\n\treturn hSourceInfo\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getTextFileContents = (filePath) =>\r\n\r\n\tdbgEnter 'getTextFileContents', filePath\r\n\tlMetaLines = undef\r\n\tinMeta = false\r\n\r\n\tlLines = []\r\n\r\n\tnumLines = 0\r\n\tfor line from allLinesIn(filePath)\r\n\t\tif (numLines == 0) && (line == '---')\r\n\t\t\tlMetaLines = ['---']\r\n\t\t\tinMeta = true\r\n\t\telse if inMeta\r\n\t\t\tif (line == '---')\r\n\t\t\t\tinMeta = false\r\n\t\t\telse\r\n\t\t\t\tlMetaLines.push line\r\n\t\telse\r\n\t\t\tlLines.push line\r\n\t\tnumLines += 1\r\n\r\n\tif defined(lMetaLines)\r\n\t\tmetadata = fromTAML(toBlock(lMetaLines))\r\n\telse\r\n\t\tmetadata = undef\r\n\thResult = {\r\n\t\tmetadata\r\n\t\tlLines\r\n\t\t}\r\n\tdbgReturn 'getTextFileContents', hResult\r\n\treturn hResult\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport allFilesIn = (dir, hOptions={}) ->\r\n\t# --- yields hFileInfo with keys:\r\n\t#        filepath, filename, stub, ext, metadata, contents\r\n\t# --- dir must be a directory\r\n\t# --- Valid options:\r\n\t#        recursive - descend into subdirectories\r\n\t#        eager - read the file and add keys metadata, contents\r\n\r\n\tdbgEnter 'allFilesIn', dir, hOptions\r\n\t{recursive, eager} = getOptions(hOptions, {\r\n\t\trecursive: true\r\n\t\teager: false\r\n\t\t})\r\n\tassert isDir(dir), \"Not a directory: #{dir}\"\r\n\thOptions = {withFileTypes: true, recursive}\r\n\tfor ent in fs.readdirSync(dir, hOptions)\r\n\t\tdbg \"ENT:\", ent\r\n\t\tif ent.isFile()\r\n\t\t\tpath = mkpath(ent.path, ent.name)\r\n\t\t\tdbg \"PATH = #{path}\"\r\n\t\t\thFileInfo = parseSource(path)\r\n\t\t\tassert defined(hFileInfo), \"allFilesIn(): hFileInfo = undef\"\r\n\t\t\tif eager\r\n\t\t\t\thContents = getTextFileContents(hFileInfo.filePath)\r\n\t\t\t\tObject.assign hFileInfo, hContents\r\n\t\t\tdbg 'hFileInfo', hFileInfo\r\n\t\t\tyield hFileInfo\r\n\tdbgReturn 'allFilesIn'\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class FileProcessor\r\n\r\n\tconstructor: (@dir, hOptions={}) ->\r\n\t\t# --- Valid options:\r\n\t\t#        debug\r\n\t\t#        recursive\r\n\r\n\t\t# --- convert dir to a full path\r\n\t\tassert isString(@dir), \"Source not a string\"\r\n\t\t@dir = pathLib.resolve(@dir)\r\n\t\tassert isDir(@dir), \"Not a directory: #{@dir}\"\r\n\r\n\t\t@hOptions = getOptions(hOptions)\r\n\t\t@debug = !! @hOptions.debug\r\n\t\t@recursive = !!@hOptions.recursive\r\n\t\t@log \"constructed\"\r\n\r\n\t# ..........................................................\r\n\r\n\tlog: (obj) ->\r\n\r\n\t\tif @debug\r\n\t\t\tif isString(obj)\r\n\t\t\t\tconsole.log \"DEBUG: #{obj}\"\r\n\t\t\telse\r\n\t\t\t\tconsole.log obj\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- called at beginning of @procAll()\r\n\r\n\tbegin: () ->\r\n\r\n\t\t@log \"begin() called\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- called at end of @procAll()\r\n\r\n\tend: () ->\r\n\r\n\t\t@log \"end() called\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tfilter: (hFileInfo) ->\r\n\r\n\t\treturn true    # by default, handle all files in dir\r\n\r\n\t# ..........................................................\r\n\r\n\tprocAll: () ->\r\n\r\n\t\t@begin()\r\n\r\n\t\t@log \"process all files in '#{@dir}'\"\r\n\t\tcount = 0\r\n\t\tfor hFileInfo from allFilesIn(@dir, {recursive: @recursive})\r\n\t\t\tname = hFileInfo.fileName\r\n\t\t\tcount += 1\r\n\t\t\tif @filter(hFileInfo)\r\n\t\t\t\t@log \"[#{count}] #{name} - Handle\"\r\n\t\t\t\t@handleFile hFileInfo\r\n\t\t\telse\r\n\t\t\t\t@log \"[#{count}] #{name} - Skip\"\r\n\t\t@log \"#{count} files processed\"\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tbeginFile: (hFileInfo) ->\r\n\r\n\t\treturn    # by default, does nothing\r\n\r\n\t# ..........................................................\r\n\r\n\tprocFile: (hFileInfo) ->\r\n\r\n\t\tassert defined(hFileInfo), \"procFile(): hFileInfo = undef\"\r\n\t\tlineNum = 1\r\n\t\tfor line from allLinesIn(hFileInfo.filePath)\r\n\t\t\tresult = @handleLine(line, lineNum, hFileInfo)\r\n\t\t\tswitch result\r\n\t\t\t\twhen 'abort'\r\n\t\t\t\t\treturn\r\n\t\t\tlineNum += 1\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tendFile: (hFileInfo) ->\r\n\r\n\t\treturn   # by default, does nothing\r\n\r\n\t# ..........................................................\r\n\t# --- default handleFile() calls handleLine() for each line\r\n\r\n\thandleFile: (hFileInfo) ->\r\n\r\n\t\t@beginFile hFileInfo\r\n\t\t@procFile hFileInfo\r\n\t\t@endFile hFileInfo\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\thandleLine: (line, lineNum, hFileInfo) ->\r\n\r\n\t\treturn\r\n"
  ]
}