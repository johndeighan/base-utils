{
  "version": 3,
  "file": "metadata.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\metadata.coffee"
  ],
  "names": [],
  "mappings": "AAAiB;AAAA,IAAA;;AAEjB,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,GAD7B;EACkC,EADlC;EAEC,MAFD;EAES,QAFT;EAEmB,gBAFnB;EAEqC,UAFrC;EAGC,OAHD;EAGU,OAHV;CAAA,MAAA;;AAKA,OAAA;EAAQ,MAAR;EAAgB,KAAhB;CAAA,MAAA;;AACA,OAAA;EAAQ,QAAR;CAAA,MAAA,4BARiB;;;AAUjB,cAAA,GAAiB;EAChB,KAAA,EAAO,CAAC,KAAD,CAAA,GAAA;WAAW,QAAA,CAAS,KAAT;EAAX;AADS,EAVA;;;AAgBjB,OAAA,IAAO,eAAA,GAAkB,CAAC,KAAD,EAAQ,SAAR,CAAA,GAAA;EAExB,MAAA,CAAO,QAAA,CAAS,KAAT,CAAP,EAAwB,eAAxB;EACA,MAAA,CAAQ,KAAK,CAAC,MAAN,KAAgB,CAAxB,EAA4B,CAAA,iBAAA,CAAA,CAAoB,EAAA,CAAG,KAAH,CAApB,CAAA,CAA5B;EACA,MAAA,CAAO,CAAC,KAAK,CAAC,CAAD,CAAL,KAAY,KAAK,CAAC,CAAD,CAAlB,CAAA,IAA0B,CAAC,KAAK,CAAC,CAAD,CAAL,KAAY,KAAK,CAAC,CAAD,CAAlB,CAAjC,EACC,CAAA,iBAAA,CAAA,CAAoB,EAAA,CAAG,KAAH,CAApB,CAAA,CADD;EAGA,MAAA,CAAO,UAAA,CAAW,SAAX,CAAP,EAA8B,wBAA9B;EACA,cAAc,CAAC,KAAD,CAAd,GAAwB;AARA,EAhBR;;;AA6BjB,OAAA,IAAO,eAAA,GAAkB,CAAC,GAAD,CAAA,GAAA;AAExB,SAAO,OAAA,CAAQ,cAAc,CAAC,GAAD,CAAtB;AAFiB,EA7BR;;;;;AAqCjB,OAAA,IAAO,eAAA,GAAkB,CAAC,YAAD,EAAe,KAAf,CAAA,GAAA;AAEzB,MAAA;EAAC,MAAA,CAAO,OAAA,CAAQ,cAAc,CAAC,KAAD,CAAtB,CAAP,EACC,CAAA,oBAAA,CAAA,CAAuB,EAAA,CAAG,KAAH,CAAvB,CAAA,CADD;EAEA,KAAA,GAAQ,OAAA,CAAQ,YAAR;AACR,SAAO,cAAc,CAAC,KAAD,CAAd,CAAsB,KAAtB;AALiB",
  "sourcesContent": [
    "# metadata.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, LOG, OL,\r\n\tisHash, isString, isNonEmptyString, isFunction,\r\n\ttoArray, toBlock,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {fromTAML} from '@jdeighan/base-utils/taml'\r\n# --- { <start>: <converter>, ... }\r\nhMetaDataTypes = {\r\n\t'---': (block) => fromTAML(block)\r\n\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport addMetaDataType = (start, converter) =>\r\n\r\n\tassert isString(start), \"Missing start\"\r\n\tassert (start.length == 3), \"Bad 'start' key: #{OL(start)}\"\r\n\tassert (start[1] == start[0]) && (start[2] == start[0]),\r\n\t\t\"Bad 'start' key: #{OL(start)}\"\r\n\r\n\tassert isFunction(converter), \"Non-function converter\"\r\n\thMetaDataTypes[start] = converter\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isMetaDataStart = (str) =>\r\n\r\n\treturn defined(hMetaDataTypes[str])\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- blockOrArray will include start line,\r\n#     but not end line\r\n\r\nexport convertMetaData = (blockOrArray, start) =>\r\n\r\n\tassert defined(hMetaDataTypes[start]),\r\n\t\t\"Bad metadata start: #{OL(start)}\"\r\n\tblock = toBlock(blockOrArray)\r\n\treturn hMetaDataTypes[start](block)\r\n"
  ]
}