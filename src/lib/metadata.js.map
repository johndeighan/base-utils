{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\metadata.coffee"
  ],
  "names": [],
  "mappings": "AAAiB;AAAA,IAAA;;AAEjB,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,EAD7B;EAEC,MAFD;EAES,QAFT;EAEmB,OAFnB;EAE4B,gBAF5B;EAE8C,UAF9C;EAGC,OAHD;EAGU,OAHV;CAAA,MAAA;;AAKA,OAAA;EAAQ,MAAR;EAAgB,KAAhB;CAAA,MAAA;;AACA,OAAA;EAAQ,GAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,QAAR;EAAkB,SAAlB;EAA6B,GAA7B;CAAA,MAAA;;AACA,OAAA;EAAQ,QAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,QAAR;CAAA,MAAA,iCAXiB;;;AAcjB,cAAA,GAAiB;EAChB,KAAA,EAAO,CAAC,KAAD,CAAA,GAAA;AAAW,WAAO,QAAA,CAAS,CAAA,KAAA,CAAA,CAAQ,KAAR,CAAA,CAAT;EAAlB,CADS;EAEhB,KAAA,EAAO,CAAC,KAAD,CAAA,GAAA;WAAW,QAAA,CAAS,KAAT;EAAX;AAFS,EAdA;;;AAqBjB,OAAA,IAAO,eAAA,GAAkB,CAAC,KAAD,EAAQ,SAAR,CAAA,GAAA;EAExB,MAAA,CAAO,QAAA,CAAS,KAAT,CAAP,EAAwB,eAAxB;EACA,MAAA,CAAQ,KAAK,CAAC,MAAN,KAAgB,CAAxB,EAA4B,CAAA,iBAAA,CAAA,CAAoB,EAAA,CAAG,KAAH,CAApB,CAAA,CAA5B;EACA,MAAA,CAAO,CAAC,KAAK,CAAC,CAAD,CAAL,KAAY,KAAK,CAAC,CAAD,CAAlB,CAAA,IAA0B,CAAC,KAAK,CAAC,CAAD,CAAL,KAAY,KAAK,CAAC,CAAD,CAAlB,CAAjC,EACC,CAAA,iBAAA,CAAA,CAAoB,EAAA,CAAG,KAAH,CAApB,CAAA,CADD;EAGA,MAAA,CAAO,UAAA,CAAW,SAAX,CAAP,EAA8B,wBAA9B;EACA,cAAc,CAAC,KAAD,CAAd,GAAwB;AARA,EArBR;;;AAkCjB,OAAA,IAAO,eAAA,GAAkB,CAAC,GAAD,CAAA,GAAA;AAExB,SAAO,OAAA,CAAQ,GAAR,CAAA,IAAgB,OAAA,CAAQ,cAAc,CAAC,GAAD,CAAtB;AAFC,EAlCR;;;;;AA0CjB,OAAA,IAAO,eAAA,GAAkB,CAAC,KAAD,CAAA,GAAA;AAEzB,MAAA,KAAA,EAAA,MAAA,EAAA;EAAC,QAAA,CAAS,iBAAT,EAA4B,KAA5B,EAAD;;EAGC,KAAA,GAAQ,OAAA,CAAQ,KAAR,EAHT;;EAMC,MAAA,CAAQ,KAAK,CAAC,MAAN,GAAe,CAAvB,EAA2B,aAA3B;EACA,KAAA,GAAQ,KAAK,CAAC,CAAD;EACb,KAAA,GAAQ,OAAA,CAAQ,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAR;EAER,GAAA,CAAI,OAAJ,EAAa,KAAb;EACA,GAAA,CAAI,OAAJ,EAAa,KAAb;EAEA,MAAA,CAAO,OAAA,CAAQ,cAAc,CAAC,KAAD,CAAtB,CAAP,EACC,CAAA,oBAAA,CAAA,CAAuB,EAAA,CAAG,KAAH,CAAvB,CAAA,CADD,EAbD;;EAiBC,MAAA,GAAS,cAAc,CAAC,KAAD,CAAd,CAAsB,KAAtB;EACT,SAAA,CAAU,iBAAV,EAA6B,MAA7B;AACA,SAAO;AArBiB",
  "sourcesContent": [
    "# metadata.coffee\n\nimport {\n\tundef, defined, notdefined, OL,\n\tisHash, isString, isArray, isNonEmptyString, isFunction,\n\ttoArray, toBlock,\n\t} from '@jdeighan/base-utils'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {LOG} from '@jdeighan/base-utils/log'\nimport {dbgEnter, dbgReturn, dbg} from '@jdeighan/base-utils/debug'\nimport {fromTAML} from '@jdeighan/base-utils/taml'\nimport {fromNICE} from '@jdeighan/base-utils/from-nice'\n\n# --- { <start>: <converter>, ... }\nhMetaDataTypes = {\n\t'---': (block) => return fromTAML(\"---\\n#{block}\")\n\t'!!!': (block) => fromNICE(block)\n\t}\n\n# ---------------------------------------------------------------------------\n\nexport addMetaDataType = (start, converter) =>\n\n\tassert isString(start), \"Missing start\"\n\tassert (start.length == 3), \"Bad 'start' key: #{OL(start)}\"\n\tassert (start[1] == start[0]) && (start[2] == start[0]),\n\t\t\"Bad 'start' key: #{OL(start)}\"\n\n\tassert isFunction(converter), \"Non-function converter\"\n\thMetaDataTypes[start] = converter\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport isMetaDataStart = (str) =>\n\n\treturn defined(str) && defined(hMetaDataTypes[str])\n\n# ---------------------------------------------------------------------------\n# --- input can be a string or array of strings\n# --- input will include start line, but not end line\n\nexport convertMetaData = (input) =>\n\n\tdbgEnter 'convertMetaData', input\n\n\t# --- convert input to an array\n\tinput = toArray(input)\n\n\t# --- set vars start and block\n\tassert (input.length > 0), \"Empty array\"\n\tstart = input[0]\n\tblock = toBlock input.slice(1)\n\n\tdbg 'start', start\n\tdbg 'block', block\n\n\tassert defined(hMetaDataTypes[start]),\n\t\t\"Bad metadata start: #{OL(start)}\"\n\n\t# --- NOTE: block should not include the start line\n\tresult = hMetaDataTypes[start](block)\n\tdbgReturn 'convertMetaData', result\n\treturn result"
  ]
}