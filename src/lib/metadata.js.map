{
  "version": 3,
  "file": "metadata.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\metadata.coffee"
  ],
  "names": [],
  "mappings": "AAAiB;AAAA,IAAA;;AAEjB,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,EAD7B;EAEC,MAFD;EAES,QAFT;EAEmB,OAFnB;EAE4B,gBAF5B;EAE8C,UAF9C;EAGC,OAHD;EAGU,OAHV;CAAA,MAAA;;AAKA,OAAA;EAAQ,MAAR;EAAgB,KAAhB;CAAA,MAAA;;AACA,OAAA;EAAQ,GAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,QAAR;EAAkB,SAAlB;EAA6B,GAA7B;CAAA,MAAA;;AACA,OAAA;EAAQ,QAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,QAAR;CAAA,MAAA,4BAXiB;;;AAcjB,cAAA,GAAiB;EAChB,KAAA,EAAO,CAAC,KAAD,CAAA,GAAA;AAAW,WAAO,QAAA,CAAS,CAAA,KAAA,CAAA,CAAQ,KAAR,CAAA,CAAT;EAAlB,CADS;EAEhB,KAAA,EAAO,CAAC,KAAD,CAAA,GAAA;WAAW,QAAA,CAAS,KAAT;EAAX;AAFS,EAdA;;;AAqBjB,OAAA,IAAO,eAAA,GAAkB,CAAC,KAAD,EAAQ,SAAR,CAAA,GAAA;EAExB,MAAA,CAAO,QAAA,CAAS,KAAT,CAAP,EAAwB,eAAxB;EACA,MAAA,CAAQ,KAAK,CAAC,MAAN,KAAgB,CAAxB,EAA4B,CAAA,iBAAA,CAAA,CAAoB,EAAA,CAAG,KAAH,CAApB,CAAA,CAA5B;EACA,MAAA,CAAO,CAAC,KAAK,CAAC,CAAD,CAAL,KAAY,KAAK,CAAC,CAAD,CAAlB,CAAA,IAA0B,CAAC,KAAK,CAAC,CAAD,CAAL,KAAY,KAAK,CAAC,CAAD,CAAlB,CAAjC,EACC,CAAA,iBAAA,CAAA,CAAoB,EAAA,CAAG,KAAH,CAApB,CAAA,CADD;EAGA,MAAA,CAAO,UAAA,CAAW,SAAX,CAAP,EAA8B,wBAA9B;EACA,cAAc,CAAC,KAAD,CAAd,GAAwB;AARA,EArBR;;;AAkCjB,OAAA,IAAO,eAAA,GAAkB,CAAC,GAAD,CAAA,GAAA;AAExB,SAAO,OAAA,CAAQ,cAAc,CAAC,GAAD,CAAtB;AAFiB,EAlCR;;;;;AA0CjB,OAAA,IAAO,eAAA,GAAkB,CAAC,KAAD,CAAA,GAAA;AAEzB,MAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA;EAAC,QAAA,CAAS,iBAAT,EAA4B,KAA5B,EAAD;;EAGC,IAAG,OAAA,CAAQ,KAAR,CAAH;IACC,MAAA,CAAQ,KAAK,CAAC,MAAN,GAAe,CAAvB,EAA2B,aAA3B;IACA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAA;IACR,KAAA,GAAQ,OAAA,CAAQ,KAAR,EAHT;GAAA,MAIK,IAAG,QAAA,CAAS,KAAT,CAAH;IACJ,GAAA,GAAM,OAAA,CAAQ,KAAR;IACN,MAAA,CAAQ,GAAG,CAAC,MAAJ,GAAa,CAArB,EAAyB,aAAzB;IACA,KAAA,GAAQ,GAAG,CAAC,KAAJ,CAAA;IACR,KAAA,GAAQ,OAAA,CAAQ,GAAR,EAJJ;GAAA,MAAA;IAMJ,KAAA,CAAM,oCAAN,EANI;;EAQL,GAAA,CAAI,OAAJ,EAAa,KAAb;EAEA,MAAA,CAAO,OAAA,CAAQ,cAAc,CAAC,KAAD,CAAtB,CAAP,EACC,CAAA,oBAAA,CAAA,CAAuB,EAAA,CAAG,KAAH,CAAvB,CAAA,CADD,EAjBD;;EAqBC,MAAA,GAAS,cAAc,CAAC,KAAD,CAAd,CAAsB,KAAtB;EACT,SAAA,CAAU,iBAAV,EAA6B,MAA7B;AACA,SAAO;AAzBiB",
  "sourcesContent": [
    "# metadata.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, OL,\r\n\tisHash, isString, isArray, isNonEmptyString, isFunction,\r\n\ttoArray, toBlock,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {LOG} from '@jdeighan/base-utils/log'\r\nimport {dbgEnter, dbgReturn, dbg} from '@jdeighan/base-utils/debug'\r\nimport {fromTAML} from '@jdeighan/base-utils/taml'\r\nimport {fromNICE} from '@jdeighan/base-utils/nice'\r\n\r\n# --- { <start>: <converter>, ... }\r\nhMetaDataTypes = {\r\n\t'---': (block) => return fromTAML(\"---\\n#{block}\")\r\n\t'!!!': (block) => fromNICE(block)\r\n\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport addMetaDataType = (start, converter) =>\r\n\r\n\tassert isString(start), \"Missing start\"\r\n\tassert (start.length == 3), \"Bad 'start' key: #{OL(start)}\"\r\n\tassert (start[1] == start[0]) && (start[2] == start[0]),\r\n\t\t\"Bad 'start' key: #{OL(start)}\"\r\n\r\n\tassert isFunction(converter), \"Non-function converter\"\r\n\thMetaDataTypes[start] = converter\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isMetaDataStart = (str) =>\r\n\r\n\treturn defined(hMetaDataTypes[str])\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- input can be a string or array of strings\r\n# --- input will include start line, but not end line\r\n\r\nexport convertMetaData = (input) =>\r\n\r\n\tdbgEnter 'convertMetaData', input\r\n\r\n\t# --- convert input to a block, set var start\r\n\tif isArray(input)\r\n\t\tassert (input.length > 0), \"Empty array\"\r\n\t\tstart = input.shift()\r\n\t\tblock = toBlock(input)\r\n\telse if isString(input)\r\n\t\tarr = toArray(input)\r\n\t\tassert (arr.length > 0), \"Empty block\"\r\n\t\tstart = arr.shift()\r\n\t\tblock = toBlock(arr)\r\n\telse\r\n\t\tcroak \"Bad parameter to convertMetaData()\"\r\n\r\n\tdbg 'block', block\r\n\r\n\tassert defined(hMetaDataTypes[start]),\r\n\t\t\"Bad metadata start: #{OL(start)}\"\r\n\r\n\t# --- NOTE: block should not include the start line\r\n\tresult = hMetaDataTypes[start](block)\r\n\tdbgReturn 'convertMetaData', result\r\n\treturn result\r\n"
  ]
}