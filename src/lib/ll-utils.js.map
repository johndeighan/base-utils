{
  "version": 3,
  "file": "ll-utils.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\ll-utils.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# ll-utils.coffee\r\n\r\nimport urlLib from 'url'\r\nimport pathLib from 'node:path'\r\n\r\n###*\r\n# undef is a synonym for undefined\r\n###\r\n\r\n`export const undef = void 0`\r\n\r\n# ---------------------------------------------------------------------------\r\n###*\r\n# Should be called like: mydir(import.meta.url)\r\n# @returns {string} the directory that the current file is in\r\n###\r\n\r\nexport mydir = (url) =>\r\n\r\n\tpath = urlLib.fileURLToPath(url)\r\n\tdir = pathLib.dirname(path)\r\n\treturn dir.replaceAll('\\\\', '/')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getFullPath = (lPaths...) =>\r\n\r\n\treturn pathLib.resolve(lPaths...).replaceAll(\"\\\\\", \"/\")\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Returned object has keys: dir, fileName, stub, ext\r\n\r\nexport parsePath = (lPaths...) =>\r\n\r\n\tfullPath = getFullPath(lPaths...)\r\n\th = pathLib.parse(fullPath)\r\n\treturn {\r\n\t\tdir: h.dir\r\n\t\tfileName: h.base\r\n\t\tstub: h.name\r\n\t\text: h.ext\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n#   pass - do nothing\r\n\r\nexport pass = () =>\r\n\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n# low-level version of assert()\r\n\r\nexport assert = (cond, msg) =>\r\n\r\n\tif !cond\r\n\t\tthrow new Error(msg)\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport defined = (obj) =>\r\n\r\n\treturn (obj != undef) && (obj != null)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport notdefined = (obj) =>\r\n\r\n\treturn (obj == undef) || (obj == null)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport alldefined = (lObj...) =>\r\n\r\n\tfor obj in lObj\r\n\t\tif (obj == undef) || (obj == null)\r\n\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n#   isEmpty\r\n#      - string is whitespace, array has no elements, hash has no keys\r\n\r\nexport isEmpty = (x) =>\r\n\r\n\tif (x == undef) || (x == null)\r\n\t\treturn true\r\n\tif (typeof x == 'string')\r\n\t\treturn x.match(/^\\s*$/)\r\n\tif Array.isArray(x)\r\n\t\treturn (x.length == 0)\r\n\tif (typeof x == 'object')\r\n\t\treturn Object.keys(x).length == 0\r\n\telse\r\n\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n#   nonEmpty\r\n#      - string has non-whitespace, array has elements, hash has keys\r\n\r\nexport nonEmpty = (x) =>\r\n\r\n\treturn ! isEmpty(x)\r\n\r\n# ---------------------------------------------------------------------------\r\n#   deepCopy - deep copy an array or object\r\n\r\nexport deepCopy = (obj) =>\r\n\r\n\tif (obj == undef)\r\n\t\treturn undef\r\n\tobjStr = JSON.stringify(obj)\r\n\ttry\r\n\t\tnewObj = JSON.parse(objStr)\r\n\tcatch err\r\n\t\tthrow new Error(\"ERROR: err.message\")\r\n\r\n\treturn newObj\r\n\r\n"
  ]
}