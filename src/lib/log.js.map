{
  "version": 3,
  "file": "log.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\log.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# log.coffee\r\n\r\nimport {\r\n\tpass, undef, defined, notdefined, deepCopy, getOptions,\r\n\thEsc, escapeStr, OL, untabify, isObject, rtrim, DUMP,\r\n\tblockToArray, arrayToBlock, prefixBlock, centeredText,\r\n\tisNumber, isInteger, isString, isHash, isFunction, isBoolean,\r\n\tisEmpty, nonEmpty, hEscNoNL, jsType, hasChar, quoted,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {parsePath} from '@jdeighan/base-utils/ll-fs'\r\nimport {toTAML} from '@jdeighan/base-utils/taml'\r\nimport {getPrefix} from '@jdeighan/base-utils/prefix'\r\nimport {getMyOutsideCaller} from '@jdeighan/base-utils/v8-stack'\r\nimport {NamedLogs} from '@jdeighan/base-utils/named-logs'\r\n\r\nexport logWidth = 42\r\nexport sep_dash = '-'.repeat(logWidth)\r\nexport sep_eq = '='.repeat(logWidth)\r\n\r\nexport stringify = undef\r\ninternalDebugging = false\r\nthreeSpaces  = '   '\r\n\r\n# --- This logger only ever gets passed a single string argument\r\n#     ONLY called directly in PUTSTR, set in setLogger()\r\nputstr = undef\r\n\r\nlogs = new NamedLogs()\r\ndoEcho = true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport echoLogs = (flag=true) =>\r\n\r\n\tdoEcho = flag\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport debugLogging = (flag=true) =>\r\n\r\n\tinternalDebugging = flag\r\n\tif internalDebugging\r\n\t\tconsole.log \"internalDebugging = #{flag}\"\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport clearMyLogs = () =>\r\n\r\n\tfilePath = getMyOutsideCaller()?.filePath\r\n\tif defined(filePath)\r\n\t\tlogs.clear filePath\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport clearAllLogs = () =>\r\n\r\n\tlogs.clearAllLogs()\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getMyLogs = () =>\r\n\r\n\tfilePath = getMyOutsideCaller()?.filePath\r\n\tif defined(filePath)\r\n\t\treturn logs.getLogs(filePath)\r\n\telse\r\n\t\treturn undef\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getAllLogs = () =>\r\n\r\n\treturn logs.getAllLogs()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport LOG = (str=\"\", prefix=\"\") =>\r\n\r\n\tif internalDebugging\r\n\t\tif isEmpty(prefix)\r\n\t\t\tconsole.log \"IN LOG(#{OL(str)})\"\r\n\t\telse\r\n\t\t\tconsole.log \"IN LOG(#{OL(str)}), prefix=#{OL(prefix)}\"\r\n\r\n\tPUTSTR \"#{prefix}#{str}\"\r\n\treturn true   # to allow use in boolean expressions\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport PUTSTR = (str) =>\r\n\r\n\tif internalDebugging\r\n\t\tconsole.log \"IN PUTSTR(#{OL(str)})\"\r\n\t\tif defined(putstr)\r\n\t\t\tif (putstr == console.log)\r\n\t\t\t\tconsole.log \"   - putstr is console.log\"\r\n\t\t\telse\r\n\t\t\t\tconsole.log \"   - putstr is custom logger\"\r\n\t\telse\r\n\t\t\tconsole.log \"   - putstr not defined\"\r\n\tstr = rtrim(str)\r\n\r\n\t# --- logs are maintained for each possible file\r\n\tcaller = getMyOutsideCaller()\r\n\tif defined(caller)\r\n\t\tfilePath = caller.filePath\r\n\t\tfileName = parsePath(filePath).fileName\r\n\t\tif internalDebugging\r\n\t\t\tconsole.log \"   - filePath = #{OL(filePath)}, doEcho = #{OL(doEcho)}\"\r\n\t\t\tconsole.log \"   - from #{fileName}\"\r\n\telse\r\n\t\tif internalDebugging\r\n\t\t\tconsole.log \"   - getMyOutsideCaller() failed, writing '#{str}'\"\r\n\t\tconsole.log str\r\n\r\n\tlogs.log filePath, str\r\n\tif doEcho\r\n\t\tif defined(putstr) && (putstr != console.log)\r\n\t\t\tputstr str\r\n\t\telse\r\n\t\t\t# --- console doesn't handle TABs correctly, so...\r\n\t\t\tconsole.log untabify(str)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport setLogWidth = (w) =>\r\n\r\n\tlogWidth = w\r\n\tsep_dash = '-'.repeat(logWidth)\r\n\tsep_eq = '='.repeat(logWidth)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport resetLogWidth = () =>\r\n\r\n\tsetLogWidth(42)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport setStringifier = (func) =>\r\n\r\n\torgStringifier = stringify\r\n\tassert isFunction(func), \"setStringifier() arg is not a function\"\r\n\tstringify = func\r\n\treturn orgStringifier\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport resetStringifier = () =>\r\n\r\n\tsetStringifier orderedStringify\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport setLogger = (func) =>\r\n\r\n\tassert isFunction(func), \"setLogger() arg is not a function\"\r\n\torgLogger = putstr\r\n\tputstr = func\r\n\treturn orgLogger\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport resetLogger = () =>\r\n\r\n\tsetLogger console.log\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport tamlStringify = (obj, escape=false) =>\r\n\r\n\treturn toTAML(obj, {\r\n\t\tuseTabs: false\r\n\t\tsortKeys: false\r\n\t\tescape\r\n\t\t})\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport orderedStringify = (obj, escape=false) =>\r\n\r\n\treturn toTAML(obj, {\r\n\t\tuseTabs: false\r\n\t\tsortKeys: true\r\n\t\tescape\r\n\t\t})\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport prefixed = (prefix, lStrings...) =>\r\n\r\n\tlLines = []\r\n\tfor str in lStrings\r\n\t\tlLines = lLines.concat(blockToArray(str))\r\n\tresult = arrayToBlock(lLines.map((x) => \"#{prefix}#{x}\"))\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport LOGTAML = (label, value, prefix=\"\", itemPrefix=undef) =>\r\n\r\n\tif internalDebugging\r\n\t\tstr1 = OL(label)\r\n\t\tstr2 = OL(value)\r\n\t\tstr3 = OL(prefix)\r\n\t\tconsole.log \"CALL LOGTAML(#{str1}, #{str2}), prefix=#{str3}\"\r\n\tassert nonEmpty(label), \"label is empty\"\r\n\r\n\tif notdefined(itemPrefix)\r\n\t\titemPrefix = prefix + \"\\t\"\r\n\r\n\tif handleSimpleCase(label, value, prefix)\r\n\t\treturn true\r\n\r\n\tdesc = toTAML(value, {sortKeys: true})\r\n\tPUTSTR prefixed(prefix, \"#{prefix}#{label} = <<<\", prefixed('   ', desc))\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport LOGJSON = (label, value, prefix=\"\") =>\r\n\r\n\tif internalDebugging\r\n\t\tstr1 = OL(label)\r\n\t\tstr2 = OL(value)\r\n\t\tstr3 = OL(prefix)\r\n\t\tconsole.log \"CALL LOGJSON(#{str1}, #{str2}), prefix=#{str3}\"\r\n\tassert nonEmpty(label), \"label is empty\"\r\n\r\n\tdesc = JSON.stringify(value, null, 3)\r\n\tPUTSTR prefixed(prefix, \"#{prefix}#{label} =\", desc)\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport stringFits = (str) =>\r\n\r\n\treturn (str.length <= logWidth)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport LOGVALUE = (label, value, hOptions={}) =>\r\n\t# --- Allow label to be empty, i.e. undef\r\n\r\n\t{prefix, itemPrefix} = getOptions hOptions, {\r\n\t\tprefix: ''\r\n\t\titemPrefix: undef\r\n\t\t}\r\n\tif internalDebugging\r\n\t\tstr1 = OL(label)\r\n\t\tstr2 = OL(value)\r\n\t\tstr3 = OL(prefix)\r\n\t\tconsole.log \"CALL LOGVALUE(#{str1}, #{str2}), prefix=#{str3}\"\r\n\r\n\t# --- Handles undef, null, boolean, number\r\n\tif handleSimpleCase(label, value, prefix)\r\n\t\treturn true\r\n\r\n\tif defined(label)\r\n\t\tlabelStr = \"#{label} = \"\r\n\telse\r\n\t\tlabelStr = \"\"\r\n\r\n\t# --- Try OL() - if it's short enough, use that\r\n\tstr = \"#{prefix}#{labelStr}#{OL(value)}\"\r\n\r\n\tif stringFits(str)\r\n\t\tif internalDebugging\r\n\t\t\tconsole.log \"Using OL(), #{str.length} <= #{logWidth}\"\r\n\t\tPUTSTR str\r\n\t\treturn true\r\n\r\n\tif notdefined(itemPrefix)\r\n\t\titemPrefix = prefix + \"\\t\"\r\n\r\n\t[type, subtype] = jsType(value)\r\n\tswitch type\r\n\t\twhen 'string'\r\n\t\t\tif (subtype == 'empty')\r\n\t\t\t\t# --- empty string\r\n\t\t\t\tPUTSTR \"#{prefix}#{labelStr}''\"\r\n\t\t\telse\r\n\t\t\t\t# --- non empty string\r\n\t\t\t\tstr = \"#{prefix}#{labelStr}#{quoted(value, 'escape')}\"\r\n\t\t\t\tif stringFits(str)\r\n\t\t\t\t\tPUTSTR str\r\n\t\t\t\telse\r\n\t\t\t\t\t# --- escape, but not newlines\r\n\t\t\t\t\tescaped = escapeStr(value, hEscNoNL)\r\n\t\t\t\t\tPUTSTR \"\"\"\r\n\t\t\t\t\t\t#{prefix}#{labelStr}\\\"\\\"\\\"\r\n\t\t\t\t\t\t#{prefixBlock(escaped, itemPrefix)}\r\n\t\t\t\t\t\t#{prefixBlock('\"\"\"', itemPrefix)}\r\n\t\t\t\t\t\t\"\"\"\r\n\r\n\t\twhen 'hash', 'array'\r\n\t\t\tstr = toTAML(value, {sortKeys: true})\r\n\t\t\tif labelStr\r\n\t\t\t\tPUTSTR \"#{prefix}#{labelStr}\"\r\n\t\t\tfor str in blockToArray(str)\r\n\t\t\t\tPUTSTR \"#{itemPrefix}#{str}\"\r\n\r\n\t\twhen 'regexp'\r\n\t\t\tPUTSTR \"#{prefix}#{labelStr}<regexp>\"\r\n\r\n\t\twhen 'function'\r\n\t\t\tPUTSTR \"#{prefix}#{labelStr}<function>\"\r\n\r\n\t\twhen 'object'\r\n\t\t\tif isObject(value, '&toLogString')\r\n\t\t\t\tstr = value.toLogString()\r\n\t\t\telse\r\n\t\t\t\tstr = toTAML(value)\r\n\r\n\t\t\tif hasChar(str, \"\\n\")\r\n\t\t\t\tif labelStr\r\n\t\t\t\t\tPUTSTR \"#{prefix}#{labelStr}\"\r\n\t\t\t\tif notdefined(itemPrefix)\r\n\t\t\t\t\titemPrefix = prefix\r\n\t\t\t\tfor line in blockToArray(str)\r\n\t\t\t\t\tPUTSTR \"#{itemPrefix}#{line}\"\r\n\t\t\telse\r\n\t\t\t\tPUTSTR \"#{prefix}#{labelStr}#{str}\"\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport LOGSTRING = (label, value, prefix=\"\") =>\r\n\r\n\tif internalDebugging\r\n\t\tstr1 = OL(label)\r\n\t\tstr2 = OL(value)\r\n\t\tstr3 = OL(prefix)\r\n\t\tconsole.log \"CALL LOGSTRING(#{str1}, #{str2}), prefix=#{str3}\"\r\n\tassert nonEmpty(label), \"label is empty\"\r\n\tassert isString(value), \"value not a string\"\r\n\r\n\t# --- if it's short enough, put on one line\r\n\tstr = \"#{prefix}#{label} = #{quoted(value)}\"\r\n\tif stringFits(str)\r\n\t\tif internalDebugging\r\n\t\t\tconsole.log \"Put on one line, #{str.length} <= #{logWidth}\"\r\n\t\tPUTSTR str\r\n\t\treturn true\r\n\r\n\titemPrefix = prefix + \"\\t\"\r\n\r\n\tstr = \"#{prefix}#{label} = #{quoted(value, 'escape')}\"\r\n\tif stringFits(str)\r\n\t\tPUTSTR str\r\n\telse\r\n\t\t# --- escape, but not newlines\r\n\t\tPUTSTR \"\"\"\r\n\t\t\t#{prefix}#{label} = \\\"\\\"\\\"\r\n\t\t\t#{prefixBlock(value, itemPrefix)}\r\n\t\t\t#{prefixBlock('\"\"\"', itemPrefix)}\r\n\t\t\t\"\"\"\r\n\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nhandleSimpleCase = (label, value, prefix) =>\r\n\t# --- Returns true if handled, else false\r\n\r\n\tif defined(label)\r\n\t\tlabelStr = \"#{label} = \"\r\n\telse\r\n\t\tlabelStr = \"\"\r\n\r\n\t# --- Handle some simple cases\r\n\tif (value == undef)\r\n\t\tPUTSTR \"#{prefix}#{labelStr}undef\"\r\n\t\treturn true\r\n\telse if (value == null)\r\n\t\tPUTSTR \"#{prefix}#{labelStr}null\"\r\n\t\treturn true\r\n\telse if isBoolean(value)\r\n\t\tif value\r\n\t\t\tPUTSTR \"#{prefix}#{labelStr}true\"\r\n\t\telse\r\n\t\t\tPUTSTR \"#{prefix}#{labelStr}false\"\r\n\t\treturn true\r\n\telse if isNumber(value)\r\n\t\tPUTSTR \"#{prefix}#{labelStr}#{value}\"\r\n\t\treturn true\r\n\telse\r\n\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nsetStringifier orderedStringify\r\nresetLogger()\r\n"
  ]
}