{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\log.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# log.coffee\n\nimport {\n\tpass, undef, defined, notdefined, deepCopy, getOptions,\n\thEsc, escapeStr, OL, untabify, isObject, rtrim, DUMP,\n\tblockToArray, arrayToBlock, prefixBlock, centeredText,\n\tisNumber, isInteger, isString, isHash, isFunction, isBoolean,\n\tisEmpty, nonEmpty, hEscNoNL, jsType, hasChar, quoted,\n\tspaces,\n\t} from '@jdeighan/base-utils'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {parsePath} from '@jdeighan/base-utils/ll-fs'\nimport {toNICE} from '@jdeighan/base-utils/to-nice'\nimport {getPrefix} from '@jdeighan/base-utils/prefix'\nimport {getMyOutsideCaller} from '@jdeighan/base-utils/v8-stack'\nimport {NamedLogs} from '@jdeighan/base-utils/named-logs'\n\nlogWidth = 42\nsep_dash = '-'.repeat(logWidth)\nsep_eq = '='.repeat(logWidth)\n\nexport stringify = undef\ninternalDebugging = false\nthreeSpaces  = '   '\n\n# --- This logger only ever gets passed a single string argument\n#     ONLY called directly in PUTSTR, set in setLogger()\nputstr = undef\n\nlogs = new NamedLogs()\ndoEcho = true\n\n# ---------------------------------------------------------------------------\n\nexport echoLogs = (flag=true) =>\n\n\tdoEcho = flag\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport debugLogging = (flag=true) =>\n\n\tinternalDebugging = flag\n\tif internalDebugging\n\t\tconsole.log \"internalDebugging = #{flag}\"\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport clearMyLogs = () =>\n\n\tfilePath = getMyOutsideCaller()?.filePath\n\tif defined(filePath)\n\t\tlogs.clear filePath\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport clearAllLogs = () =>\n\n\tlogs.clearAllLogs()\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport getMyLogs = () =>\n\n\tfilePath = getMyOutsideCaller()?.filePath\n\tif defined(filePath)\n\t\treturn logs.getLogs(filePath)\n\telse\n\t\treturn undef\n\n# ---------------------------------------------------------------------------\n\nexport getAllLogs = () =>\n\n\treturn logs.getAllLogs()\n\n# ---------------------------------------------------------------------------\n\nexport PUTSTR = (str) =>\n\n\tif internalDebugging\n\t\tconsole.log \"IN PUTSTR(#{OL(str)})\"\n\t\tif defined(putstr)\n\t\t\tif (putstr == console.log)\n\t\t\t\tconsole.log \"   - putstr is console.log\"\n\t\t\telse\n\t\t\t\tconsole.log \"   - putstr is custom logger\"\n\t\telse\n\t\t\tconsole.log \"   - putstr not defined\"\n\tstr = rtrim(str)\n\n\t# --- logs are maintained for each possible file\n\t#     caller not defined means we're in the main script\n\tcaller = getMyOutsideCaller()\n\tif defined(caller)\n\t\tfilePath = caller.filePath\n\t\t{fileName} = parsePath(filePath)\n\t\tif internalDebugging\n\t\t\tconsole.log \"   - filePath = #{OL(filePath)}, doEcho = #{OL(doEcho)}\"\n\t\t\tconsole.log \"   - from #{fileName}\"\n\telse\n\t\tif internalDebugging\n\t\t\tconsole.log \"   - filePath = 'main', doEcho = #{OL(doEcho)}\"\n\t\tfilePath = 'main'\n\n\tlogs.log filePath, str\n\tif doEcho\n\t\tif defined(putstr) && (putstr != console.log)\n\t\t\tputstr str\n\t\telse\n\t\t\t# --- console doesn't handle TABs correctly, so...\n\t\t\tconsole.log untabify(str)\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport setLogWidth = (w) =>\n\n\tlogWidth = w\n\tsep_dash = '-'.repeat(logWidth)\n\tsep_eq = '='.repeat(logWidth)\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport resetLogWidth = () =>\n\n\tsetLogWidth(42)\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexport setStringifier = (func) =>\n\n\torgStringifier = stringify\n\tassert isFunction(func), \"not a function: #{OL(func)}\"\n\tstringify = func\n\treturn orgStringifier\n\n# ---------------------------------------------------------------------------\n\nexport resetStringifier = () =>\n\n\tsetStringifier orderedStringify\n\n# ---------------------------------------------------------------------------\n\nexport setLogger = (func) =>\n\n\tassert isFunction(func), \"not a function: #{OL(func)}\"\n\torgLogger = putstr\n\tputstr = func\n\treturn orgLogger\n\n# ---------------------------------------------------------------------------\n\nexport resetLogger = () =>\n\n\tsetLogger console.log\n\n# ---------------------------------------------------------------------------\n\nexport orderedStringify = (obj, hOptiopns={}) =>\n\n\thOptions = getOptions hOptions, {\n\t\toneIndent: \"\\t\"\n\t\tsortKeys: true\n\t\t}\n\treturn toNICE(obj, hOptions)\n\n# ---------------------------------------------------------------------------\n\nexport prefixed = (prefix, lStrings...) =>\n\n\tlLines = []\n\tfor str in lStrings\n\t\tlLines = lLines.concat(blockToArray(str))\n\tresult = arrayToBlock(lLines.map((x) => \"#{prefix}#{x}\"))\n\treturn result\n\n# ---------------------------------------------------------------------------\n# --- Keep track of the number of times any of these were called:\n#        LOG LOGTAML LOGJSON LOGVALUE LOGSTRING\n\nnumLogCalls = 0\nmaxReached = (max) =>\n\tnumLogCalls += 1\n\treturn defined(max) && (numLogCalls > max)\n# ---------------------------------------------------------------------------\n\nexport LOG = (str=\"\", hOptions={}) =>\n\n\t{prefix, max} = getOptions hOptions, {\n\t\tprefix: ''\n\t\tmax: undef\n\t\t}\n\tif maxReached(max)\n\t\treturn true\n\n\tif internalDebugging\n\t\tif isEmpty(prefix)\n\t\t\tconsole.log \"IN LOG(#{OL(str)})\"\n\t\telse\n\t\t\tconsole.log \"IN LOG(#{OL(str)}), prefix=#{OL(prefix)}\"\n\n\tPUTSTR \"#{prefix}#{str}\"\n\treturn true   # to allow use in boolean expressions\n\n# ---------------------------------------------------------------------------\n\nexport LOGTAML = (label, value, prefix=\"\", itemPrefix=undef) =>\n\n\tif internalDebugging\n\t\tstr1 = OL(label)\n\t\tstr2 = OL(value)\n\t\tstr3 = OL(prefix)\n\t\tconsole.log \"CALL LOGTAML(#{str1}, #{str2}), prefix=#{str3}\"\n\tassert nonEmpty(label), \"label is empty\"\n\n\tif notdefined(itemPrefix)\n\t\titemPrefix = prefix + \"\\t\"\n\n\tif handleSimpleCase(label, value, prefix)\n\t\treturn true\n\n\tdesc = toNICE(value, {\n\t\tsortKeys: true\n\t\toneIndent: spaces(3)\n\t\t})\n\tPUTSTR prefixed(prefix, \"#{prefix}#{label} = <<<\", prefixed('   ', desc))\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport LOGJSON = (label, value, prefix=\"\") =>\n\n\tif internalDebugging\n\t\tstr1 = OL(label)\n\t\tstr2 = OL(value)\n\t\tstr3 = OL(prefix)\n\t\tconsole.log \"CALL LOGJSON(#{str1}, #{str2}), prefix=#{str3}\"\n\tassert nonEmpty(label), \"label is empty\"\n\n\tdesc = JSON.stringify(value, null, 3)\n\tPUTSTR prefixed(prefix, \"#{prefix}#{label} =\", desc)\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport stringFits = (str) =>\n\n\treturn (str.length <= logWidth)\n\n# ---------------------------------------------------------------------------\n\nexport LOGVALUE = (label, value, hOptions={}) =>\n\t# --- Allow label to be empty, i.e. undef\n\n\t{prefix, itemPrefix, max, short} = getOptions hOptions, {\n\t\tprefix: ''\n\t\titemPrefix: undef\n\t\tmax: undef\n\t\tshort: false      # prefer short strings, e.g. 'HASH', 'ARRAY'\n\t\t}\n\n\tif maxReached(max)\n\t\treturn true\n\n\tif internalDebugging\n\t\tstr1 = OL(label)\n\t\tstr2 = OL(value)\n\t\tstr3 = OL(prefix)\n\t\tconsole.log \"CALL LOGVALUE(#{str1}, #{str2}), prefix=#{str3}\"\n\n\t# --- Handles undef, null, boolean, number\n\tif handleSimpleCase(label, value, prefix)\n\t\treturn true\n\n\tif defined(label)\n\t\tlabelStr = \"#{label} = \"\n\telse\n\t\tlabelStr = \"\"\n\n\t# --- Try OL() - if it's short enough, use that\n\tstr = \"#{prefix}#{labelStr}#{OL(value)}\"\n\n\tif stringFits(str)\n\t\tif internalDebugging\n\t\t\tconsole.log \"Using OL(), #{str.length} <= #{logWidth}\"\n\t\tPUTSTR str\n\t\treturn true\n\n\tif notdefined(itemPrefix)\n\t\titemPrefix = prefix + \"\\t\"\n\n\t[type, subtype] = jsType(value)\n\tswitch type\n\t\twhen 'string'\n\t\t\tif (subtype == 'empty')\n\t\t\t\t# --- empty string\n\t\t\t\tPUTSTR \"#{prefix}#{labelStr}''\"\n\t\t\telse\n\t\t\t\t# --- non empty string\n\t\t\t\tstr = \"#{prefix}#{labelStr}#{quoted(value, 'escape')}\"\n\t\t\t\tif stringFits(str)\n\t\t\t\t\tPUTSTR str\n\t\t\t\telse\n\t\t\t\t\t# --- escape, but not newlines\n\t\t\t\t\tescaped = escapeStr(value, hEscNoNL)\n\t\t\t\t\tPUTSTR \"\"\"\n\t\t\t\t\t\t#{prefix}#{labelStr}\\\"\\\"\\\"\n\t\t\t\t\t\t#{prefixBlock(escaped, itemPrefix)}\n\t\t\t\t\t\t#{prefixBlock('\"\"\"', itemPrefix)}\n\t\t\t\t\t\t\"\"\"\n\n\t\twhen 'hash'\n\t\t\tif short\n\t\t\t\tPUTSTR \"#{prefix}#{labelStr}HASH\"\n\t\t\telse\n\t\t\t\tstr = toNICE(value, {\n\t\t\t\t\tsortKeys: true\n\t\t\t\t\toneIndent: spaces(3)\n\t\t\t\t\t})\n\t\t\t\tif labelStr\n\t\t\t\t\tPUTSTR \"#{prefix}#{labelStr}\"\n\t\t\t\tfor str in blockToArray(str)\n\t\t\t\t\tPUTSTR \"#{itemPrefix}#{str}\"\n\n\t\twhen 'array'\n\t\t\tif short\n\t\t\t\tPUTSTR \"#{prefix}#{labelStr}ARRAY\"\n\t\t\telse\n\t\t\t\tstr = toNICE(value, {\n\t\t\t\t\tsortKeys: true\n\t\t\t\t\toneIndent: spaces(3)\n\t\t\t\t\t})\n\t\t\t\tif labelStr\n\t\t\t\t\tPUTSTR \"#{prefix}#{labelStr}\"\n\t\t\t\tfor str in blockToArray(str)\n\t\t\t\t\tPUTSTR \"#{itemPrefix}#{str}\"\n\n\t\twhen 'regexp'\n\t\t\tPUTSTR \"#{prefix}#{labelStr}<regexp>\"\n\n\t\twhen 'function'\n\t\t\tPUTSTR \"#{prefix}#{labelStr}<function>\"\n\n\t\twhen 'object'\n\t\t\tif isObject(value, '&toLogString')\n\t\t\t\tstr = value.toLogString()\n\t\t\telse\n\t\t\t\tstr = toNICE(value)\n\t\t\t\tassert defined(str), \"str not defined!\"\n\n\t\t\tif hasChar(str, \"\\n\")\n\t\t\t\tif labelStr\n\t\t\t\t\tPUTSTR \"#{prefix}#{labelStr}\"\n\t\t\t\tif notdefined(itemPrefix)\n\t\t\t\t\titemPrefix = prefix\n\t\t\t\tfor line in blockToArray(str)\n\t\t\t\t\tPUTSTR \"#{itemPrefix}#{line}\"\n\t\t\telse\n\t\t\t\tPUTSTR \"#{prefix}#{labelStr}#{str}\"\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nexport LOGSTRING = (label, value, prefix=\"\") =>\n\n\tif internalDebugging\n\t\tstr1 = OL(label)\n\t\tstr2 = OL(value)\n\t\tstr3 = OL(prefix)\n\t\tconsole.log \"CALL LOGSTRING(#{str1}, #{str2}), prefix=#{str3}\"\n\tassert nonEmpty(label), \"label is empty\"\n\tassert isString(value), \"value not a string\"\n\n\t# --- if it's short enough, put on one line\n\tstr = \"#{prefix}#{label} = #{quoted(value)}\"\n\tif stringFits(str)\n\t\tif internalDebugging\n\t\t\tconsole.log \"Put on one line, #{str.length} <= #{logWidth}\"\n\t\tPUTSTR str\n\t\treturn true\n\n\titemPrefix = prefix + \"\\t\"\n\n\tstr = \"#{prefix}#{label} = #{quoted(value, 'escape')}\"\n\tif stringFits(str)\n\t\tPUTSTR str\n\telse\n\t\t# --- escape, but not newlines\n\t\tPUTSTR \"\"\"\n\t\t\t#{prefix}#{label} = \\\"\\\"\\\"\n\t\t\t#{prefixBlock(value, itemPrefix)}\n\t\t\t#{prefixBlock('\"\"\"', itemPrefix)}\n\t\t\t\"\"\"\n\n\treturn true\n\n# ---------------------------------------------------------------------------\n\nhandleSimpleCase = (label, value, prefix) =>\n\t# --- Returns true if handled, else false\n\n\tif defined(label)\n\t\tlabelStr = \"#{label} = \"\n\telse\n\t\tlabelStr = \"\"\n\n\t# --- Handle some simple cases\n\tif (value == undef)\n\t\tPUTSTR \"#{prefix}#{labelStr}undef\"\n\t\treturn true\n\telse if (value == null)\n\t\tPUTSTR \"#{prefix}#{labelStr}null\"\n\t\treturn true\n\telse if isBoolean(value)\n\t\tif value\n\t\t\tPUTSTR \"#{prefix}#{labelStr}true\"\n\t\telse\n\t\t\tPUTSTR \"#{prefix}#{labelStr}false\"\n\t\treturn true\n\telse if isNumber(value)\n\t\tPUTSTR \"#{prefix}#{labelStr}#{value}\"\n\t\treturn true\n\telse\n\t\treturn false\n\n# ---------------------------------------------------------------------------\n\nsetStringifier orderedStringify\nresetLogger()"
  ]
}