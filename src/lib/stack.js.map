{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\stack.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# stack.coffee\n\nimport {\n\tundef, defined, notdefined, OL, OLS, deepCopy, warn, oneof,\n\tisString, isArray, isBoolean, isInteger, isFunctionName,\n\tisEmpty, nonEmpty, isNonEmptyString,\n\tspaces, tabs, getOptions,\n\t} from '@jdeighan/base-utils'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {LOG, LOGVALUE, getMyLogs} from '@jdeighan/base-utils/log'\n\nmainName = '_MAIN_'\n\n# ---------------------------------------------------------------------------\n# --- export only to allow unit tests\n\nexport class Node\n\n\tconstructor: (@id, @funcName, @lArgs, @caller, @doLog=false) ->\n\n\t\tassert isInteger(@id), \"id not an integer\"\n\t\tassert isFunctionName(@funcName), \"not a function name: #{OL(@funcName)}\"\n\t\tassert isArray(@lArgs), \"not an array\"\n\t\tassert notdefined(@caller) || (@caller instanceof Node),\n\t\t\t\"Bad caller\"\n\n\t\t@lCalling = []\n\t\t@isYielded = false\n\n# ---------------------------------------------------------------------------\n\nexport getStackLog = () =>\n\n\treturn getMyLogs() || ''\n\n# ---------------------------------------------------------------------------\n\nexport class CallStack\n\n\t@nextID: 1\n\n\tconstructor: (arg=undef) ->\n\t\tassert notdefined(arg), \"args no longer allowed\"\n\t\t@reset()\n\n\t# ........................................................................\n\n\tlogCalls: (flag=true) ->\n\n\t\t@doLogCalls = flag\n\t\treturn\n\n\t# ........................................................................\n\n\tdebug: (flag=true) ->\n\n\t\t@doDebugStack = flag\n\t\treturn\n\n\t# ........................................................................\n\n\tthrowErrors: (flag=true) ->\n\n\t\t@doThrowErrors = flag\n\t\treturn\n\n\t# ........................................................................\n\n\tlog: (str) ->\n\n\t\tLOG \"#{tabs(@level)}#{str}\"\n\t\treturn\n\n\t# ........................................................................\n\n\treset: () ->\n\n\t\tif @doLogCalls\n\t\t\t@log \"RESET STACK\"\n\t\t@level = 0\n\t\t@logLevel = 0\n\t\t@root = @getNewNode(mainName, [], undef)\n\t\t@setCurFunc(@root)\n\t\treturn\n\n\t# ........................................................................\n\n\tgetNewNode: (funcName, lArgs, caller, doLog=false) ->\n\n\t\tassert isNonEmptyString(funcName), \"funcName not a non-empty string\"\n\t\tid = CallStack.nextID\n\t\tCallStack.nextID += 1\n\t\treturn new Node(id, funcName, deepCopy(lArgs), caller, doLog)\n\n\t# ........................................................................\n\n\tsetCurFunc: (node) ->\n\n\t\tassert defined(node), \"node is undef\"\n\t\t@curFunc = node\n\t\t@curFuncName = node.funcName\n\t\treturn\n\n\t# ........................................................................\n\n\tisEmpty: () ->\n\n\t\treturn (@curFunc == @root)\n\n\t# ........................................................................\n\n\tnonEmpty: () ->\n\n\t\treturn ! @isEmpty()\n\n\t# ........................................................................\n\n\tisActive: (funcName, node=@root) ->\n\n\t\tif (node.funcName == funcName)\n\t\t\treturn true\n\t\tfor node in node.lCalling\n\t\t\tif @isActive(funcName, node) && ! node.isYielded\n\t\t\t\treturn true\n\t\treturn false\n\n\t# ........................................................................\n\n\tisLogging: () ->\n\n\t\treturn @curFunc.doLog\n\n\t# ........................................................................\n\t# ........................................................................\n\n\tenter: (funcName, lArgs=[], doLog=false) ->\n\n\t\tassert isNonEmptyString(funcName), \"funcName not a non-empty string\"\n\t\tif @doLogCalls\n\t\t\tif (lArgs.length == 0)\n\t\t\t\t@log \"ENTER #{OL(funcName)}\"\n\t\t\telse\n\t\t\t\t@log \"ENTER #{OL(funcName)} #{OLS(lArgs)}\"\n\n\t\tnode = @getNewNode(funcName, lArgs, @curFunc, doLog)\n\t\t@curFunc.lCalling.push node\n\t\t@setCurFunc node\n\n\t\t@level += 1\n\t\tif doLog\n\t\t\t@logLevel += 1\n\n\t\tif @doDebugStack\n\t\t\t@dump(@level)\n\t\treturn\n\n\t# ........................................................................\n\n\treturnFrom: (lParms...) ->\n\t\t# --- Always returns from the current function\n\t\t#     parameter is just a check for correct function name\n\t\t# --- We must use spread operator to distinguish between\n\t\t#        returnFrom('func', undef)\n\t\t#        returnFrom('func')\n\n\t\tnArgs = lParms.length\n\t\t[funcName, val] = lParms\n\n\t\t# --- Adjust levels before logging\n\t\tassert (@level > 0), \"dec level when level is 0\"\n\t\t@level -= 1\n\t\tif @isLogging()\n\t\t\tassert (@logLevel > 0), \"dec logLevel when logLevel is 0\"\n\t\t\t@logLevel -= 1\n\n\t\tif @doLogCalls\n\t\t\tif (nArgs == 1)\n\t\t\t\t@log \"RETURN FROM #{OL(funcName)}\"\n\t\t\telse\n\t\t\t\t@log \"RETURN FROM #{OL(funcName)} #{OL(val)}\"\n\n\t\tassert (nArgs==1) || (nArgs==2), \"Bad num args: #{nArgs}\"\n\t\tassert isFunctionName(funcName), \"Not a function name: #{funcName}\"\n\t\tassert (@curFuncName != mainName), \"Return from #{mainName}\"\n\t\tassert (funcName == @curFuncName),\n\t\t\t\"return from #{funcName}, but cur func is #{@curFuncName}\"\n\n\t\t@setCurFunc @curFunc.caller\n\t\tassert (@curFunc.lCalling.length > 0), \"calling stack empty\"\n\t\t@curFunc.lCalling.pop()\n\n\t\tif @doDebugStack\n\t\t\t@dump(@level)\n\t\treturn\n\n\t# ........................................................................\n\n\tyield: (lArgs...) ->\n\t\t# --- We must use spread operator to distinguish between\n\t\t#        yield('func', undef)\n\t\t#        yield('func')\n\n\t\tnArgs = lArgs.length\n\t\tassert (nArgs==1) || (nArgs==2), \"Bad num args: #{nArgs}\"\n\t\t[funcName, val] = lArgs\n\n\t\t# --- Adjust levels before logging\n\t\t@level -= 1\n\t\tif @isLogging()\n\t\t\t@logLevel -= 1\n\n\t\tif @doLogCalls\n\t\t\tif (nArgs == 1)\n\t\t\t\t@log \"YIELD FROM #{OL(funcName)}\"\n\t\t\telse\n\t\t\t\t@log \"YIELD FROM #{OL(funcName)} #{OL(val)}\"\n\n\t\tassert isFunctionName(funcName), \"Not a function name: #{funcName}\"\n\t\tassert (@curFuncName != mainName), \"yield from #{mainName}\"\n\t\tassert (funcName == @curFuncName),\n\t\t\t\"yield #{funcName}, but cur func is #{@curFuncName}\"\n\n\t\t@curFunc.isYielded = true\n\t\tnewCurFunc = @curFunc.caller\n\t\twhile (newCurFunc.isYielded)\n\t\t\tnewCurFunc = newCurFunc.caller\n\t\t@setCurFunc newCurFunc\n\n\t\tif @doDebugStack\n\t\t\t@dump(@level)\n\t\treturn\n\n\t# ........................................................................\n\n\tresume: (funcName) ->\n\n\t\tif @doLogCalls\n\t\t\t@log \"RESUME #{OL(funcName)}\"\n\t\tassert isFunctionName(funcName), \"Not a function name\"\n\n\t\t@setCurFunc @curFunc.lCalling[@curFunc.lCalling.length - 1]\n\t\tassert (@curFunc.funcName == funcName),\n\t\t\t\"resume #{funcName} but resumed @curFunc.funcName\"\n\t\tassert @curFunc.isYielded, \"resume #{funcName} but it's not yielded\"\n\t\t@curFunc.isYielded = false\n\n\t\t@level += 1\n\t\tif @curFunc.doLog\n\t\t\t@logLevel += 1\n\n\t\tif @doDebugStack\n\t\t\t@dump(@level)\n\t\treturn\n\n\t# ........................................................................\n\t# ........................................................................\n\n\tdecLevel: (doLog) ->\n\n\t\t@level -= 1\n\t\tif doLog\n\t\t\t@logLevel -= 1\n\t\treturn\n\n\t# ........................................................................\n\n\tstackAssert: (cond, msg) ->\n\t\t# --- We don't really want to throw exceptions here\n\n\t\tif !cond\n\t\t\tif @doThrowErrors\n\t\t\t\tcroak \"#{msg}\\n#{@dumpStr(@root)}\"\n\t\t\telse\n\t\t\t\twarn \"#{msg}\\n#{@dumpStr(@root)}\"\n\t\treturn\n\n\t# ........................................................................\n\n\tdump: (level=0, oneIndent=spaces(5)) ->\n\n\t\tprefix = oneIndent.repeat(level)\n\t\tconsole.log prefix + '-------- CALL STACK --------'\n\t\tconsole.log prefix + \"(curFunc = #{@curFuncName})\"\n\t\tconsole.log @dumpStr @root, level, oneIndent\n\t\tconsole.log prefix + '----------------------------'\n\t\treturn\n\n\t# ........................................................................\n\n\tdumpStr: (node, level, oneIndent) ->\n\n\t\tassert (node instanceof Node), \"not a Node obj in dump()\"\n\t\tlLines = []\n\t\tlLines.push oneIndent.repeat(level) + @callStr(node)\n\t\tassert isArray(node.lCalling), \"not an array\"\n\t\tfor node in node.lCalling\n\t\t\tlLines.push @dumpStr(node, level+1, oneIndent)\n\t\tstr = lLines.join(\"\\n\")\n\t\treturn str\n\n\t# ........................................................................\n\n\tcallStr: (hNode) ->\n\n\t\tif (hNode == @curFunc)\n\t\t\tcurSym = '> '\n\t\telse\n\t\t\tcurSym = '. '\n\n\t\t{caller, lCalling} = hNode\n\t\tassert isArray(lCalling), \"lCalling not an array\"\n\n\t\tif defined(caller)\n\t\t\tcallerStr = caller.id.toString(10)\n\t\telse\n\t\t\tcallerStr = '-'\n\n\t\tcallingStr = @idStr(lCalling)\n\n\t\tif hNode.doLog\n\t\t\tif hNode.isYielded\n\t\t\t\tsym = ' LY'\n\t\t\telse\n\t\t\t\tsym = ' L'\n\t\telse\n\t\t\tif hNode.isYielded\n\t\t\t\tsym = ' Y'\n\t\t\telse\n\t\t\t\tsym = ''\n\n\t\tstr = \"#{curSym}[#{hNode.id}] #{hNode.funcName} #{callerStr} #{callingStr} #{sym}\"\n\t\treturn str\n\n\t# ........................................................................\n\n\tidStr: (lNodes) ->\n\n\t\tassert isArray(lNodes), \"not an array in idStr()\"\n\t\tif (lNodes.length == 0)\n\t\t\treturn '-'\n\t\tlIDs = []\n\t\tfor node in lNodes\n\t\t\tlIDs.push node.id.toString(10)\n\t\tstr = lIDs.join(',')\n\t\tassert defined(str), \"str not defined\"\n\t\tassert (str != 'undefined'), \"str is 'undefined'\"\n\t\treturn str"
  ]
}