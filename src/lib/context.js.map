{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src\\lib\\context.coffee"
  ],
  "names": [],
  "mappings": "AAAgB;AAAA,IAAA;;AAEhB,OAAA;EACC,KADD;EACQ,QADR;EACkB,KADlB;EACyB,EADzB;EAC6B,QAD7B;CAAA,MAAA;;AAGA,OAAA;EAAQ,MAAR;EAAgB,KAAhB;CAAA,MAAA;;AACA,OAAA;EAAQ,GAAR;CAAA,MAAA;;AACA,OAAA;EACC,GADD;EACM,QADN;EACgB,SADhB;CAAA,MAAA;;AAIA,OAAA;EAAQ,KAAR;CAAA,MAAA;;AAEA,SAAA,GAAY,KAAA,CAAM,sCAAN,EACM,2CADN,EAEM,WAFN,EAbI;;;AAmBhB,OAAA,IAAa,UAAN,MAAA,QAAA;EAEN,WAAa,CAAA,CAAA;IAEZ,IAAC,CAAA,WAAD,GAAe,IAAI,KAAJ,CAAU,QAAV,EAAoB,SAApB;IACf,IAAC,CAAA,OAAD,GAAW,CAAE,IAAC,CAAA,WAAH;IACX,IAAC,CAAA,YAAD,GAAgB,IAAC,CAAA;EAJL,CAAd;;;EAQC,aAAe,CAAA,CAAA;AAEhB,QAAA;IAAE,MAAA,GAAU,IAAC,CAAA,YAAD,KAAiB,IAAC,CAAA;IAC5B,IAAG,MAAH;MACC,MAAA,CAAQ,IAAC,CAAA,OAAO,CAAC,MAAT,KAAmB,CAA3B,EAA+B,qBAA/B;AACA,aAAO,KAFR;KAAA,MAAA;AAIC,aAAO,MAJR;;EAHc,CARhB;;;EAmBC,GAAK,CAAA,GAAC,QAAD,CAAA;AAEN,QAAA,CAAA,EAAA,GAAA,EAAA;IAAE,QAAA,CAAS,aAAT,EAAwB,QAAxB;IACA,KAAA,0CAAA;;MACC,MAAA,CAAO,QAAA,CAAS,MAAT,CAAP,EAAyB,CAAA,cAAA,CAAA,CAAiB,MAAjB,CAAA,CAAzB;MACA,IAAC,CAAA,YAAY,CAAC,GAAd,CAAkB,MAAlB;IAFD;IAGA,SAAA,CAAU,aAAV;EANI,CAnBN;;;EA8BC,SAAW,CAAC,MAAD,CAAA;IAEV,QAAA,CAAS,mBAAT,EAA8B,MAA9B;IACA,IAAC,CAAA,WAAW,CAAC,GAAb,CAAiB,MAAjB;IACA,SAAA,CAAU,mBAAV;EAJU,CA9BZ;;;EAuCC,GAAK,CAAC,MAAD,CAAA;AAEN,QAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAE;IAAA,KAAA,qCAAA;;MACC,IAAG,KAAK,CAAC,GAAN,CAAU,MAAV,CAAH;AACC,eAAO,KADR;;IADD;AAGA,WAAO;EALH,CAvCN;;;EAgDC,UAAY,CAAC,OAAK,KAAN,EAAa,WAAS,EAAtB,CAAA;AAEb,QAAA;IAAE,QAAA,CAAS,YAAT,EAAuB,IAAvB,EAA6B,QAA7B;IACA,QAAA,GAAW,IAAI,KAAJ,CAAU,IAAV,EAAgB,QAAhB;IACX,IAAC,CAAA,OAAO,CAAC,OAAT,CAAiB,QAAjB;IACA,IAAC,CAAA,YAAD,GAAgB;IAChB,SAAA,CAAU,YAAV;EANW,CAhDb;;;EA2DC,QAAU,CAAA,CAAA;IAET,QAAA,CAAS,UAAT;IACA,IAAC,CAAA,OAAO,CAAC,KAAT,CAAA,EADF;IAEE,IAAC,CAAA,YAAD,GAAgB,IAAC,CAAA,OAAO,CAAC,CAAD;IACxB,SAAA,CAAU,UAAV;EALS,CA3DX;;;EAqEC,IAAM,CAAA,CAAA;AAEP,QAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAE;IAAA,KAAA,qCAAA;;MACC,GAAA,CAAI,WAAJ;MACA,KAAK,CAAC,IAAN,CAAA;IAFD;EAFK;;AAvEA",
  "sourcesContent": [
    "# context.coffee\n\nimport {\n\tundef, deepCopy, words, OL, isString,\n\t} from '@jdeighan/base-utils'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {LOG} from '@jdeighan/base-utils/log'\nimport {\n\tdbg, dbgEnter, dbgReturn,\n\t} from '@jdeighan/base-utils/debug'\n\nimport {Scope} from '@jdeighan/base-utils/scope'\n\nlBuiltins = words \"parseInt process JSON import console\",\n                  \"Function String Number Boolean Object Set\",\n                  \"Math Date\"\n\n# ---------------------------------------------------------------------------\n\nexport class Context\n\n\tconstructor: () ->\n\n\t\t@globalScope = new Scope('global', lBuiltins)\n\t\t@lScopes = [ @globalScope ]\n\t\t@currentScope = @globalScope\n\n\t# ..........................................................\n\n\tatGlobalLevel: () ->\n\n\t\tresult = (@currentScope == @globalScope)\n\t\tif result\n\t\t\tassert (@lScopes.length == 1), \"more than one scope\"\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\n\t# ..........................................................\n\n\tadd: (lSymbols...) ->\n\n\t\tdbgEnter \"Context.add\", lSymbols\n\t\tfor symbol in lSymbols\n\t\t\tassert isString(symbol), \"Not a string: #{symbol}\"\n\t\t\t@currentScope.add(symbol)\n\t\tdbgReturn \"Context.add\"\n\t\treturn\n\n\t# ..........................................................\n\n\taddGlobal: (symbol) ->\n\n\t\tdbgEnter \"Context.addGlobal\", symbol\n\t\t@globalScope.add(symbol)\n\t\tdbgReturn \"Context.addGlobal\"\n\t\treturn\n\n\t# ..........................................................\n\n\thas: (symbol) ->\n\n\t\tfor scope in @lScopes\n\t\t\tif scope.has(symbol)\n\t\t\t\treturn true\n\t\treturn false\n\n\t# ..........................................................\n\n\tbeginScope: (name=undef, lSymbols=[]) ->\n\n\t\tdbgEnter \"beginScope\", name, lSymbols\n\t\tnewScope = new Scope(name, lSymbols)\n\t\t@lScopes.unshift newScope\n\t\t@currentScope = newScope\n\t\tdbgReturn \"beginScope\"\n\t\treturn\n\n\t# ..........................................................\n\n\tendScope: () ->\n\n\t\tdbgEnter \"endScope\"\n\t\t@lScopes.shift()    # remove ended scope\n\t\t@currentScope = @lScopes[0]\n\t\tdbgReturn \"endScope\"\n\t\treturn\n\n\t# ..........................................................\n\n\tdump: () ->\n\n\t\tfor scope in @lScopes\n\t\t\tLOG \"   SCOPE:\"\n\t\t\tscope.dump()\n\t\treturn"
  ]
}