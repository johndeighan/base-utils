{
  "version": 3,
  "file": "peggy.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\peggy.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# peggy.coffee\r\n\r\nimport peggy from 'peggy'\r\n{generate} = peggy\r\n\r\nimport {\r\n\tundef, defined, notdefined, pass, OL, getOptions, hasKey,\r\n\tisString, isFunction, isArray, isHash, isEmpty, nonEmpty,\r\n\ttoArray, toBlock, isArrayOfStrings, removeEmptyLines,\r\n\tisNonEmptyString, untabify,\r\n\t} from '@jdeighan/base-utils'\r\nimport {LOG} from '@jdeighan/base-utils/log'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {dbgEnter, dbgReturn, dbg} from '@jdeighan/base-utils/debug'\r\nimport {\r\n\tisIndented, undented, splitLine, indentLevel, indented,\r\n\t} from '@jdeighan/base-utils/indent'\r\nimport {\r\n\tisFile, slurp, barf, withExt, readTextFile,\r\n\t} from '@jdeighan/base-utils/fs'\r\nimport {brew} from '@jdeighan/base-utils/coffee'\r\n\r\nhPreProcessors = {\r\n\tcoffee: (lLines) =>\r\n\t\t[jsCode, _] = brew lLines\r\n\t\treturn jsCode\r\n\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport addPreProcessor = (name, func) =>\r\n\r\n\tassert isNonEmptyString(name), \"Bad name: #{OL(name)}\"\r\n\tassert ! hasKey(hPreProcessors, name), \"Exists: #{OL(name)}\"\r\n\tassert isFunction(func), \"Not a function: #{OL(func)}\"\r\n\thPreProcessors[name] = func\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- peggyCode can be a string or array of strings\r\n\r\nexport peggify = (peggyCode, source=undef, hMetaData) =>\r\n\r\n\tdbgEnter 'peggify', peggyCode, source, hMetaData\r\n\r\n\tassert isHash(hMetaData), \"Not a hash: #{OL(hMetaData)}\"\r\n\r\n\t# --- preprocess peggyCode if required\r\n\t#        - ensure peggyCode is a string\r\n\r\n\ttype = hMetaData.type\r\n\tdbg \"type = #{OL(type)}\"\r\n\tif isNonEmptyString(type)\r\n\t\tpeggyCode = convertToJS(peggyCode, hMetaData)\r\n\telse if isArray(peggyCode)\r\n\t\tpeggyCode = toBlock(peggyCode)\r\n\ttry\r\n\t\tif defined(source)\r\n\t\t\tassert isFile(source), \"Not a file: #{OL(source)}\"\r\n\t\t\tsrcNode = generate(peggyCode, {\r\n\t\t\t\tgrammarSource: source\r\n\t\t\t\tallowedStartRules: ['*']\r\n\t\t\t\tformat: 'es'\r\n\t\t\t\toutput: 'source-and-map'\r\n\t\t\t\ttrace: true   # compile w/tracing capability\r\n\t\t\t\t})\r\n\t\t\th = srcNode.toStringWithSourceMap()\r\n\t\t\tresult = [h.code, h.map.toString()]\r\n\t\telse\r\n\t\t\tjsCode = generate(peggyCode, {\r\n\t\t\t\tallowedStartRules: ['*']\r\n\t\t\t\tformat: 'es'\r\n\t\t\t\toutput: 'source'\r\n\t\t\t\ttrace: true   # compile w/tracing capability\r\n\t\t\t\t})\r\n\t\t\tresult = [jsCode, undef]\r\n\r\n\tcatch err\r\n\t\tconsole.log '-'.repeat(32) + \"  FAILED  \" + '-'.repeat(32)\r\n\t\tconsole.log untabify(peggyCode)\r\n\t\tconsole.log '-'.repeat(74)\r\n\t\tthrow err\r\n\r\n\tdbgReturn 'peggify', result\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport peggifyFile = (filePath) =>\r\n\r\n\t{hMetaData, lLines} = readTextFile(filePath)\r\n\t[jsCode, sourceMap] = peggify lLines, filePath, hMetaData\r\n\tbarf jsCode, withExt(filePath, '.js')\r\n\tif defined(sourceMap)\r\n\t\tbarf sourceMap, withExt(filePath, '.js.map')\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- input may be a string or array of strings\r\n# --- returns a block of JavaScript code\r\n\r\nexport convertToJS = (input, hMetaData={}) =>\r\n\r\n\tdbgEnter 'convertToJS', input, hMetaData\r\n\r\n\t# --- convert input to array of lines\r\n\tif isString(input)\r\n\t\tdbg \"convert string to array\"\r\n\t\tlLines = toArray(input)\r\n\telse\r\n\t\tdbg \"already an array\"\r\n\t\tlLines = input\r\n\tlLines = removeEmptyLines(lLines)\r\n\r\n\tassert isArrayOfStrings(lLines),\r\n\t\t\t\"not an array of strings: #{OL(lLines)}\"\r\n\r\n\t# --- NOTE: There are NO empty lines in lLines !!!\r\n\t#     We will remove lines from lLines as they're processed\r\n\r\n\tassert isHash(hMetaData), \"Not a hash: #{OL(hMetaData)}\"\r\n\ttype = hMetaData.type\r\n\tpreProcessor = hPreProcessors[type]\r\n\tassert isFunction(preProcessor), \"Unknown type: #{OL(type)}\"\r\n\r\n\t# --- Define some utility functions ----------\r\n\r\n\t# --- are there more lines to process?\r\n\tmore = () =>\r\n\t\treturn (lLines.length > 0)\r\n\r\n\t# --- what is the next line?\r\n\tnext = () =>\r\n\t\treturn lLines[0]\r\n\r\n\t# --- what is the level of the next line?\r\n\tnextLevel = () =>\r\n\t\tif (next() == undef)\r\n\t\t\treturn 0\r\n\t\treturn indentLevel(lLines[0])\r\n\r\n\t# --- get the next line, removing it from lLines\r\n\tget = () =>\r\n\t\treturn lLines.shift()\r\n\r\n\t# --- remove the next line without returning it\r\n\tskip = () =>\r\n\t\tlLines.shift()\r\n\t\treturn\r\n\r\n\t# --- get a block of code, as an array, undented\r\n\tgetCodeLines = (minLevel) =>\r\n\t\tdbgEnter 'getCodeLines', minLevel\r\n\t\tlCodeLines = []\r\n\t\twhile (nextLevel() >= minLevel)\r\n\t\t\tlCodeLines.push get()\r\n\t\tresult = undented(lCodeLines)\r\n\t\tdbgReturn 'getCodeLines', result\r\n\t\treturn result\r\n\r\n\t# --------------------------------------------\r\n\r\n\tlPeggy = []   # --- shift lines from lLines as processed\r\n\r\n\tif (next() == 'INITIALIZATION')\r\n\t\tskip()\r\n\t\tdbg \"Found INITIALIZATION section\"\r\n\t\tlCoffee = getCodeLines(1)\r\n\t\tdbg \"   - #{lCoffee.length} lines of coffee code\"\r\n\t\tlPeggy.push \"{{\"\r\n\t\tlPeggy.push preProcessor(lCoffee)\r\n\t\tlPeggy.push \"}}\"\r\n\r\n\tif (next() == 'EACH_PARSE')\r\n\t\tskip()\r\n\t\tdbg \"Found EACH_PARSE section\"\r\n\t\tlCoffee = getCodeLines(1)\r\n\t\tdbg \"   - #{lCoffee.length} lines of coffee code\"\r\n\t\tlPeggy.push \"{\"\r\n\t\tlPeggy.push preProcessor(lCoffee)\r\n\t\tlPeggy.push \"}\"\r\n\r\n\thRules = {}\r\n\twhile more()\r\n\r\n\t\t# --- Get rule name - must be left aligned, no whitespace\r\n\t\tname = get()\r\n\t\tlPeggy.push name\r\n\t\tdbg \"RULE #{OL(name)}\"\r\n\t\tassert !name.match(/\\s/), \"whitespace in rule name #{OL(name)}\"\r\n\t\tassert !hasKey(hRules, name), \"duplicate rule #{name}\"\r\n\t\thRules[name] = 0   # number of options\r\n\r\n\t\twhile more() && (nextLevel() == 1)\r\n\t\t\t# --- Get match expression - 1 indent level, may be multi-line\r\n\t\t\tlExprLines = []\r\n\t\t\twhile (nextLevel() == 1)\r\n\t\t\t\tlExprLines.push get().trim()\r\n\t\t\tassert (lExprLines.length > 0), \"Bad rule #{name}\"\r\n\t\t\tmatchExpr = lExprLines.join(' ')\r\n\r\n\t\t\tch = if (hRules[name] == 0) then '=' else '/'\r\n\t\t\theaderLine = \"#{ch} #{matchExpr}\"\r\n\t\t\tdbg \"\"\r\n\t\t\tdbg \"OPTION #{hRules[name]}\", headerLine\r\n\t\t\tlPeggy.push \"  #{headerLine}\"\r\n\t\t\thRules[name] += 1\r\n\r\n\t\t\tlCoffee = getCodeLines(2)\r\n\t\t\tdbg 'lCoffee', lCoffee\r\n\r\n\t\t\tif (lCoffee.length > 0)\r\n\t\t\t\tlPeggy.push \"    {\"\r\n\t\t\t\tlPeggy.push indented(preProcessor(lCoffee), 2, \"  \")\r\n\t\t\t\tlPeggy.push \"    }\"\r\n\t\t\t\tlPeggy.push \"\"\r\n\r\n\tresult = toBlock(lPeggy)\r\n\tdbgReturn 'convertToJS', result\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n# --- Tracer object does not log\r\n\r\nclass Tracer\r\n\r\n\ttrace: ({type, rule, location}) ->\r\n\t\tpass()\r\n\r\nclass MyTracer extends Tracer\r\n\r\n\tconstructor: () ->\r\n\t\tsuper()\r\n\t\t@level = 0\r\n\r\n\tprefix: () ->\r\n\t\treturn \"|  \".repeat(@level)\r\n\r\n\ttrace: ({type, rule, location, match}) ->\r\n\t\tswitch type\r\n\t\t\twhen 'rule.enter'\r\n\t\t\t\tconsole.log \"#{@prefix()}? #{rule}\"\r\n\t\t\t\t@level += 1\r\n\t\t\twhen 'rule.fail'\r\n\t\t\t\t@level -= 1;\r\n\t\t\t\tconsole.log \"#{@prefix()}NO\"\r\n\t\t\twhen 'rule.match'\r\n\t\t\t\t@level -= 1\r\n\t\t\t\tif defined(match)\r\n\t\t\t\t\tconsole.log \"#{@prefix()}YES - #{OL(match)}\"\r\n\t\t\t\telse\r\n\t\t\t\t\tconsole.log \"#{@prefix()}YES\"\r\n\t\t\telse\r\n\t\t\t\tconsole.log \"UNKNOWN type: #{type}\"\r\n\t\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport peggyParse = (parseFunc, inputStr, hOptions={}) =>\r\n\r\n\t{start, tracer} = getOptions hOptions, {\r\n\t\tstart: undef     #     name of start rule\r\n\t\ttracer: 'none'   # --- can be 'none'/'peggy'/'default'/a function\r\n\t\t}\r\n\r\n\thParseOptions = {}\r\n\tif defined(start)\r\n\t\thParseOptions.startRule = start\r\n\tswitch tracer\r\n\t\twhen 'none'\r\n\t\t\thParseOptions.tracer = new Tracer()\r\n\t\twhen 'peggy'\r\n\t\t\tpass()\r\n\t\twhen 'default'\r\n\t\t\thParseOptions.tracer = new MyTracer()\r\n\t\telse\r\n\t\t\tassert isFunction(tracer), \"tracer not a function\"\r\n\t\t\thParseOptions.tracer = tracer\r\n\r\n\treturn parseFunc(inputStr, hParseOptions)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n"
  ]
}