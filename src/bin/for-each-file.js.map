{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "<anonymous>"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# for-each-file.coffee\n\n# --- Using option -d or -l prevents any execution\n#        therefore option -cmd is not required\n#        but if provided, allows output of command\n#        that would be executed\n\nimport {exec} from 'node:child_process'\n\nimport {\n\tundef, defined, notdefined, nonEmpty, OL, execCmd,\n\tisNonEmptyString, sortArrayOfHashes,\n\t} from '@jdeighan/base-utils'\nimport {LOG} from '@jdeighan/base-utils/log'\nimport {\n\tsetDebugging, dbgEnter, dbgReturn, dbg,\n\t} from '@jdeighan/base-utils/debug'\nimport {\n\tassert, croak,\n\t} from '@jdeighan/base-utils/exceptions'\nimport {\n\tparseCmdArgs,\n\t} from '@jdeighan/base-utils/parse-cmd-args'\nimport {\n\tallFilesMatching, isFile, mkpath,\n\tpushCWD, popCWD,\n\t} from '@jdeighan/base-utils/fs'\n\n# --- Any setting of debug prevents execution\ndebug = undef      # --- 'full' | 'list' | 'json'\nfullDebug = false  # --- set true if debug == 'full'\ncmdStr = undef\n\n# --- Keep track of all promises created\n#     so at the end, we can use Promise.allSettled()\nlPromises = []\n\n# --- An array of {filePath, cmd, output, err}\nlFileRecs = []\nsep = '-'.repeat(40)\n\n# ---------------------------------------------------------------------------\n\ngenOutput = () =>\n\n\t# --- Sort alphabetically by filePath\n\tlFileRecs = sortArrayOfHashes(lFileRecs, 'filePath')\n\tif fullDebug\n\t\tLOG \"lFileRecs:\"\n\t\tLOG '-'.repeat(42)\n\t\tLOG lFileRecs\n\t\tLOG '-'.repeat(42)\n\n\tswitch debug\n\t\twhen 'json'\n\t\t\tLOG JSON.stringify(lFileRecs, null, 3)\n\t\twhen 'full', 'list'\n\t\t\tfor hRec in lFileRecs\n\t\t\t\tif defined(hRec.cmd)\n\t\t\t\t\tLOG \"CMD: #{OL(hRec.cmd)}\"\n\t\t\t\telse\n\t\t\t\t\tLOG \"FILE: #{OL(hRec.filePath)}\"\n\t\telse\n\t\t\tfor hRec in lFileRecs\n\t\t\t\tLOG \"FILE: #{OL(hRec.filePath)}\"\n\t\t\t\tLOG \"CMD: ${OL(hRec.cmd)}\"\n\t\t\t\tif defined(hRec.output)\n\t\t\t\t\tLOG sep\n\t\t\t\t\tLOG hRec.output\n\t\t\t\t\tLOG sep\n\t\t\t\telse if defined(hRec.err)\n\t\t\t\t\tLOG hRec.err.message\n\treturn\n\n# ---------------------------------------------------------------------------\n\nexecute = (hRec) =>\n\n\ttry\n\t\thRec.output = execCmd hRec.cmd\n\tcatch err\n\t\tif fullDebug\n\t\t\tLOG \"   ERROR: #{err.message}\"\n\t\thRec.err = err\n\treturn\n\n# ---------------------------------------------------------------------------\n\ngetCmd = (filePath) =>\n\n\treturn cmdStr.replaceAll('<file>', filePath)\n\n# ---------------------------------------------------------------------------\n\nhandleFile = (filePath) =>\n\n\tif fullDebug\n\t\tLOG \"HANDLE FILE: #{OL(filePath)}\"\n\tassert isFile(filePath), \"Not a file: #{OL(filePath)}\"\n\thRec = {filePath}\n\tif defined(cmdStr)\n\t\tcmd = hRec.cmd = getCmd(filePath)\n\t\tif fullDebug\n\t\t\tLOG \"   CMD: #{OL(cmd)}\"\n\n\tlFileRecs.push hRec\n\tif notdefined(debug) && isNonEmptyString(cmd)\n\t\texecute hRec\n\treturn\n\n# ---------------------------------------------------------------------------\n\nhandleGlob = (glob) =>\n\n\tif fullDebug\n\t\tLOG \"HANDLE GLOB: #{OL(glob)}\"\n\tfor hFile from allFilesMatching(glob)\n\t\t{filePath} = hFile\n\t\thandleFile(hFile.filePath)\n\treturn\n\n# ---------------------------------------------------------------------------\n# --- Usage:\n#    for-each-file <glob> -cmd=\"coffee -cm <file>\"\n\nhCmdArgs = parseCmdArgs({\n\thExpect: {\n\t\tdir: 'string'   # --- dir to search in, def = current dir\n\t\tdebug: ///^ full | list | json $///\n\t\t_: [0, Number.MAX_VALUE]\n\t\tglob: 'string'\n\t\tcmd: 'string'   # --- command to run (replace '<file>')\n\t\t}\n\t})\n\n# --- NOTE: debug, fullDebug and cmdStr are global vars\n{_:lFiles, debug, dir, glob, cmd:cmdStr} = hCmdArgs\nif (debug == 'full')\n\tfullDebug = true\n\nif fullDebug\n\tLOG \"DEBUGGING ON in for-each-file\"\n\tLOG 'hCmdArgs', hCmdArgs\nassert defined(debug) || defined(cmdStr),\n\t\t\"-cmd option required unless debugging or listing\"\n\nif defined(dir)\n\tpushCWD(dir)\n\tif fullDebug\n\t\tLOG \"set current dir = #{OL(dir)}\"\n\n# --- First, cycle through all non-options files\n#     NOTE: any filename that contains '*' or '?'\n#           is treated as a glob\n\nif defined(lFiles)\n\tfor str in lFiles\n\t\tif str.includes('*') || str.includes('?')\n\t\t\thandleGlob(str)\n\t\telse\n\t\t\thandleFile(mkpath(str))\n\n# --- Next, use option -glob if defined\n\nif defined(glob)\n\thandleGlob(glob)\n\nif defined(dir)\n\tif fullDebug\n\t\tLOG \"Restore original current directory\"\n\tpopCWD()\n\nif (lPromises.length > 0)\n\tawait lResults = Promise.allSettled(lPromises)\n\tfor result in lResults\n\t\tLOG result.status\n\ngenOutput()"
  ]
}