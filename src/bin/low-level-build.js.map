{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "./src/bin/low-level-build.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# low-level-build.coffee\n\nimport {globSync} from 'glob'\n\nimport {\n\tundef, defined, notdefined, isEmpty, nonEmpty, OL,\n\thasKey, execCmd, toBlock, add_s,\n\tfileExt, withExt, newerDestFilesExist,\n\t} from '@jdeighan/base-utils'\nimport {assert} from '@jdeighan/base-utils/exceptions'\nimport {LOG} from '@jdeighan/base-utils/log'\nimport {setDebugging} from '@jdeighan/base-utils/debug'\nimport {\n\tslurp, barf, isFakeFile,\n\tisProjRoot, slurpPkgJSON, barfPkgJSON,\n\t} from '@jdeighan/base-utils/fs'\nimport {\n\treadTextFile, allFilesMatching,\n\t} from '@jdeighan/base-utils/read-file'\nimport {brew, brewFile} from '@jdeighan/base-utils/coffee'\nimport {peggifyFile} from '@jdeighan/base-utils/peggy'\n\nhFilesProcessed = {\n\tcoffee: 0\n\tpeggy: 0\n\t}\n\nconsole.log \"-- low-level-build --\"\n\n# ---------------------------------------------------------------------------\n# 1. Make sure we're in a project root directory\n\nassert isProjRoot('.', 'strict'), \"Not in package root dir\"\n\n# ---------------------------------------------------------------------------\n# --- A file (either *.coffee or *.peggy) is out of date unless both:\n#        - a *.js file exists that's newer than the original file\n#        - a *.js.map file exists that's newer than the original file\n\nfileFilter = ({filePath}) =>\n\tjsFile = withExt(filePath, '.js')\n\tmapFile = withExt(filePath, '.js.map')\n\tif (fileExt(filePath) == '.peggy') && isFakeFile(jsFile)\n\t\treturn true\n\treturn ! newerDestFilesExist(filePath, jsFile, mapFile)\n\n# ---------------------------------------------------------------------------\n# 2. Search project for *.coffee files and compile them\n#    unless newer *.js and *.js.map files exist\n\nfor hFile from allFilesMatching('**/*.coffee', {fileFilter})\n\t{relPath} = hFile\n\tLOG relPath\n\tbrewFile relPath\n\thFilesProcessed.coffee += 1\n\n# ---------------------------------------------------------------------------\n# 3. Search src folder for *.peggy files and compile them\n#    unless newer *.js and *.js.map files exist OR it needs rebuilding\n\nfor hFile from allFilesMatching('**/*.peggy', {fileFilter})\n\t{relPath} = hFile\n\tLOG relPath\n\tpeggifyFile relPath\n\thFilesProcessed.peggy += 1\n\n# ---------------------------------------------------------------------------\n\nhBin = {}    # --- keys to add in package.json / bin\n\n# ---------------------------------------------------------------------------\n# --- generate a 3 letter acronym if file stub is <str>-<str>-<str>\n\ntla = (stub) =>\n\n\tif lMatches = stub.match(///^\n\t\t\t([a-z])(?:[a-z]*)\n\t\t\t\\-\n\t\t\t([a-z])(?:[a-z]*)\n\t\t\t\\-\n\t\t\t([a-z])(?:[a-z]*)\n\t\t\t$///)\n\t\t[_, a, b, c] = lMatches\n\t\tresult = a + b + c\n\t\treturn result\n\telse\n\t\treturn undef\n\n# ---------------------------------------------------------------------------\n# 4. For every *.coffee file in the 'src/bin' directory that\n#       has key \"shebang\" set:\n#       - save <stub>: <jsPath> in hBin\n#       - if has a tla, save <tla>: <jsPath> in hBin\n\nfor {relPath, stub} from allFilesMatching('./src/bin/**/*.coffee')\n\t[hMetaData] = readTextFile relPath\n\tif hMetaData?.shebang\n\t\tjsPath = withExt(relPath, '.js')\n\t\thBin[stub] = jsPath\n\t\tshort_name = tla(stub)\n\t\tif defined(short_name)\n\t\t\thBin[short_name] = jsPath\n\n# ---------------------------------------------------------------------------\n# 5. Add sub-keys to key 'bin' in package.json\n#    (create if not exists)\n\nif nonEmpty(hBin)\n\thJson = slurpPkgJSON()\n\tif ! hasKey(hJson, 'bin')\n\t\tLOG \"   - add key 'bin'\"\n\t\thJson.bin = {}\n\tfor key,value of hBin\n\t\tif (hJson.bin[key] != value)\n\t\t\tLOG \"   - add bin/#{key} = #{value}\"\n\t\t\thJson.bin[key] = value\n\tbarfPkgJSON hJson\n\nnCoffee = hFilesProcessed.coffee\nif (nCoffee > 0)\n\tconsole.log \"(#{nCoffee} coffee file#{add_s(nCoffee)} compiled)\"\n\nnPeggy = hFilesProcessed.peggy\nif (nPeggy > 0)\n\tconsole.log \"(#{nPeggy} peggy file#{add_s(nPeggy)} compiled)\""
  ]
}