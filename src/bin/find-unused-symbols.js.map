{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "src/bin/find-unused-symbols.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# find-unused-symbols.coffee\n\nimport {\n\tundef, defined, notdefined, OL, isEmpty, nonEmpty,\n\tisNonEmptyString,\n\tcenteredText, truncateStr, isArrayOfStrings, keys,\n\t} from '@jdeighan/base-utils'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {LOG, LOGVALUE} from '@jdeighan/base-utils/log'\nimport {\n\tparseCmdArgs,\n\t} from '@jdeighan/base-utils/parse-cmd-args'\nimport {\n\tdirContents, isProjRoot, mkpath, isFile, fileExt,\n\t} from '@jdeighan/base-utils/fs'\nimport {allFilesMatching} from '@jdeighan/base-utils/read-file'\nimport {analyzeCoffeeFile} from '@jdeighan/base-utils/ast-walker'\nimport {fmt, proj} from './bin-utils.js'\n\n# ---------------------------------------------------------------------------\n# --- Usage:\n#    find-unused-symbols <filePath> [-root=<dir>] [-debug]\n\n{_:lFiles, root, debug} = parseCmdArgs({\n\thExpect: {\n\t\t_: [1,1]        # file whose exports to search for\n\t\troot: 'string'\n\t\tdebug: 'boolean'\n\t\t}\n\t})\n\nif notdefined(root)\n\troot = '..'\n\nfilePath = lFiles[0]\nassert (fileExt(filePath) == '.coffee'), \"Not a coffee file: #{OL(filePath)}\"\nassert isFile(filePath), \"Not a file: #{OL(filePath)}\"\nhFileInfo = analyzeCoffeeFile filePath\nlSymbols = hFileInfo.lExported\n\nif debug\n\tLOGVALUE 'debug', true\n\tLOGVALUE 'root', root\n\tLOGVALUE 'filePath', filePath\n\tLOGVALUE 'lSymbols', lSymbols\n\n# --- Cycle through every directory inside the root directory\n#     that contains a package.json file\n\nhProjects = {}    # --- { <proj>: {<filePath>: <hInfo>}}\nfor dirName from dirContents(root, 'dirsOnly')\n\tdir = \"#{root}/#{dirName}\"\n\tif isProjRoot(dir)\n\t\tLOG \"PROJ ROOT: #{dir}\", 'max=15'\n\t\thFiles = hProjects[dir] = {}\n\t\tpattern = \"#{dir}/**/*.coffee\"\n\t\tfor {filePath} from allFilesMatching(pattern, 'eager')\n\t\t\tLOG \"PATH: #{filePath}\", 'max=15'\n\t\t\t# hFiles[path] = analyzeCoffeeFile(path).lUsed\n\n#if debug\n#\tLOGVALUE 'hProjects', hProjects\n\nprocess.exit()\n\nh = {}\nhOpt = {log: debug, from: file}\nfor symbol in lSymbols\n\tLOG centeredText(symbol, 64, 'char==')\n\tfor dir in lProjects\n\t\th[symbol] = [n1, n2, n3] = symbolNumUsages(symbol, dir, hOpt)\n\t\tif (n1 + n2 + n3 > 0)\n\t\t\tLOG fmt(n1, n2, n3, proj(dir))\n\ncompareFunc = (a, b) =>\n\tif (h[a][0] < h[b][0])\n\t\treturn -1\n\telse if (h[b][0] < h[a][0])\n\t\treturn 1\n\telse\n\t\treturn 0\n\nfor symbol in keys(h).sort(compareFunc)\n\t[n1, n2, n3] = h[symbol]\n\tLOG fmt(n1, n2, n3, symbol)"
  ]
}